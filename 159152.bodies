class location_set_test
!!!207536.cpp!!!	location_set_constructor()
{
  butter::location_set loc;
  BOOST_CHECK(loc.source_directory().path() == ".");
  BOOST_CHECK(loc.source_directory().path() == loc.base_path());
  BOOST_CHECK(loc.topdown().empty());
//BOOST_CHECK(loc.find("path") == loc.end());
  BOOST_CHECK(nullptr == loc.root());

  QTextOStream os(stdout);
  loc.serialize(os);
}
{
  butter::location_set loc("../butter/src");
  BOOST_CHECK(loc.source_directory().path() == "../butter/src");
  BOOST_CHECK(loc.source_directory().path() == loc.base_path());
  BOOST_CHECK(loc.topdown().empty());
//BOOST_CHECK(loc.find("path") == loc.end());
  BOOST_CHECK(nullptr == loc.root());

  QTextOStream os(stdout);
  loc.serialize(os);
}

!!!207920.cpp!!!	location_set_insert_method()
butter::location_set loc;
loc.insert("path");
BOOST_CHECK(nullptr != loc.root());
BOOST_CHECK("path" == loc.base_path());
BOOST_CHECK(! loc.topdown().empty());
//BOOST_CHECK(loc.find("path") != loc.end());

QTextOStream os(stdout);
loc.serialize(os);

!!!208048.cpp!!!	location_set_insert_multiple()
butter::location_set loc;
loc.insert("path1");
loc.insert("path1/path2");
loc.insert("path1/path3");
loc.insert("path1/path2/path4");
BOOST_CHECK("path1" == loc.base_path());
BOOST_CHECK_EQUAL(4, loc.topdown().size());

//BOOST_CHECK(loc.find("path") != loc.end());

QTextOStream os(stdout);
loc.serialize(os);

!!!245168.cpp!!!	location_set_insert_below_root()
butter::location_set loc;
loc.insert("path1/path2/path4");
loc.insert("path1/path2");
loc.insert("path1/path3");
loc.insert("path1");
BOOST_CHECK("path1" == loc.base_path());
BOOST_CHECK_EQUAL(4, loc.topdown().size());

//BOOST_CHECK(loc.find("path") != loc.end());

QTextOStream os(stdout);
loc.serialize(os);

!!!245552.cpp!!!	location_set_insert_src_dir()
butter::location_set loc("src");
loc.insert("path1");
loc.insert("path1/path2");
loc.insert("path1/path3");
loc.insert("path1/path2/path4");
BOOST_CHECK("src/path1" == loc.base_path());
BOOST_CHECK_EQUAL(4, loc.topdown().size());

//BOOST_CHECK(loc.find("path") != loc.end());

QTextOStream os(stdout);
loc.serialize(os);

!!!245680.cpp!!!	location_set_insert_negative_dir()
butter::location_set loc("src");
loc.insert("../butter/path1");
loc.insert("../butter/path1/path2");
loc.insert("../butter/path1/path3");
loc.insert("../butter/path1/path2/path4");

BOOST_CHECK("butter/path1" == loc.base_path());
BOOST_CHECK_EQUAL(4, loc.topdown().size());

//BOOST_CHECK(loc.find("path") != loc.end());

QTextOStream os(stdout);
os << "base_path: " << loc.base_path() << "\n";
loc.serialize(os);

!!!207792.cpp!!!	location_set_value_method()
butter::location loc;
int dpi{ 314 };
const QString t{ '.' };
loc.value(&dpi);
BOOST_CHECK_EQUAL(314, *reinterpret_cast<const int *>(loc.value()));
!!!245936.cpp!!!	location_set_insert_sibling_root()
butter::location_set loc("src");
loc.insert("ax/path1/path2");
loc.insert("ax/path2");
loc.insert("../cat/path3");
loc.insert("dog/path1/path2/path4");

BOOST_CHECK(".." == loc.base_path());
BOOST_CHECK_EQUAL(4, loc.topdown().size());

//BOOST_CHECK(loc.find("path") != loc.end());

QTextOStream os(stdout);
os << "base_path: " << loc.base_path() << "\n";
loc.serialize(os);

