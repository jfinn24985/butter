class gmake_generator
!!!210729.cpp!!!	assoc_library(in a_target : UmlArtifact, out a_os : QTextOStream, out a_includes : unistr, out a_ldflags : unistr, out a_cflags : unistr) : void
////////////////////////////////////
// Define the associations of target
//
// to sources and libraries
//
QString project_;
QString lib_body_;
if (a_target.property_value (butter_constants::butter_project_name, project_))
{
  //////////////////////////////////
  // Is an externally linked library
  //
/* {{BEGINDOC
<property name="include" source="artifact" type="library" subtypes="external" style="make">Add
include directory properties to associated target.</property>

<property name="flags" source="artifact" type="library" subtypes="external" style="make">Add
compilation flags to associated target.</property>

<property name="ldflags" source="artifact" type="library" subtypes="external" style="make">Add
linker flags to associated target.</property>
ENDDOC}} */
    find_hdr_link (a_target, a_includes, a_ldflags, a_cflags, section_name, true);
}
else
{
  ///////////////////
  // Is local library
  //
  QTextOStream lib_os_ (&lib_body_); // Stream for dependent library data
  const QString lib_path_ (root_dir ().create_relative (a_target.package().src_path ()));
  QString library_type_;
  pathcmp lib_fname_ ("$(ROOTDIR)");
  if (! lib_path_.isEmpty ())
  {
    lib_fname_ = lib_fname_ / lib_path_;
  }
  if (a_target.property_search (butter_constants::butter_lib_type_name, library_type_)
      && butter_constants::shared_value == library_type_)
  {
    //////////////////////
    // Is a shared library
    //
    const QString lib_name_ (a_target.name () + "$(sufshrlink)");
    lib_fname_ = lib_fname_ / lib_name_;
    // Add to linker information
    merge_string_list (a_ldflags, lib_fname_.path_localised ());
  }
  else
  {
    //////////////////////
    // Is a static library
    //
    const QString lib_name_ (a_target.name () + "$(suflib)");
    lib_fname_ = lib_fname_ / lib_name_;
    // Add to object list
    QString obj_body_;
    {
      QTextOStream obj_os_ (&obj_body_);
      obj_os_ << this->target_NAME () << "_OBJ+=" << lib_fname_.path_localised ();
    }
    this->individual_obj_.append (obj_body_);
  }
  //////////////////////
/* {{BEGINDOC
<property name="ldflags" source="artifact" type="source" style="make">Add
linker flags transitively to targets associated to the static or shared library
this source is associated with.</property>
ENDDOC}} */
  QVector < UmlArtifact > assoc_arts_ (const_cast< UmlArtifact& >(a_target).associatedArtifacts ());
  for (unsigned int i_ = 0; i_ < assoc_arts_.size (); ++i_)
  {
    const QString stereotype_ (assoc_arts_[i_]->stereotype ().data ());
    if (stereotype_ == butter_constants::library_stereotype
        || stereotype_ == butter_constants::source_stereotype)
    {
      QString ldflags_;
      if (assoc_arts_[i_]->property_value (butter_constants::butter_ldflags_name, ldflags_))
      {
        merge_string_list (a_ldflags, ldflags_);
      }
    }
  }
  lib_os_ << lib_fname_.path_localised () << " ";
  // Both static/shared add include and link flags, ignore cflags
/* {{BEGINDOC
<property name="ldflags" source="artifact" type="library" subtypes="shared static" style="make">
Add linker flags to targets associated to this library.</property>
<property name="include" source="artifact" type="library" subtypes="shared static" style="make">Add
include directories to targets associated to the library.</property>
ENDDOC}} */
  QString ignored_cflags_;
  find_hdr_link (a_target, a_includes, a_ldflags
      , ignored_cflags_, section_name, true);
}
this->lib_set_.append (lib_body_);
!!!210857.cpp!!!	assoc_source(in a_target : UmlArtifact, out a_os : QTextOStream, in a_filename : unistr, in a_basename : unistr, in a_src_inc : unistr, in a_src_flags : unistr, in a_isdoc : bool) : void
////////////////////////////////////
// Define the associations of target
//
// to sources and documents
//
/* \cond xdoc
<xdoc:artifact style="make">Filename of associated artifact is added to target's
source variable</xdoc:artifact>
\endcond xdoc */
a_os << " \\\n\t" << a_filename;

QString source_extra_;
{
  QTextOStream source_extra_os_ (&source_extra_);
  if (a_isdoc)
  {
    /* \cond xdoc
<xdoc:artifact stereotype="document" style="make">Filename with suffix replaced with
the object suffix is added to target's object variable.</xdoc:artifact>
    \endcond xdoc */
    source_extra_os_ << this->target_NAME () << "_OBJ+=" << a_basename << "$(sufobj)\n";
  }
  /* \cond xdoc
<xdoc:section part-of="property/include/make">
   <dl><dt>artifact/stereotype=source</dt><dd>Add
include directories to compilation of this source only.  Any include directories
needed to compile dependents of this source should be set in this property on
the target artifact that is associated to the source.</dd></dl></xdoc:section>

<xdoc:section part-of="property/flags/make">
  <dl><dt>artifact/stereotype=source</dt><dd>Add to
compilation of this source only. Any flags needed to compile dependents of this
source should be set in this property on the target artifact that is associated
to the source.</dd></dl></xdoc:section>

<xdoc:section part-of="property/compiler/make">
  <dl><dt>artifact/stereotype=source</dt><dd>When <xdoc:xref name="property/flags">flags</xdoc:xref>
   is set, [compiler]FLAGS is adjusted instead of CCCFLAGS</dd></dl></xdoc:section>
  \endcond xdoc */
  if (! a_src_inc.isEmpty () || ! a_src_flags.isEmpty ())
  {
    QString cppflags_, compflags_, ignored_;
    this->process_flags (a_src_inc, a_src_flags, cppflags_, compflags_, ignored_);
    QString comp_ ("CCC");
    BUTTER_ALWAYS(a_target.property_value (butter_constants::butter_compiler_name, comp_)
        || ! a_isdoc
                  , ("<p><b>Error:</b> Missing '" + butter_constants::butter_compiler_name
                                  + "' property on " + QString (a_filename)).utf8 ().data ());
    if (! cppflags_.isEmpty ())
    {
      source_extra_os_ << a_basename << "$(sufobj) " << a_basename << "$(sufdep) : CPPFLAGS+=" << cppflags_ << "\n";
    }
    if (! compflags_.isEmpty ())
    {
      source_extra_os_ << a_basename << "$(sufobj) : " << comp_ << "FLAGS+=" << compflags_ << "\n";
    }
    source_extra_os_ << "\n";
  }
}
if (! source_extra_.isEmpty ())
{
  this->individual_obj_.append ("\n");
  this->individual_obj_.append (source_extra_);
}
!!!161065.cpp!!!	descendent_link(inout a_art : compound_artifact, inout a_sys : compound_artifact, in a_loc : location) : void
// Need to write the "M_sys" include line.
QString tmp_;
QTextOStream desc_os_ (&tmp_);
{
  const int e_ = rules_name.find(' ');
  QString name_ (e_ < 0 ? rules_name : rules_name.left(e_));
  desc_os_ << "include " << (pathcmp("$(ROOTDIR)") / name_).path_localised () << "\n\n";
}
// Keep parent dir definitions.
if (NULL != a_loc.parent ())
{
  // Add us to base makefile
  QString & link_ = a_sys.target (a_loc.path ().path ()).second;
  link_.append ("dirs += ");
  link_.append (pathcmp(root_dir ().create_relative (a_loc.full_path ())).path_localised ());
  link_.append ("\n");
}
a_art.preamble.second.append (tmp_);

!!!210985.cpp!!!	end_target(in a_target : UmlArtifact, out a_os : QTextOStream, in a_include : unistr, in a_ldflags : unistr, in a_cflags : unistr, in a_compiler : unistr, in a_type : target_type) : void
////////////////////////////////
// Finalise target build instructions
//
a_os << "\n";
if (a_type == other)
{
  ////////////////
  // Handle "other" library types specially.
  QString other_type_ (this->other_target_type_.upper ());
  this->find_replace (other_type_, '-', '_');
  QString cppflags_, compflags_;
  this->process_flags(a_include, a_cflags, cppflags_, compflags_, a_ldflags);
  if (! compflags_.isEmpty ())
  {
    a_os << this->qualified_target_name_ << ": " << other_type_ << "FLAGS+=" << compflags_ << "\n";
  }
  if (! cppflags_.isEmpty ())
  {
    a_os << this->qualified_target_name_ << ": " << other_type_ << "FLAGS+=" << cppflags_ << "\n";
  }
  if (! a_ldflags.isEmpty ())
  {
    a_os << this->qualified_target_name_ << ": " << other_type_ << "FLAGS+=" << a_ldflags << "\n";
  }
  a_os << this->qualified_target_name_ << " : $(" << this->target_NAME () << "SRC) " << this->lib_set_ << "\n"
        << "\t$(" << other_type_ << ") $(" << other_type_ << "FLAGS) $(" << other_type_ << "OUT)" << this->qualified_target_name_
            << " $(" << other_type_ << "IN)$(" << this->target_NAME () << "SRC)\n\n";
}
else
{
  // Add dependency information
  a_os << target_NAME () << "_DINC := $(filter %$(sufdep), $(" << target_NAME ()
      << "SRC:." << CppSettings::sourceExtension () << "=$(sufdep)))"
      << " $(filter %$(sufdep), $(" << target_NAME () << "SRC:.c=$(sufdep)))\n";
  // Create linker and compiler flagsets
  QString cppflags_, compflags_;
  this->process_flags(a_include, a_cflags, cppflags_, compflags_, a_ldflags);
   if (! a_ldflags.isEmpty ())
  {
    a_os << this->qualified_target_name_ << ": LDFLAGS+= " << a_ldflags << "\n";
  }
 if (! compflags_.isEmpty ())
  {
    a_os << this->qualified_target_name_ << ": CCCFLAGS+=" << compflags_ << "\n";
    a_os << this->qualified_target_name_ << ": CCFLAGS+=" << compflags_ << "\n";
  }
  if (! cppflags_.isEmpty ())
  {
    // Set preprocessor flags on target and dependency files
    a_os << this->qualified_target_name_ << " $("
        << target_NAME () << "_DINC) : CPPFLAGS+=" << cppflags_ << "\n";
  }
  // Add any object definitions.
  if (! this->individual_obj_.isEmpty ())
  {
    a_os << this->individual_obj_ << "\n";
  }
  a_os << target_NAME () << "_OBJ+="
      << "$(filter %$(sufobj), $(" << target_NAME ()
      << "SRC:." << CppSettings::sourceExtension ()
      << "=$(sufobj)))\n"
      << "USEROBJ+=$(" << target_NAME () << "_OBJ)\n";
  a_os << this->qualified_target_name_
          << " : $(" << this->target_NAME () << "_SRC) $("
                      << this->target_NAME () << "_DINC)\n";
  // Include dependency files.
  a_os << "-include $(" << target_NAME () << "_DINC)\n";

  // Finally add target build definition
  switch (a_type)
  {
  case executable:
    {
      a_os << "$(eval $(call do_link_exe," << this->qualified_target_name_ << ",$(" << this->target_NAME () << "_OBJ)))\n";
      break;
    }
  case shared_library:
    {
      a_os << "$(eval $(call do_link_shr," << this->qualified_target_name_
          << ",$(" << this->target_NAME () << "_OBJ),$(or $(" << this->target_NAME () <<"_VERSION),0)))\n";
      break;
    }
    break;
  case static_library:
    {
      a_os << "$(eval $(call do_archive," << this->qualified_target_name_ << ",$(" << this->target_NAME () << "_OBJ)))\n";
      break;
    }
    break;
  case other: // Can not get here.
    break;
  }
}

a_os << "\nall :: " << this->qualified_target_name_ << "\n";
a_os << "TARGETS+=" << this->qualified_target_name_ << "\n\n";
!!!160809.cpp!!!	initialise(inout a_base : location, in a_project : UmlItem, inout a_sys : compound_artifact) : void
// The include dir is the difference between the current fullpath and the
// top-projects hdrDir
QString init_text_;
{
  QTextOStream init_os_ (&init_text_);
  init_os_ << "ROOTDIR := ";
  {
		QDir rpath_ (root_dir ());
	  if (1 < QDir::rootDirPath ().length ()) // Multi char root
	  {
		  // Root_dir_ _is_ absolute, so if it starts with
			// "/" we know it is not yet localised.
		  if (rpath_.path()[0] == QChar('/'))
		  {
			  rpath_.setPath (QDir::cleanDirPath(QDir::root ().filePath ("." + rpath_.path ())));
		  }

	  }
  init_os_ << QDir::convertSeparators(rpath_.path ()) << "\n";
  }
  {
    const int e_ = rules_name.find(' ');
    QString name_ (e_ < 0 ? rules_name : rules_name.left(e_));
    init_os_ << "include " << (pathcmp("$(ROOTDIR)") / name_).path_localised () << "\n\n";
  }
  const pathcmp base_include_ (dynamic_cast< const UmlPackage& >(a_project).hdr_path ());

  // Create list of include directories
  QString inc_;
  a_project.property_value (butter_constants::butter_include_name, inc_);
  if (!root_dir ().equality (base_include_))
  {
    inc_.append(" " + root_dir ().create_relative (base_include_));
  }

  // Get list of flags
  QString flags_;
  a_project.property_search (butter_constants::butter_flags_name, flags_);
  // Get linker flags
  QString linkflag_;
  a_project.property_search (butter_constants::butter_ldflags_name, linkflag_);

  // Process flags into preprocessor and compiler sets
  process_flags (inc_, flags_, inc_, flags_, linkflag_);
  if (!inc_.isEmpty())
  {
    init_os_ << "CPPFLAGS+=" << inc_ << "\n";
  }
  if (!flags_.isEmpty())
  {
    init_os_ << "CCFLAGS+=" << flags_ << "\n";
    init_os_ << "CCCFLAGS+=" << flags_ << "\n";
  }
  if (! linkflag_.isEmpty())
  {
    init_os_ << "LDFLAGS+=" << linkflag_ << "\n";
  }
}
a_sys.preamble.second = init_text_;
!!!211113.cpp!!!	install_target(in a_target : UmlArtifact, out a_os : QTextOStream, in a_loc_var : unistr, in a_type : install_type, in a_isdoc : bool) : void
QString target_name_;
if (a_isdoc)
{
  target_name_ = a_target.name ();
}
else
{
  target_name_ = this->qualified_target_name_;
}
a_os << "$(eval $(call do_install," << target_name_;
if (butter_constants::is_install_keyword (a_loc_var))
{
  a_os << "," << a_loc_var << "DIR,";
}
else if (a_loc_var.right(3) == "DIR")
{
  // assume is user defined variable
  a_os << "," << a_loc_var << ",";
}
else
{
  // assume is an actual path
  a_os << ",," << a_loc_var;
}
a_os << "))\n\n";
!!!236457.cpp!!!	process_flags(in a_inc_list : unistr, in a_flag_list : unistr, out a_cppflags : unistr, out a_cflags : unistr, inout a_ldflags : unistr) : void
QTextOStream cppos_ (&a_cppflags);
QTextOStream flagos_ (&a_cflags);
if (! a_inc_list.isEmpty())
{
  for (const_token_iterator e1_, b1_(a_inc_list.simplifyWhiteSpace (), ' '); b1_ != e1_; ++b1_)
  {
    const QString item_(b1_->c_str ());
    BUTTER_CHECK (! item_.isEmpty ()
                  , "<p><em>Programming error:</em> token iterator returned an empty string</p>");
    if ('$' != item_[0] && QDir::isRelativePath (item_))
    {
      cppos_ << "-I" << (pathcmp("$(ROOTDIR)") / item_).path_localised () << " ";
    }
    else
    {
      cppos_ << "-I" << pathcmp(item_).path_localised () << " ";
    }
  }
}
if (! a_flag_list.isEmpty())
{
  for (const_token_iterator e1_, b1_(a_flag_list.simplifyWhiteSpace (), ' '); b1_ != e1_; ++b1_)
  {
    const QString item_(b1_->c_str ());
    BUTTER_CHECK (! item_.isEmpty ()
                  , "<p><em>Programming error:</em> token iterator returned an empty string</p>");
    if (item_.length() <= 2)
    {
      flagos_ << item_ << " ";
    }
    else if ('-' == item_[0])
    {
      if ('I' == item_[1])
      {
        cppos_ << "-I" << pathcmp(item_.mid(2)).path_localised () << " ";
      }
      else if ('D' == item_[1])
      {
        cppos_ << item_ << " ";
      }
      else
      {
        flagos_ << item_ << " ";
      }
    }
    else
    {
      if ('$' == item_[0] && (item_.contains("INC") || item_.contains("CPP") || item_.contains("HDR")))
      {
        cppos_ << item_ << " ";
      }
      else
      {
        flagos_ << item_ << " ";
      }
    }
  }
}
if (a_ldflags.isEmpty())
{
  QString ldflags_;
  {
    QTextOStream flagos_ (&ldflags_);
    for (const_token_iterator e1_, b1_(a_ldflags.simplifyWhiteSpace (), ' '); b1_ != e1_; ++b1_)
    {
      const QString item_(b1_->c_str ());
      BUTTER_CHECK (! item_.isEmpty ()
                    , "<p><em>Programming error:</em> token iterator returned an empty string</p>");
      if ('L' == item_[1])
      {
        if ('-' == item_[0] || '/' == item_[0])
        {
          if (QDir::isRelativePath (item_.mid(2)))
          {
            flagos_ << item_.left(2) << (pathcmp("$(ROOTDIR)") / item_.mid(2)).path_localised () << " ";
            continue;
          }
        }
      }
      flagos_ << item_ << " ";
    }
  }
  a_ldflags = ldflags_;
}
!!!162089.cpp!!!	process_hdrs(in a_inc_list : unistr) : unistr
QString Result;
{
  QTextOStream os_ (&Result);
  for (const_token_iterator e1_, b1_(a_inc_list.simplifyWhiteSpace (), ' '); b1_ != e1_; ++b1_)
  {
    const QString item_(b1_->c_str ());
    if ('$' != item_[0] && QDir::isRelativePath (item_))
    {
      os_ << "-I$(ROOTDIR)/" << item_ << " ";
    }
    else
    {
      os_ << "-I" << item_ << " ";
    }
  }
}
return Result;
!!!210601.cpp!!!	start_target(in a_target : UmlArtifact, out a_os : QTextOStream, in a_build_file : unistr, in a_compiler : unistr, in a_type : target_type) : void
/////////////////
// Initialise variables for the new target
this->qualified_target_name_ = a_target.name ();
this->target_NAME (a_target);
this->other_target_type_.truncate (0);    // An "other" target type.
this->lib_set_.truncate (0);              // Set of included libraries
this->individual_obj_.truncate (0);       // Set of sources that need to be individually compiled
///////////////////////////////////////////
// Define the characteristics of the target
//
// a_target must be executable or library stereotype!
//
switch (a_type)
{
case executable:
  {
    this->qualified_target_name_.append ("$(sufexe)");
  }
  break;
case static_library:
  this->qualified_target_name_.append ("$(suflib)");
  break;
case shared_library:
  this->qualified_target_name_.append ("$(sufshr)");
  break;
case other:
  a_target.property_value (butter_constants::butter_other_name, this->other_target_type_);
  break;
}

// Handle target specific include file for library types only
if (a_type != executable)
{
  if (! a_build_file.isEmpty ())
  {
    a_os << "-include " << (pathcmp("$(ROOTDIR)")
        / a_build_file).path_localised() << ".mak\n\n";
    a_os << "-include " << (pathcmp("$(ROOTDIR)")
        / a_build_file).path_localised() << ".make\n\n";
  }
}

//////////////////
// Start the source file associations
a_os << this->target_NAME () << "SRC := ";
