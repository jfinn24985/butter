class base_generator
!!!128304.cpp!!!	get_artifact(inout a_loc : location, in a_name : unistr) : std::unique_ptr< compound_artifact >
// Get deployment views from current location's packages
std::unique_ptr< compound_artifact > Result;
if( a_loc.packages().count() > 0 )
{
  QVector< UmlItem > docs_ = a_loc.find_uml_document( a_name );
  // If any documents found
  if( ! docs_.isEmpty() )
  {
    Result = std::unique_ptr< compound_artifact >( new compound_artifact( dynamic_cast< UmlArtifact & >( *docs_.at( 0 ) ) ) );
    for( unsigned int k_ = 1; k_ < docs_.count(); ++k_ )
    {
      UmlItem * item_ = docs_.at( k_ );
      Result->merge( dynamic_cast< UmlArtifact & >( *item_ ) );
      log::com.trace( log::info, "<p><b>Note:</b> Removing duplicated build file from Package " + item_->parent()->name() + "</p>\n" );
      // item_->parent()->children().remove(item_->parent ()->children().findRef(item_));
      item_->set_Name( ( "OLD_" + a_name ).utf8() );
    }
    // Reset the artifact (keeps section labels but empties content)
    Result->document().reset();
  }
}
if( NULL == Result.get() )
{
  // This will throw an error if no packages exist.
  // Result.reset (new compound_artifact (*a_loc.create_uml_document (a_name)));
  Result = std::unique_ptr< compound_artifact >( new compound_artifact( *a_loc.create_uml_document( a_name ) ) );
}
return Result;

!!!128432.cpp!!!	merge_string_list(inout a_list : unistr, in a_addition : unistr) : void
if (a_list.isEmpty ())
{
  a_list = a_addition.simplifyWhiteSpace ();
}
else
{
  for (const_token_iterator e1_, b1_(a_addition.simplifyWhiteSpace (), ' '); b1_ != e1_; ++b1_)
  {
    const QString new_item_(b1_->c_str ());
    if (! new_item_.isEmpty ())
    {
      bool match_ (false);
      for (const_token_iterator e2_, b2_(a_list, ' '); b2_ != e2_; ++b2_)
      {
        const QString orig_(b2_->c_str ());
        if (! orig_.isEmpty ())
        {
          if (orig_ == new_item_)
          {
            match_ = true;
            break;
          }
        }
      }
      if (!match_)
      {
        a_list.append (" ");
        a_list.append (new_item_);
      }
    }
  }
}
!!!128560.cpp!!!	section(in a_section : unistr, in a_desc : unistr) : unistr
static const QString marker_start_ ("${" + butter_constants::section_prefix);
const QString marker_phrase_ (marker_start_ + a_section + "}");
QString Result;
int l_start (a_desc.find (marker_phrase_));
if (-1 != l_start)
{
  // Found a_section start, search from here to end for next section
  int l_end (a_desc.find (marker_start_, l_start + marker_phrase_.length ()));
  if (-1 != l_end)
  {
    Result = a_desc.mid (l_start + marker_phrase_.length (), l_end - (l_start + marker_phrase_.length ()));
  }
  else
  {
    Result = a_desc.mid (l_start + marker_phrase_.length ());
  }
}
// else ...
// Found no section titles --> return empty string
return Result;

!!!128816.cpp!!!	root_dir(in a_path : pathcmp) : void
  BUTTER_ENSURE (! a_path.path ().isEmpty ()
  , "<p><b>Program error:</b> Attempt to set project root directory to an empty path.</p>");
  root_dir_ = std::unique_ptr < pathcmp >(new pathcmp (a_path));
!!!129200.cpp!!!	build_target_NAME(in package_name : unistr, in target_name : unistr) : unistr
if( not package_name.isEmpty() )
{
  package_name.append( "_" );
  package_name.append( target_name );
}
else
{
  std::swap( package_name, target_name );
}
package_name.replace( QChar{'.'}, QChar{'_'} );
package_name.replace( QChar{'-'}, QChar{'_'} );
return package_name.upper();

!!!129584.cpp!!!	quote_string(in phrase : string) : string

