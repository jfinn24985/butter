format 66
"proplang"
  revision 18
  modified_by 41 "finnerty"
  cpp_root_dir "./output/include/"


  
  // class settings
  default_attribute_visibility private default_relation_visibility private default_operation_visibility public
  //class diagram settings
  draw_all_relations yes hide_attributes no hide_operations no show_members_full_definition no show_members_visibility no show_members_stereotype no show_members_multiplicity no show_members_initialization no show_attribute_modifiers no member_max_width 127 show_parameter_dir yes show_parameter_name yes package_name_in_tab no class_drawing_mode natural drawing_language uml show_context_mode no auto_label_position yes show_relation_modifiers no show_infonote no shadow yes show_stereotype_properties no
  //use case diagram settings
  package_name_in_tab no show_context no auto_label_position yes draw_all_relations yes class_drawing_mode actor shadow yes show_stereotype_properties no
  //sequence diagram settings
  show_full_operations_definition no write_horizontally yes class_drawing_mode natural drawing_language uml draw_all_relations yes shadow yes show_stereotype_properties no
  //collaboration diagram settings
  show_full_operations_definition no show_hierarchical_rank no write_horizontally yes drawing_language uml package_name_in_tab no show_context no draw_all_relations yes shadow yes show_stereotype_properties no
  //object diagram settings
   write_horizontally yes package_name_in_tab no show_context no auto_label_position yes draw_all_relations yes shadow yes show_stereotype_properties no
  //component diagram settings
  package_name_in_tab no show_context no auto_label_position yes draw_all_relations yes shadow yes
  draw_component_as_icon no show_component_req_prov no show_component_rea no show_stereotype_properties no
  //deployment diagram settings
  package_name_in_tab no show_context no write_horizontally yes auto_label_position yes draw_all_relations yes shadow yes
  draw_component_as_icon no show_component_req_prov no show_component_rea no show_stereotype_properties no
  //state diagram settings
  package_name_in_tab no show_context no auto_label_position yes write_trans_label_horizontally yes show_trans_definition no draw_all_relations yes shadow yes
  show_activities yes region_horizontally yes drawing_language uml show_stereotype_properties no
  //activity diagram settings
  package_name_in_tab no show_context no show_opaque_action_definition no auto_label_position yes write_flow_label_horizontally no draw_all_relations yes shadow yes
  show_infonote yes drawing_language uml show_stereotype_properties no
  
  class_color yellow duration_color transparent continuation_color gray note_color blue fragment_color transparent subject_color transparent usecase_color yellow package_color transparent component_color green artifact_color green deploymentnode_color gray state_color yellow stateaction_color transparent activity_color transparent activityregion_color transparent activitypartition_color transparent activityaction_color transparent parameterpin_color white 
  font_size 12
  diagram_format A4

  mark_for_import
  
  ncouples 7
  key "butter version" value "1.4"
  key "butter flags" value "-DPROJ_FLAG"
  key "butter ldflags" value "$(OPENMP)"
  key "butter build-dir" value "build"
  key "butter include" value "include/exe"
  key "butter style" value "unknown"
  key "PROJECT" value "PROPLANG"
  comment "Project to test single-directory multiple target use-case for \"butter\" plugout

Property Settings:
<table>
<tr><td>proplang    . base     </td> <td> .                      </td><td>(warning message in trace)</td></tr>
<tr><td>proplang    . build-dir</td> <td> build                  </td><td>(style dependent)</td></tr>
<tr><td>program.man . buildfile</td> <td> t2t                    </td><td>include t2t.[style-suff] </td></tr>
<tr><td>example_c.c . compiler </td> <td> CC                     </td><td>eqxample_c.c:(?fail to compile?)</td></tr>
<tr><td>fortran.f   . compiler </td> <td> FORTRAN                </td><td>fortran.f:(?fail to compile?)</td></tr>
<tr><td>program.t2t . compiler </td> <td> t2t                    </td><td>program.t2t:fail to process</td></tr>
<tr><td>fortprog    . flags    </td> <td> -DEXE_F_FLAG           </td><td>fortmain:fail to compile</td></tr>
<tr><td>program     . flags    </td> <td> -DEXE_FLAGS            </td><td>example_exe:inc(lib.hpp) + #error </td></tr>
<tr><td>example_c.c . flags    </td> <td> -DFOR_C_FLAG           </td><td>example_c.c:#error</td></tr>
<tr><td>library     . flags    </td> <td> -DLIB_FLAGS            </td><td>example_lib:inc(lib.hpp) + #error </td></tr>
<tr><td>proplang    . flags    </td> <td> -DPROJ_FLAGS           </td><td>example_exe:#error</td></tr>
<tr><td>example_lib . flags    </td> <td> -DSRC_FLAGS            </td><td>program:changes output</td></tr>
<tr><td>fortprog    . include  </td> <td> include/doc            </td><td>fortmain:inc(f.hpp)</td></tr>
<tr><td>example_c.c . include  </td> <td> include/doc            </td><td>example_c.c:fail inc(doc.hpp) </td></tr>
<tr><td>program     . include  </td> <td> include/exe            </td><td>example_exe:fail inc(exe.hpp) </td></tr>
<tr><td>library     . include  </td> <td> include/lib            </td><td>example_lib,example_exe:fail inc(lib.hpp) </td></tr>
<tr><td>proplang    . include  </td> <td> include/project        </td><td>** TODO **</td></tr>
<tr><td>example_lib . include  </td> <td> include/src            </td><td>example_lib:fail inc(src.hpp) </td></tr>
<tr><td>program.t2t . install  </td> <td> DOCDIR                 </td><td>exist(*/program.t2t) </td></tr>
<tr><td>library     . install  </td> <td> LIBEXECDIR             </td><td>exist(*/library.so)</td></tr>
<tr><td>program.man . install  </td> <td> MAN1DIR                </td><td>exist(*/program.man) </td></tr>
<tr><td>program     . install  </td> <td> SBINDIR                </td><td>exist(*/program) </td></tr>
<tr><td>A.library     ldflags  </td> <td> -lextra_c              </td><td>program: fail link  </td></tr>
<tr><td>X.program     ldflags  </td> <td> -L$(OUTPUTDIR)/lib/exe </td><td>program: fail link</td></tr>
<tr><td>d.fortran.f   ldflags  </td> <td> $(FORTRANLIBS)         </td><td>fortprog: fail link </td></tr>
<tr><td>s.example_lib ldflags  </td> <td> -L$(OUTPUTDIR)/lib/src </td><td>program: fail link </td></tr>
<tr><td>P.proplang    ldflags  </td> <td> $(OPENMP)              </td><td>example_exe:fail compile &amp; program: fail link  </td></tr>
<tr><td>L.program.man other    </td> <td> t2t                    </td><td>program.t2t:fail to process </td></tr>
<tr><td>A.library     type     </td> <td> static                 </td><td>libextra_c.a </td></tr>
<tr><td>P.proplang    type     </td> <td> shared                 </td><td>program requires installdir/lib in LD_LIB_PATH (or rpath) for libextra_c.so</td></tr>
<tr><td>A.libmain     type     </td> <td> static                 </td><td>libmain.a </td></tr>
<tr><td>P.proplang    version  </td> <td> 1.4                    </td><td> ** TODO **</td></tr>
</table>
"
  package_ref 128041 // Test include/flags Properties

  package_ref 128169 // Test Library:other

  package_ref 134313 // Test Non-C++ code

  package_ref 134185 // Test Library static

  package_ref 134441 // Test Library Shared

  package_ref 129321 // Build

  package_ref 130473 // Test Property
end
