class example_exe
!!!134960.cpp!!!	main(in argc : int, in argv : char) : int
if( argc < 2 )
{
  std::cerr << "Usage [program] [filename] [filename...]\n";
  return 1;
}
else
{
  for( int idx = 1; idx < argc; ++idx )
  {
    QFile ifs( argv[ idx ] );
    if( ifs.open( IO_ReadOnly ) )
    {
      this->format( qUncompress( ifs.readAll() ), std::cout );
    }
    else
    {
      std::cerr << "Unable to open file [" << argv[idx] << "]\n";
      return 1;
    }
  }
}
return 0;
!!!134832.cpp!!!	format(in a_value : QByteArray, inout os : ostream) : void
const size_t width_( this->get_line_width() );

std::string line;
size_t space_pos = std::string::npos;
for( QByteArray::ConstIterator beg = a_value.begin(); beg != a_value.end(); ++beg )
{
  line.push_back( *beg );
  if( std::isspace( *beg ) ) space_pos = line.size();

  if( '\n' == *beg )
  {
    // End of paragraph.
    if( line.size() == 1 )
    {
      os << '\n' << '\n';
    }
    else
    {
      os << '[' << line.substr( 0, line.size() - 1 ) << ']' << '\n';
    }
    line.clear();
    space_pos = std::string::npos;
  }
  else if ( line.size() >= width_ && space_pos != std::string::npos )
  {
    // End of line of text
    os << '[' << line.substr( 0, space_pos - 1 ) << ']' << '\n';
    if( space_pos == line.size() )
    {
      line.clear();
    }
    else
    {
      line = line.substr( space_pos );
    }
    space_pos = std::string::npos;
  }
}
if( line.size() != 0 )
{
  // Last line
  os << '[' << line << ']' << '\n';
}

