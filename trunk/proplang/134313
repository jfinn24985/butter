format 66
"Test Non-C++ code" // Test Non-C++ code
  revision 1
  modified_by 41 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_src_dir "../src"
  deploymentview 134185 "Non-C++ code"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 134313 "fortmain"
      stereotype "source"
      cpp_src "extern \"C\"
{
  void fortprog_();
}

int main(int,char**)
{
  fortprog_();
  return 0;
}
"
      associated_classes
      end
      comment "Dummy file to allow Fortran program to compile using Boost Jam"
    end

    artifact 133033 "fortran.f"
      stereotype "document"
      associated_artifacts
      end
      ncouples 2
      key "butter compiler" value "FORTRAN"
      key "butter ldflags" value "$(FORTRANLIBS)"
      comment "      SUBROUTINE FORTPROG

      INTEGER MCOUNT
      DOUBLE PRECISION RPRES1, RPRES2

      PRINT *, \"== Program Exercise 2 ==\"

C     Find out the capacity of the cells of the computer that you
C     will be using during your study of Fortran

C     [1] Initialise the test number
      RPRES1 = 1.0

C     [2] Loop (for a maximum of 30)
      DO MCOUNT = 1,30

C     [3] Create a second number close to test number
         RPRES2 = RPRES1 + (0.1**(MCOUNT))


C     [4] Test if the numbers are \"equal\"
         IF ( RPRES1 .EQ. RPRES2 ) THEN

C     [5] When equal print result and stop
            PRINT *, RPRES1, \" .EQ.\", RPRES2, \" Precision is \", MCOUNT
            STOP
         ELSE
            PRINT *, RPRES1, \" .NE.\", RPRES2
         ENDIF
      ENDDO

      PRINT *, \"Precision is greater than \", MCOUNT

      END"
    end

    artifact 133161 "fortprog"
      stereotype "executable"
      associated_artifacts
	artifact_ref 133033 // fortran.f
	artifact_ref 134313 // fortmain
      end
      comment "For this program to compile requires:

<UmlArtifact<<document>>:fortran.f>butter compiler: FORTRAN

<UmlArtifact<<document>>:fortran.f>butter ldflags: $(FORTRANLIBS)
!! Note FORTRANLIBS needs to be defined somewhere !!
"
    end
  end
end
