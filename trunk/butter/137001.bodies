class item_traits
!!!133545.cpp!!!	kind_to_string(in a_val : uint) : QCString
static const char *l_kind[] = {
"relation"
, "attribute"
, "operation"
, "extra class member"
, "class"
, "use case"
, "component"
, "node"
, "artifact"
, "NC relation"
, "class diagram"
, "use case diagram"
, "sequence diagram"
, "collaboration diagram"
, "component diagram"
, "deployment diagram"
, "class view"
, "use case view"
, "component view"
, "deployment view"
, "package"
, "unknown"
};
const unsigned int l_size (sizeof(l_kind)/sizeof(char*));
if (a_val < 0U or l_size <= a_val)
{
  a_val = l_size - 1;
}
return l_kind[a_val];
!!!131881.cpp!!!	print_item(in a_item : UmlItem, in a_depth : uint, inout a_os : ostream) : void
static const QCString title_lbl__ ("[TT] ");
static const QCString watch_lbl__ ("[**] ");
QCString indent__;
indent__.fill (' ', a_depth);
a_os << indent__ << title_lbl__ << "Base information\n";
a_os << indent__ << watch_lbl__ << "name = \"" << const_cast< UmlItem& >(a_item).name () << "\"\n";
a_os << indent__ << watch_lbl__ << "depth = \"" << a_depth << "\"\n";
a_os << indent__ << watch_lbl__ << "stereotype = \"" << const_cast< UmlItem& >(a_item).stereotype () << "\"\n";

int kind_ (const_cast< UmlItem& >(a_item).kind ());
a_os << indent__ << watch_lbl__ << "kind = \"" << item_traits::kind_to_string (kind_) << "\" [" << kind_ << "]\n";
a_os << indent__ << watch_lbl__ << "description = \"" << const_cast< UmlItem& >(a_item).description () << "\"\n";

QDict< QCString > l_properties (const_cast< UmlItem& >(a_item).properties ());

QDictIterator < QCString > l_props (l_properties);

if (l_props.isEmpty ())
{
  a_os << indent__ << title_lbl__ << "No Properties\n";
}
else
{
  a_os << indent__ << title_lbl__ << "Properties (# = " << l_props.count () << ")\n";
  for (; l_props.current (); ++l_props)
  {
    a_os << indent__ << watch_lbl__ << "[" << l_props.currentKey () << "] = \"" << *(l_props.current ()) << "\"\n";
  }
  a_os << indent__ << title_lbl__ << "End Properties\n";
}
!!!135081.cpp!!!	property_search(out a_item : UmlItem, in a_key : string, inout a_value : string) : bool
UmlItem *l_tmp (const_cast< UmlItem* >(&a_item));
bool Result (false);
Result = l_tmp->propertyValue (a_key, a_value);
if (not Result)
{
  while (UmlBasePackage::getProject () != l_tmp)
  {
    l_tmp = l_tmp->parent ();
    if (NULL == l_tmp)
    {
      break;
    }
    Result = l_tmp->propertyValue (a_key, a_value);
  }
}
return Result;
