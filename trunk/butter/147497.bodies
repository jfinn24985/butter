class tree_node_test
!!!189097.cpp!!!	main(in argc : int, in argv : char) : int
typedef tree_node< int, std::string > test_type;
typedef tree_node< int, std::string >::iterator test_iterator;
typedef tree_node< int, std::string >::const_iterator const_test_iterator;

test_type root_;
test_iterator iter_;

std::cout << "-- Test of created root node --" << std::endl;
assert (0 == root_.value.first);
std::cout << "root node has value.first = T('0')" << std::endl;
assert (root_.begin () == root_.end ());
std::cout << "begin = end for empty root" << std::endl;

std::cout << "-- Test add to root node --" << std::endl;
std::string tmp_ ("Hello World");
std::pair < test_iterator, bool > result_ = root_.insert (1, tmp_);
assert (result_.second);
std::cout << "Insert completed successfully." << std::endl;

assert (1 == result_.first->value.first);
std::cout << "Iterator value.first matches set value.second: " << result_.first->value.first << std::endl;

assert (tmp_ == result_.first->value.second);
std::cout << "Iterator value.second matches set value.second: " << result_.first->value.second << std::endl;

assert (root_.begin () == result_.first);
std::cout << "Iterator of first child matches begin" << std::endl;

iter_ = root_.begin ();
++iter_;
assert (iter_ == root_.end ());
std::cout << "begin + 1 = end for root with one child" << std::endl;

/////////////////////////
// Second child

std::cout << "-- Test add 2 to root node --" << std::endl;
tmp_.assign ("Hello World 2");
result_ = root_.insert (2, tmp_);
assert (result_.second);
std::cout << "Second insert completed successfully." << std::endl;

assert (2 == result_.first->value.first);
std::cout << "Iterator value.first matches set value.second: " << result_.first->value.first << std::endl;

assert (tmp_ == result_.first->value.second);
std::cout << "Iterator value.second matches set value.second: " << result_.first->value.second << std::endl;


iter_ = root_.begin ();
++++iter_;
assert (iter_ == root_.end ());
std::cout << "begin + 2 = end for root with two children" << std::endl;

/////////////////////////
// Child of first

std::cout << "-- Test add 3 (add to first child) to root node --" << std::endl;
tmp_.assign ("Hello World 3");
result_ = root_.begin ()->insert (3, tmp_);
assert (result_.second);
std::cout << "Third insert completed successfully." << std::endl;

assert (3 == result_.first->value.first);
std::cout << "Iterator value.first matches set value.second: " << result_.first->value.first << std::endl;

assert (tmp_ == result_.first->value.second);
std::cout << "Iterator value.second matches set value.second: " << result_.first->value.second << std::endl;

iter_ = root_.begin ();
++iter_;
assert (iter_ == result_.first);
std::cout << "begin + 1 = new child" << std::endl;

++++iter_;
assert (iter_ == root_.end ());
std::cout << "begin + 3 = end for root with two+one children" << std::endl;

/////////////////////////
// Child of second

std::cout << "-- Test add 4 (add to second child) to root node --" << std::endl;
test_iterator second_ (root_.find (2));

assert (2 == second_->value.first);
std::cout << "Used find for second child, found node with value.second: " << second_->value.second << std::endl;

tmp_.assign ("Hello World 4");
result_ = second_->insert (4, tmp_);

assert (result_.second);
std::cout << "Fourth insert completed successfully." << std::endl;

assert (4 == result_.first->value.first);
std::cout << "Iterator value.first matches set value.second: " << result_.first->value.first << std::endl;

assert (tmp_ == result_.first->value.second);
std::cout << "Iterator value.second matches set value.second: " << result_.first->value.second << std::endl;

#ifdef DEBUG
std::cout << "-- Iterate over a tree --" << std::endl;
for (iter_ = root_.begin (); iter_ != root_.end (); ++iter_)
{
  assert (! iter_.at_null ());
  iter_->debug_dump (std::cout);
}
std::cout << "-- Const_iterate over a tree --" << std::endl;
const test_type & croot_ (root_);
for (const_test_iterator citer_ = croot_.begin (); citer_ != croot_.end (); ++citer_)
{
  assert (! citer_.at_null ());
  citer_->debug_dump (std::cout);
}
#endif

iter_ = root_.begin ();
++++++iter_;
assert (iter_ == result_.first);
std::cout << "begin + 3 = new child" << std::endl;

++iter_;
assert (iter_ == root_.end ());
std::cout << "begin + 4 = end for root with two+two children" << std::endl;

#ifdef DEBUG
std::cout << "-- Iterate over a subtree --" << std::endl;
for (iter_ = root_.begin ()->begin (); iter_ != root_.begin ()->end (); ++iter_)
{
  assert (! iter_.at_null ());
  iter_->debug_dump (std::cout);
}
std::cout << "-- Const_iterate over a subtree --" << std::endl;
for (const_test_iterator citer_ = croot_.begin ()->begin (); citer_ != croot_.begin ()->end (); ++citer_)
{
  assert (! citer_.at_null ());
  citer_->debug_dump (std::cout);
}
std::cout << "-- Use reader over tree --" << std::endl;
for (test_type::tree_reader iter_ (root_.child ()); iter_.depth() >= 0 && ! iter_.at_null (); ++iter_)
{
  assert (! iter_.at_null ());
  std::cout << "Revisiting node: " << (iter_.end_of () ? "YES" : "NO") << std::endl;
  std::cout << "Node depth: " << iter_.depth () << std::endl;
  iter_->debug_dump (std::cout);
}
#endif


// END
return 0;
