class jam_generator
!!!209065.cpp!!!	assoc_library(in a_target : UmlArtifact, out a_os : ostream, out a_includes : unistr, out a_ldflags : unistr, out a_cflags : unistr) : void
QString project_;
if (a_target.property_value (butter_constants::butter_project_name, project_))
{
  // Is an externally linked library, look only for flags.
/* {{BEGINDOC
<property name="include" source="artifact" type="library" subtypes="external" style="standard">Add
include directory properties to associated target.</property>
<property name="flags" source="artifact" type="library" subtypes="external" style="standard">Add
compilation flags to associated target.</property>
<property name="ldflags" source="artifact" type="library" subtypes="external" style="standard">Add
linker flags to associated target.</property>
ENDDOC}} */
  find_hdr_link (a_target, a_includes, a_ldflags, a_cflags, section_name, true);
}
else
{
  {
    QString defn_;
    {
      QTextOStream os_ (&defn_);
      const QString dir_line_
          = this->root_dir ().create_relative (a_target.package ().src_path ());

      os_ << " <" << pathcmp (dir_line_).path_convert ("!") << ">"
          << a_target.name () << "$(SUFLIB) \n\t";
    }
    this->lib_defn_.append (defn_);
  }
/*  QString libtype_; // Add LOC_TARGET_LDFLAGS variable for static libraries
  if (a_target.property_search (butter_constants::butter_lib_type_name, libtype_)
      && libtype_ != butter_constants::shared_value)*/
  {
/* {{BEGINDOC
<property name="ldflags" source="artifact" type="source" style="standard">Add
linker flags transitively to targets associated to the static library
this source is associated with.</property>
<property name="ldflags" source="artifact" type="library" subtypes="static" style="standard">
Add linker flags to targets associated to this library.</property>
<property name="include" source="artifact" type="library" subtypes="shared static" style="standard">Add
include directories to targets associated to the library.</property>
ENDDOC}} */
    QString defn_;
    {
      QTextOStream os_ (&defn_);
      os_ << " $(" << to_target_NAME (a_target) << "_LDFLAGS) ";
    }
    a_ldflags.append (defn_);
  }
  QString libinc_; // Add include variable for both static and shared libraries
  if (a_target.property_search (butter_constants::butter_include_name, libinc_))
  {
    a_includes.append (libinc_);
  }
}
!!!209193.cpp!!!	assoc_source(in a_target : UmlArtifact, out a_os : ostream, in a_filename : unistr, in a_basename : unistr, in a_src_inc : unistr, in a_src_flags : unistr, in a_isdoc : bool) : void
///////////////////////////
// Description for individual objects (optional)
QString source_;
QTextOStream source_os_ (&source_);
if (! a_src_inc.isEmpty ())
{
  source_os_ << "ObjectHdrs " << this->grist_
              << a_filename << " : " << a_src_inc << " ;\n";
}
if (! a_src_flags.isEmpty ())
{
  if (a_isdoc)
  {
     QString comp_;
     BUTTER_ALWAYS(a_target.property_value (butter_constants::butter_compiler_name, comp_)
                , ("<p><b>Error:</b> Missing '" + butter_constants::butter_compiler_name
                 + "' property on " + a_target.package().filename () + "/" + a_filename).utf8 ().data ());
     if (comp_ == "CC")
     {
       source_os_ << "ObjectCcFlags " << this->grist_
              << a_filename << " : " << a_src_flags << " ;\n";
     }
     else
     {
       source_os_ << comp_ << "FLAGS on " << this->grist_
              << a_filename << " = $("  << comp_ << "FLAGS) "
              << a_src_flags << " ;\n";
     }
  }
  else
  {
    source_os_ << "ObjectC++Flags " << this->grist_
              << a_filename << " : " << a_src_flags << " ;\n";
  }
}
if (! source_.isEmpty ())
{
  this->individual_obj_.append (source_);
}

/////////////
// Add source to target
a_os << this->grist_ << a_filename << "\n\t";
!!!158121.cpp!!!	descendent_link(inout a_art : compound_artifact, inout a_sys : compound_artifact, in a_loc : location) : void
// Need to write the TOP line.
if (NULL != a_loc.parent ())
{
  QString subdir_line_;  // The text of the preamble section (mainly SubDir)
  // Create subpath (eg. src/chemistry) ;
  const QString dir_line2_ = this->root_dir ().create_relative (a_loc.full_path ());
  // Create a space separated list of folders between here and TOP
  const QString dir_line_ = pathcmp (dir_line2_).path_convert (" ");
  // Reset grist
  this->grist_.truncate (0);
  {
    QTextOStream subdir_os_ (&subdir_line_);
    // Create LOCATE_TARGET
    subdir_os_ << "ALL_LOCATE_TARGET = $(BASE_LOCATE_TARGET)$(SLASH)"
          << pathcmp(dir_line2_).path_convert("$(SLASH)") << " ;\n\n"
          << "SubDir TOP " << dir_line_ << " ;\n\n";
  }
  a_art.preamble.second.insert (0, subdir_line_);
  // Add definition to top-level
  a_sys.close.second.append ("SubInclude TOP " + dir_line_ + " ;\n");
}
!!!209321.cpp!!!	end_target(in a_target : UmlArtifact, out a_os : ostream, in a_include : unistr, in a_ldflags : unistr, in a_cflags : unistr, in a_compiler : unistr, in a_type : target_type) : void
////////////////
// End target source variable
a_os << ";\n\n";

switch (a_type)
{
case executable:
  {
    a_os << "Main " << this->qualified_target_name_ << " :\n\t$("
        << this->target_NAME () << "_SRC) ;\n\n";
    if (! a_compiler.isEmpty ())
    {
      a_os << "LINK on " << this->qualified_target_name_ << " = $(" <<  a_compiler << ") ;\n\n";
    }
    if (! a_ldflags.isEmpty ())
    {
      a_os << "LINKLIBS on " << this->qualified_target_name_ << " += " << a_ldflags << " ;\n";
    }
  }
  break;
case other:
  {
    a_target.property_value (butter_constants::butter_other_name, this->other_target_type_);
    a_os << this->other_target_type_ << " " << this->qualified_target_name_  << " :\n\t$("
        << this->target_NAME () << "_SRC) ;\n\n";
    if (! a_ldflags.isEmpty ())
    {
      a_os << "LINKLIBS on " << this->qualified_target_name_ << " += " << a_ldflags << " ;\n";
    }
  }
  break;
case shared_library: // static and shared libraries (only static libraries supported!)
  {
    a_os << "Library " << this->qualified_target_name_  << " :\n\t$("
        << this->target_NAME () << "_SRC) ;\n\n";
/*    a_os << "# SharedCcFlagsOnSrc " << this->target_NAME () << "_SRC ;\n";
    a_os << "# SharedC++FlagsOnSrc " << this->target_NAME () << "_SRC ;\n";
    a_os << "# SharedLdFlagsOn " << this->qualified_target_name_ << " ;\n";*/
    if (! a_compiler.isEmpty ())
    {
      a_os << "LINK on " << this->qualified_target_name_ << " = $(" <<  a_compiler << ") ;\n\n";
    }
    a_os << this->target_NAME () << "_LDFLAGS = ";
    if (! a_ldflags.isEmpty ())
    {
      a_os << a_ldflags;
    }
    a_os << " ;\n";
/*    if (! a_ldflags.isEmpty ())
    {
      a_os << "LINKLIBS on " << this->qualified_target_name_ << " += " << a_ldflags << " ;\n";
    }*/
  }
  break;
default: // static libraries (only static libraries supported!)
  {
    a_os << "Library " << this->qualified_target_name_  << " :\n\t$("
        << this->target_NAME () << "_SRC) ;\n\n";
//    if (! a_compiler.isEmpty ())
//     {
//       a_os << "LINK on " << this->qualified_target_name_ << " = $(" <<  a_compiler << ") ;\n\n";
//     }
    a_os << this->target_NAME () << "_LDFLAGS = ";
    if (! a_ldflags.isEmpty ())
    {
      a_os << a_ldflags;
    }
    a_os << " ;\n";
  }
  break;
}

//////////////
// Set up includes, libs etc.
if (! this->lib_defn_.isEmpty ())
{
  a_os << "LinkLibraries " << this->qualified_target_name_ << " :\n\t" << this->lib_defn_ << ";\n";
}

if (a_type == other)
{
  // Use target type flag name on non-standard targets.
  if (! a_cflags.isEmpty ())
  {
    a_os << this->other_target_type_.upper () << "FLAGS on " << this->qualified_target_name_ << " += " << a_cflags << " ;\n";
  }
}
else
{
  // Compile flags are propagated to source files.
  if (! a_cflags.isEmpty ())
  {
    a_os << "ObjectCcFlags $(" << this->target_NAME () << "_SRC) : " << a_cflags << " ;\n";
    a_os << "ObjectC++Flags $(" << this->target_NAME () << "_SRC) : " << a_cflags << " ;\n";
  }
}
// Headers are set on source files for all targets
if (! a_include.isEmpty ())
{
  a_os << "ObjectHdrs $(" << this->target_NAME () << "_SRC) : " << a_include << " ;\n";
}
////////////////////
// Add any individually build objects
if (! this->individual_obj_.isEmpty ())
{
  a_os << this->individual_obj_ << "\n";
}
!!!156329.cpp!!!	initialise(inout a_base : location, in a_project : UmlItem, inout a_sys : compound_artifact) : void
BUTTER_REQUIRE (NULL == a_base.parent (), "initialise can only be called on the top-most location");

QString content_;
{
  QTextOStream os_ (&content_);
  ////////////
  // Handle build-directory with no default.
  //
  // Note that this needs to be above "SubDir" to be available in Jamrules
  QString prop_value_;
  if (a_project.property_value (butter_constants::butter_build_dir_name, prop_value_))
  {
    os_ << "BUILDDIR = " << pathcmp(prop_value_).path_localised () <<" ;\n";
  }
  else
  {
    os_ << "BUILDDIR = " << this->root_dir ().path_localised () <<" ;\n";
  }
  //////////////
  // Set this as top location and bring in Jamrules.
  os_ << "SubDir TOP ;\n";
  os_ << "OUTPUTDIR = $(BUILDDIR)$(SLASH)$(VARIANT) ;\n";
  //////////////
  // Handle user-defined project includes and flag properties
  ////////////
  QString property_value_;
  a_project.property_value (butter_constants::butter_include_name, property_value_);
  // Also set an include dir if there is a  difference between the root_dir and the
  // projects hdrDir
  const pathcmp toplevel_include_ (dynamic_cast< const UmlPackage& >(a_project).hdr_path ());
  if (! toplevel_include_.path ().isEmpty ())
  {
    if (!this->root_dir ().equality (toplevel_include_))
    {
      if (this->root_dir ().has_subpath (toplevel_include_))
      {
        property_value_.append(" " + this->root_dir ().create_relative (toplevel_include_));
      }
      else
      {
        property_value_.append(" " + toplevel_include_.path ());
      }
    }
  }
  if (! property_value_.isEmpty ())
  {
    os_ << "HDRS += " << property_value_ << " ;\n";
  }
  if (a_project.property_search (butter_constants::butter_ldflags_name, property_value_))
  {
    os_ << "LINKFLAGS += " << property_value_ << " ;\n";
  }
  if (a_project.property_search (butter_constants::butter_flags_name, property_value_))
  {
    os_ << "C++FLAGS += " << property_value_ << " ;\n";
    os_ << "CCFLAGS += " << property_value_ << " ;\n";
  }
}
a_sys.preamble.second = content_;
!!!209449.cpp!!!	install_target(in a_target : UmlArtifact, inout a_os : ostream, in a_loc_var : unistr, in a_type : install_type, in a_isdoc : bool) : void
static const char * install_cmd_[] =
{
  "InstallBin"
, "InstallFile"
, "InstallLib"
, "InstallMan"
};
a_os << install_cmd_ [a_type] << " $("  << a_loc_var << ") : ";
if (a_isdoc)
{
  a_os << this->grist_ << a_target.name ();
}
else
{
  a_os << this->qualified_target_name_;
}
a_os << " ;\n";
!!!208937.cpp!!!	start_target(in a_target : UmlArtifact, out a_os : ostream, in a_build_file : unistr, in a_compiler : unistr, in a_type : target_type) : void
////////////////////////
// Initialise state for writing a new target entry
if (this->grist_.isEmpty ())
{
  const QString dir_line2_ = this->root_dir ().create_relative (a_target.package ().src_path ());
  this->grist_ = "<" + pathcmp (dir_line2_).path_convert ("!") + ">";
}
// Text for the associated targets
this->lib_defn_.truncate (0);
// Text for source specific flags
this->individual_obj_.truncate (0);

// Will become the full target name
const QString name_ (a_target.name ());
// Create qualified name for target.
this->qualified_target_name_ = this->grist_ + name_;
switch (a_type)
{
case executable:
  {
    this->qualified_target_name_.append ("$(SUFEXE)");
  }
  break;
case other:
  {
    if (! a_build_file.isEmpty ())
    {
      a_os << "include " << a_build_file << ".jam ;\n\n";
    }
  }
   break;
case shared_library: // shared libraries (only static libraries supported!)
  {
    this->qualified_target_name_.append ("$(SUFLIB)");
  }
  break;
default: // static libraries (only static libraries supported!)
  {
    this->qualified_target_name_.append ("$(SUFLIB)");
  }
  break;
}
this->target_NAME (a_target);

// Target label for non-standard targets
this->other_target_type_.truncate (0);

//////////////////////
// Start entry
a_os << this->target_NAME () << "_SRC =\n\t";
