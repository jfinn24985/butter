class base_writer
!!!201129.cpp!!!	compare_file_to_string(in a_path : string, in a_str : string) : bool
bool Result (false);
class helper__
{
public:
  helper__ (QFile & a_file, int a_flag): m_f (a_file)
  {
    if (! m_f.open (a_flag))
    {
      QString l_msg ("Unable to open file for read/writing: " + m_f.name ());
      throw std::runtime_error (static_cast<const char*>(l_msg));
    }
  }
   ~helper__ ()
  {
    m_f.close ();
  }
  QFile & m_f;
};

if (QFile::exists (a_path))
{
  QFile l_dev (a_path);
  // Test the file for reading
  helper__ l_auto (l_dev, IO_ReadOnly);
  unsigned int l_cursor (0);  // How far in to the file we are.
  do
  {
    const unsigned int l_sz (1024);     // The size of the buffer
    char l_buffer[l_sz];        // Buffer for reading
    const unsigned int l_count (l_dev.readBlock (&l_buffer[0], l_sz));
    Result = (l_count == 0 || (0 == qstrncmp (&l_buffer[0], a_str.data () + l_cursor, std::min (l_count, a_str.length () - l_cursor))));
    l_cursor += l_count;
  }
  while (Result && ! l_dev.atEnd ());
  // Read file must not be longer!
  Result = (l_cursor == a_str.length ());
}
if (! Result)
{
  QFile l_dev (a_path);
  helper__ l_auto (l_dev, IO_WriteOnly);
  l_dev.reset ();
  l_dev.writeBlock (a_str.data (), a_str.length ());
}
return Result;
