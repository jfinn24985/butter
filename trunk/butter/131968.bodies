class UmlBaseRelation
!!!187136.cpp!!!	create(in kind : aRelationKind, inout start : UmlClass, inout end : UmlClass) : UmlRelation
  UmlCom::send_cmd(start->_identifier, createCmd, aRelation,
		   kind, end->_identifier);
  UmlRelation * result = (UmlRelation *) UmlBaseItem::read_();
  
  if (result != 0) {
    start->reread_children_if_needed_();
    
    switch (kind) {
    case anAssociation:
    case anAggregation:
    case anAggregationByValue:
      // bi-directional
      end->reread_children_if_needed_();
      break;
    case aGeneralisation:
    case aRealization:
      if (!end->formals().isEmpty())
	// to update actuals & base_type
	start->reread_if_needed_();
    default:
      break;
    }
  }
  
  return result;
!!!187136.java!!!	create(in kind : aRelationKind, inout start : UmlClass, inout end : UmlClass) : UmlRelation
  UmlCom.send_cmd(start.identifier_(), OnInstanceCmd.createCmd, anItemKind.aRelation,
		  kind, end.identifier_());
  UmlRelation result = (UmlRelation) UmlBaseItem.read_();
  
  if (result != null) {
    start.reread_children_if_needed_();
    
    switch (kind.value()) {
    case aRelationKind._anAssociation:
    case aRelationKind._anAggregation:
    case aRelationKind._anAggregationByValue:
      // bi-directional
      end.reread_children_if_needed_();
      break;
    case aRelationKind._aGeneralisation:
    case aRelationKind._aRealization:
      if (end.formals().length != 0)
	// to update actuals & base_type
	start.reread_if_needed_();
    default:
      break;
    }
  }
  else
    throw new RuntimeException("can't be created");
  
  return result;
!!!187264.cpp!!!	kind() : anItemKind
  return aRelation;
!!!187264.java!!!	kind() : anItemKind
  return anItemKind.aRelation;
!!!187392.cpp!!!	relationKind() : aRelationKind
  read_if_needed_();
  
  return _rel_kind;
!!!187392.java!!!	relationKind() : aRelationKind
  read_if_needed_();
  
  return _rel_kind;
!!!187520.cpp!!!	side(in first : bool) : UmlRelation
  UmlCom::send_cmd(_identifier, sideCmd, (char) first);
  
  return (UmlRelation *) UmlBaseItem::read_();
!!!187520.java!!!	side(in first : bool) : UmlRelation
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.sideCmd, 
		  (first) ? (byte) 1 : (byte) 0);
  
  return (UmlRelation) UmlBaseItem.read_();
!!!288048.cpp!!!	set_isClassMember(in y : bool) : bool
#ifdef WITHCPP
  if (!y)
    _cpp_thread_local = FALSE;
#endif
  return UmlBaseClassMember::set_isClassMember(y);
!!!288048.java!!!	set_isClassMember(in y : bool) : bool
  if (!y)
    _cpp_thread_local = false;
  super.set_isClassMember(y);
!!!187648.cpp!!!	isReadOnly() : bool
  read_if_needed_();
  
  return _read_only;
!!!187648.java!!!	isReadOnly() : bool
  read_if_needed_();
  
  return _read_only;
!!!187776.cpp!!!	set_isReadOnly(in y : bool) : bool
  UmlCom::send_cmd(_identifier, setIsReadOnlyCmd, (char) y);
  if (UmlCom::read_bool()) {
    _read_only = y;
    return TRUE;
  }
  else
    return FALSE;
!!!187776.java!!!	set_isReadOnly(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsReadOnlyCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _read_only = y;
!!!187904.cpp!!!	isDerived() : bool
  read_if_needed_();
  return _derived;
!!!187904.java!!!	isDerived() : bool
  read_if_needed_();
  return _derived;
!!!188032.cpp!!!	isDerivedUnion() : bool
  read_if_needed_();
  return _derived_union;
!!!188032.java!!!	isDerivedUnion() : bool
  read_if_needed_();
  return _derived_union;
!!!188160.cpp!!!	set_isDerived(in is_derived : bool, in is_union : bool) : bool
  UmlCom::send_cmd(_identifier, setDerivedCmd,
                   (char) (((is_derived) ? 1 : 0) + ((is_union) ? 2 : 0)));
  if (UmlCom::read_bool()) {
    _derived = is_derived;
    _derived_union = is_union;
    return TRUE;
  }
  else
    return FALSE;
!!!188160.java!!!	set_isDerived(in is_derived : bool, in is_union : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setDerivedCmd,
                  (byte) (((is_derived) ? 1 : 0) + ((is_union) ? 2 : 0)));
  UmlCom.check();

  _derived = is_derived;
  _derived_union = is_union;
!!!188288.cpp!!!	isOrdered() : bool
  read_if_needed_();
  return _ordered;
!!!188288.java!!!	isOrdered() : bool
  read_if_needed_();
  return _ordered;
!!!188416.cpp!!!	set_isOrdered(in v : bool) : bool
  UmlCom::send_cmd(_identifier, setOrderingCmd, (char) v);
  if (UmlCom::read_bool()) {
    _ordered = v;
    return TRUE;
  }
  else
    return FALSE;
!!!188416.java!!!	set_isOrdered(in v : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setOrderingCmd, (v) ? 1 : 0);
  UmlCom.check();

  _ordered = v;
!!!188544.cpp!!!	isUnique() : bool
  read_if_needed_();
  return _unique;
!!!188544.java!!!	isUnique() : bool
  read_if_needed_();
  return _unique;
!!!188672.cpp!!!	set_isUnique(in v : bool) : bool
  UmlCom::send_cmd(_identifier, setUniqueCmd, (char) v);
  if (UmlCom::read_bool()) {
    _unique = v;
    return TRUE;
  }
  else
    return FALSE;
!!!188672.java!!!	set_isUnique(in v : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setUniqueCmd, (v) ? 1 : 0);
  UmlCom.check();

  _unique = v;
!!!188800.cpp!!!	defaultValue() : string
  read_if_needed_();
  
  return _default_value;
!!!188800.java!!!	defaultValue() : string
  read_if_needed_();
  
  return _default_value;
!!!188928.cpp!!!	set_DefaultValue(in s : str) : bool
  return set_it_(_default_value, s, setDefaultValueCmd);
!!!188928.java!!!	set_DefaultValue(in s : str) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setDefaultValueCmd, s);
  UmlCom.check();

  _default_value = s;
!!!189056.cpp!!!	set_Stereotype(in s : string) : bool
  if (UmlBaseItem::set_Stereotype(s)) {
    UmlBaseRelation * other = (UmlBaseRelation *) UmlBaseItem::read_();
    
    if (other != 0)
      other->_stereotype = s;
    return TRUE;
  }
  else
    return FALSE;
!!!189056.java!!!	set_Stereotype(in s : string) : bool
  super.set_Stereotype(s);
  
  UmlBaseRelation other = (UmlBaseRelation) UmlBaseItem.read_();
  
  if (other != null)
    other._stereotype = s;

!!!189184.cpp!!!	roleType() : UmlClass
  read_if_needed_();
  
  return _role_type;
!!!189184.java!!!	roleType() : UmlClass
  read_if_needed_();
  
  return _role_type;
!!!189312.cpp!!!	association() : UmlTypeSpec
  read_if_needed_();
  
  return _association;
!!!189312.java!!!	association() : UmlTypeSpec
  read_if_needed_();
  
  return _association;
!!!189440.cpp!!!	set_Association(in t : UmlTypeSpec) : bool
  if (set_it_(_association, t, setRelationAssocClassCmd)) {
    UmlBaseRelation * other = (UmlBaseRelation *) UmlBaseItem::read_();
    
    if (other != 0)
      other->_association = t;
    return TRUE;
  }
  else
    return FALSE;
!!!189440.java!!!	set_Association(in t : UmlTypeSpec) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setRelationAssocClassCmd, t);
  UmlCom.check();
  
  _association = t;
  UmlBaseRelation other = (UmlBaseRelation) UmlBaseItem.read_();
  
  if (other != null)
    other._association = t;
!!!189568.cpp!!!	roleName() : string
  read_if_needed_();
  
  return _role_name;
!!!189568.java!!!	roleName() : string
  read_if_needed_();
  
  return _role_name;
!!!189696.cpp!!!	set_RoleName(in s : str) : bool
  return set_it_(_role_name, s, setRoleNameCmd);
!!!189696.java!!!	set_RoleName(in s : str) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setRoleNameCmd, s);
  UmlCom.check();

  _role_name = s;
!!!189824.cpp!!!	multiplicity() : string
  read_if_needed_();
  
  return _multiplicity;
!!!189824.java!!!	multiplicity() : string
  read_if_needed_();
  
  return _multiplicity;
!!!189952.cpp!!!	set_Multiplicity(in s : str) : bool
  return set_it_(_multiplicity, s, setMultiplicityCmd);
!!!189952.java!!!	set_Multiplicity(in s : str) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setMultiplicityCmd, s);
  UmlCom.check();

  _multiplicity = s;
!!!190080.cpp!!!	getOperation() : UmlOperation
  read_if_needed_();
  
  return _get_oper;
!!!190080.java!!!	getOperation() : UmlOperation
  read_if_needed_();
  
  return _get_oper;
!!!190208.cpp!!!	addGetOperation() : bool
  UmlCom::send_cmd(_identifier, addGetOperCmd);
  if (UmlCom::read_bool()) {
    reread_children_if_needed_();
    return TRUE;
  }
 else
   return FALSE;
!!!190208.java!!!	addGetOperation() : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.addGetOperCmd);
  UmlCom.check();
  
  reread_children_if_needed_();

!!!190336.cpp!!!	setOperation() : UmlOperation
  read_if_needed_();
  
  return _set_oper;
!!!190336.java!!!	setOperation() : UmlOperation
  read_if_needed_();
  
  return _set_oper;
!!!190464.cpp!!!	addSetOperation() : bool
  UmlCom::send_cmd(_identifier, addSetOperCmd);
  if (UmlCom::read_bool()) {
    reread_children_if_needed_();
    return TRUE;
  }
 else
   return FALSE;
!!!190464.java!!!	addSetOperation() : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.addSetOperCmd);
  UmlCom.check();
  
  reread_children_if_needed_();

!!!190592.cpp!!!	cppVirtualInheritance() : bool
  read_if_needed_();
  
  return _cpp_virtual_inheritance;
!!!190592.java!!!	cppVirtualInheritance() : bool
  read_if_needed_();
  
  return _cpp_virtual_inheritance;
!!!190720.cpp!!!	set_CppVirtualInheritance(in y : bool) : bool
  bool b;
  
  if (set_it_(b, y, setCppVirtualInheritanceCmd)) {
    _cpp_virtual_inheritance = y;
    return TRUE;
  }
  else
    return FALSE;
!!!190720.java!!!	set_CppVirtualInheritance(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setCppVirtualInheritanceCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _cpp_virtual_inheritance =  y;
!!!190848.cpp!!!	isCppMutable() : bool
  read_if_needed_();
  
  return _cpp_mutable;
!!!190848.java!!!	isCppMutable() : bool
  read_if_needed_();
  
  return _cpp_mutable;
!!!190976.cpp!!!	set_isCppMutable(in y : bool) : bool
  UmlCom::send_cmd(_identifier, setIsCppMutableCmd, (char) y);
  if (UmlCom::read_bool()) {
    _cpp_mutable = y;
    return TRUE;
  }
  else
    return FALSE;
!!!190976.java!!!	set_isCppMutable(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsCppMutableCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _cpp_mutable = y;
!!!288176.cpp!!!	isCppConstExpr() : bool
  read_if_needed_();

  return _cpp_constexpr;
!!!288176.java!!!	isCppConstExpr() : bool
  read_if_needed_();

  return _cpp_constexpr;
!!!288304.cpp!!!	set_isCppConstExpr(in y : bool) : bool
  UmlCom::send_cmd(_identifier, setIsCppConstExprCmd, (char) y);
  if (UmlCom::read_bool()) {
    _cpp_constexpr = y;
    return TRUE;
  }
 else
   return FALSE;
!!!288304.java!!!	set_isCppConstExpr(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsCppConstExprCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _cpp_constexpr = y;
!!!288432.cpp!!!	isCppThreadLocal() : bool
  read_if_needed_();

  return _cpp_thread_local;
!!!288432.java!!!	isCppThreadLocal() : bool
  read_if_needed_();

  return _cpp_thread_local;
!!!288560.cpp!!!	set_isCppThreadLocal(in y : bool) : bool
  UmlCom::send_cmd(_identifier, setIsCppThreadLocalCmd, (char) y);
  if (UmlCom::read_bool()) {
    _cpp_thread_local = y;
    if (y)
      _class_member = TRUE;
    return TRUE;
  }
 else
   return FALSE;
!!!288560.java!!!	set_isCppThreadLocal(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsCppThreadLocalCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _cpp_thread_local = y;
  if (y)
    set_isClassMember(true);
!!!191104.cpp!!!	isJavaTransient() : bool
  read_if_needed_();
  
  return _java_transient;
!!!191104.java!!!	isJavaTransient() : bool
  read_if_needed_();
  
  return _java_transient;
!!!191232.cpp!!!	set_isJavaTransient(in y : bool) : bool
  bool b;
  
  if (set_it_(b, y, setIsJavaTransientCmd)) {
    _java_transient = y;
    return TRUE;
  }
  else
    return FALSE;

!!!191232.java!!!	set_isJavaTransient(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsJavaTransientCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _java_transient = y;
!!!191360.cpp!!!	isIdlTruncatableInheritance() : bool
  read_if_needed_();
  
  return _idl_truncatable;
!!!191360.java!!!	isIdlTruncatableInheritance() : bool
  read_if_needed_();
  
  return _idl_truncatable;
!!!191488.cpp!!!	set_isIdlTruncatableInheritance(in y : bool) : bool
  bool b;
  
  if (set_it_(b, y, setIsIdlTruncatableCmd)) {
    _idl_truncatable = y;
    return TRUE;
  }
  else
    return FALSE;
!!!191488.java!!!	set_isIdlTruncatableInheritance(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsIdlTruncatableCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _idl_truncatable = y;
!!!191616.cpp!!!	idlCase() : string
  read_if_needed_();
  
  return (_idl_case != 0) ? _idl_case->name() : _idl_explicit_case;
!!!191616.java!!!	idlCase() : string
  read_if_needed_();
  
  return (_idl_case != null) ? _idl_case.name() : _idl_explicit_case;
!!!191744.cpp!!!	set_IdlCase(inout a : UmlAttribute) : bool
  UmlCom::send_cmd(_identifier, setIdlCaseCmd, a->_identifier, "");
  if (UmlCom::read_bool()) {
    _idl_case = a;
    _idl_explicit_case = 0;
    return TRUE;
  }
 else
   return FALSE;
!!!191744.java!!!	set_IdlCase(inout a : UmlAttribute) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIdlCaseCmd, a.identifier_(), "");
  UmlCom.check();
  
  _idl_case = a;
  _idl_explicit_case = null;

!!!191872.cpp!!!	set_IdlCase(in s : str) : bool
  UmlCom::send_cmd(_identifier, setIdlCaseCmd, (void *) 0, s);
  if (UmlCom::read_bool()) {
    _idl_case = 0;
    _idl_explicit_case = s;
    return TRUE;
  }
 else
   return FALSE;
!!!191872.java!!!	set_IdlCase(in s : str) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIdlCaseCmd, (long) 0, s);
  UmlCom.check();
  
  _idl_case = null;
  _idl_explicit_case = s;

!!!192000.cpp!!!	mysqlConstraint() : string
  read_if_needed_();

  return _mysql_constraint;
!!!192000.java!!!	mysqlConstraint() : string
  read_if_needed_();

  return _mysql_constraint;
!!!192128.cpp!!!	set_MysqlConstraint(in s : str) : bool
  return set_it_(_mysql_constraint, s, setMysqlConstraintCmd);
!!!192128.java!!!	set_MysqlConstraint(in s : str) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setMysqlConstraintCmd, s);
  UmlCom.check();

  _mysql_constraint = s;
!!!192256.cpp!!!	mysqlColumns() : UmlAttribute
  read_if_needed_();

  return _mysql_columns;
!!!192256.java!!!	mysqlColumns() : UmlAttribute
  read_if_needed_();

  return (UmlAttribute[]) _mysql_columns.clone();
!!!192384.cpp!!!	set_MysqlColumns(in l : UmlAttribute) : bool
  UmlCom::send_cmd(_identifier, setMysqlColumnsCmd, (const Q3PtrVector<UmlItem> &) l);
  if (UmlCom::read_bool()) {
    if (_defined)
      _mysql_columns = l;
    return TRUE;
  }
  else
    return FALSE;
!!!192384.java!!!	set_MysqlColumns(in l : UmlAttribute) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setMysqlColumnsCmd, (UmlItem[]) l);
  UmlCom.check();
  _mysql_columns = (UmlAttribute[]) l.clone();
!!!192512.cpp!!!	mysqlReferencedKey() : UmlAttribute
  read_if_needed_();

  return _mysql_ref_key;
!!!192512.java!!!	mysqlReferencedKey() : UmlAttribute
  read_if_needed_();

  return _mysql_ref_key;
!!!192640.cpp!!!	set_MysqlReferencedKey(in k : UmlAttribute) : bool
  UmlCom::send_cmd(_identifier, setMysqlReferencedKeyCmd, (k != 0) ? ((UmlBaseItem *)k)->_identifier : 0);
  if (UmlCom::read_bool()) {
    _mysql_ref_key = k;
    return TRUE;
  }
  else
    return FALSE;
!!!192640.java!!!	set_MysqlReferencedKey(in k : UmlAttribute) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setMysqlReferencedKeyCmd, (k != null) ? k.identifier_() : 0);
  UmlCom.check();

  _mysql_ref_key = k;
!!!192768.cpp!!!	mysqlOnDelete() : aMySqlRefOption
  read_if_needed_();

  return _mysql_on_delete;
!!!192768.java!!!	mysqlOnDelete() : aMySqlRefOption
  read_if_needed_();

  return _mysql_on_delete;
!!!192896.cpp!!!	set_MysqlOnDelete(in v : aMySqlRefOption) : bool
  UmlCom::send_cmd(_identifier, setMysqlOnDeleteCmd, (char) v);
  if (UmlCom::read_bool()) {
    _mysql_on_delete = v;
    return TRUE;
  }
  else
    return FALSE;
!!!192896.java!!!	set_MysqlOnDelete(in v : aMySqlRefOption) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setMysqlOnDeleteCmd, (byte) v.value());
  UmlCom.check();

  _mysql_on_delete = v;
!!!193024.cpp!!!	mysqlOnUpdate() : aMySqlRefOption
  read_if_needed_();

  return _mysql_on_update;
!!!193024.java!!!	mysqlOnUpdate() : aMySqlRefOption
  read_if_needed_();

  return _mysql_on_update;
!!!193152.cpp!!!	set_MysqlOnUpdate(in v : aMySqlRefOption) : bool
  UmlCom::send_cmd(_identifier, setMysqlOnUpdateCmd, (char) v);
  if (UmlCom::read_bool()) {
    _mysql_on_update = v;
    return TRUE;
  }
  else
    return FALSE;
!!!193152.java!!!	set_MysqlOnUpdate(in v : aMySqlRefOption) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setMysqlOnUpdateCmd, (byte) v.value());
  UmlCom.check();

  _mysql_on_update = v;
!!!193280.cpp!!!	unload(in rec : bool, in del : bool) : void
  _role_name = 0;
  _multiplicity = 0;
  _default_value = 0;
#ifdef WITHMYSQL
  _mysql_constraint = 0;
  _mysql_columns.clear();
#endif
#ifdef WITHIDL
  _idl_explicit_case = 0;
#endif
  UmlBaseClassMember::unload(rec, del);
!!!193280.java!!!	unload(in rec : bool, in del : bool) : void
  _role_name = null;
  _multiplicity = null;
  _default_value = null;
  _idl_explicit_case = null;
  super.unload(rec, del);
!!!193408.cpp!!!	read_uml_() : void
  UmlBaseClassMember::read_uml_();
  _rel_kind = (aRelationKind) UmlCom::read_char();
  _role_type = (UmlClass *) UmlBaseItem::read_();
  _association.type = (UmlClass *) UmlBaseItem::read_();
  if (_association.type == 0)
    _association.explicit_type = UmlCom::read_string();
  _role_name = UmlCom::read_string();
  _multiplicity = UmlCom::read_string();
  _default_value = UmlCom::read_string();
  _read_only = UmlCom::read_bool();
  _derived = UmlCom::read_bool();
  _derived_union = UmlCom::read_bool();
  _ordered = UmlCom::read_bool();
  _unique = UmlCom::read_bool();
  _get_oper = (UmlOperation *) UmlBaseItem::read_();
  _set_oper = (UmlOperation *) UmlBaseItem::read_();
!!!193408.java!!!	read_uml_() : void
  super.read_uml_();
  _rel_kind = aRelationKind.fromInt(UmlCom.read_char());
  _role_type = (UmlClass) UmlBaseItem.read_();
  _association = new UmlTypeSpec();
  _association.type = (UmlClass) UmlBaseItem.read_();
  if (_association.type == null)
    _association.explicit_type = UmlCom.read_string();
  _role_name = UmlCom.read_string();
  _multiplicity = UmlCom.read_string();
  _default_value = UmlCom.read_string();
  _read_only = UmlCom.read_bool();
  _derived = UmlCom.read_bool();
  _derived_union = UmlCom.read_bool();
  _ordered = UmlCom.read_bool();
  _unique = UmlCom.read_bool();
  _get_oper = (UmlOperation) UmlBaseItem.read_();
  _set_oper = (UmlOperation) UmlBaseItem.read_();
!!!193536.cpp!!!	read_cpp_() : void
  UmlBaseClassMember::read_cpp_();
  _cpp_mutable = UmlCom::read_bool();
  _cpp_virtual_inheritance = UmlCom::read_bool();
  _cpp_constexpr = UmlCom::read_bool();
  _cpp_thread_local = UmlCom::read_bool();
!!!193536.java!!!	read_cpp_() : void
  super.read_cpp_();
  _cpp_mutable = UmlCom.read_bool();
  _cpp_virtual_inheritance = UmlCom.read_bool();
  _cpp_constexpr = UmlCom.read_bool();
  _cpp_thread_local = UmlCom.read_bool();
!!!193664.cpp!!!	read_java_() : void
  UmlBaseClassMember::read_java_();
  _java_transient = UmlCom::read_bool();
!!!193664.java!!!	read_java_() : void
  super.read_java_();
  _java_transient = UmlCom.read_bool();
!!!193792.cpp!!!	read_php_() : void
  UmlBaseClassMember::read_php_();
!!!193792.java!!!	read_php_() : void
  super.read_php_();
!!!193920.cpp!!!	read_python_() : void
  UmlBaseClassMember::read_python_();
!!!193920.java!!!	read_python_() : void
  super.read_python_();
!!!194048.cpp!!!	read_idl_() : void
  UmlBaseClassItem::read_idl_();
  _idl_truncatable = UmlCom::read_bool();
  _idl_case = (UmlAttribute *) UmlBaseItem::read_();
  if (_idl_case == 0)
    _idl_explicit_case = UmlCom::read_string();
!!!194048.java!!!	read_idl_() : void
  super.read_idl_();
  _idl_truncatable = UmlCom.read_bool();
  _idl_case = (UmlAttribute) UmlBaseItem.read_();
  if (_idl_case == null)
    _idl_explicit_case = UmlCom.read_string();
!!!194176.cpp!!!	read_mysql_() : void
  UmlBaseClassItem::read_mysql_();
  
  _mysql_constraint = UmlCom::read_string();
  _mysql_on_delete = (aMySqlRefOption) UmlCom::read_char();
  _mysql_on_update = (aMySqlRefOption) UmlCom::read_char();
  _mysql_ref_key = (UmlAttribute *) UmlBaseItem::read_();

  unsigned n;
  unsigned index;
  
  n = UmlCom::read_unsigned();
  _mysql_columns.resize(n);
    
  for (index = 0; index != n; index += 1)
    _mysql_columns.insert(index, (UmlAttribute *) UmlBaseItem::read_());
!!!194176.java!!!	read_mysql_() : void
  super.read_mysql_();
  
  _mysql_constraint = UmlCom.read_string();
  _mysql_on_delete = aMySqlRefOption.fromInt(UmlCom.read_char());
  _mysql_on_update = aMySqlRefOption.fromInt(UmlCom.read_char());
  _mysql_ref_key = (UmlAttribute) UmlBaseItem.read_();

  int n;
  int index;
  
  n = UmlCom.read_unsigned();
  _mysql_columns = new UmlAttribute[n];
    
  for (index = 0; index != n; index += 1)
    _mysql_columns[index] = (UmlAttribute) UmlBaseItem.read_();
!!!194304.cpp!!!	UmlBaseRelation(in id : item_id, in n : string)
  _role_type = 0;
  _get_oper = 0;
  _set_oper = 0;
#ifdef WITHMYSQL
  _mysql_ref_key = 0;
#endif
#ifdef WITHIDL
  _idl_case = 0;
#endif
