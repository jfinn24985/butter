class location_map
!!!178089.cpp!!!	find_or_create(in a_path : path, inout a_cache : iterator) : void
BUTTER_REQUIRE (NULL != base_.get ()
              , "Programming error, find_or_create called without initial location.");
// Path is uniform manner.
if (NULL = a_cache)
{
  a_cache = base_.get ();
}
// Check if we need to go up the tree.
while (not a_cache->match_path (a_path) or not a_cache->sub_path (a_path))
{
  if (NULL != a_cache->parent ()) // Check for base
  {
    a_cache = a_cache->parent ();
  }
  else
  {
    break; // at base, break loop
  }
}
if (not a_cache->match_path (a_path))
{
  // Check if we need to reparent the entire tree.
  if (not a_cache->sub_path (a_path))
  {
    BUTTER_CHECK (a_cache == base_.get (), "We should be at the base of the tree.");
    // Need to reparent tree.
    while (not base_->match_path (a_path) or not base_->sub_path (a_path))
    {
      std::auto_ptr< location > tmp__ = base_->create_common_parent (a_path);
      base_.release (); // release old base ptr
      base_ = tmp__; // pass ownership of new base location
      // base_ is closest parent. Build descendent
      if (base_->match_path (a_path))
      {
        a_cache = base_.get();
      }
      else
      {
        a_cache = base_->create_children (a_path);
      }
    }
  }
  else
  {
    // Attempt to descend tree
    while (not a_cache->match_path (a_path))
    {
      // Check children of current location
      QPtrVector< location > children__ = a_cache->children ();
      location * newloc__ (a_cache);
      for (int i_ = 0; i_ < children__.size (); ++i_)
      {
        if (children__.at (i_)->match_path (a_path) or children__.at (i_)->sub_path (a_path))
        {
          newloc__ = children__.at (i_);
          break;
        }
      }
      if (newloc__ != a_cache)
      {
        a_cache = newloc__;
      }
      else
      {
        // a_cache is closest parent. Build descendent
        a_cache = a_cache->create_children (a_path);
      }
    }
  }
}
BUTTER_ENSURE (a_cache->match_path (a_path), "Output location does not match input path");
return a_cache;

while (not stack__.isEmpty () and not stack__.top ()->match (a_path))
{
  if (stack__.top ()->sub_path (a_path))
  {
    break;
    if (NULL != a_cache->parent ()) // Check for base
    {
      a_cache = a_cache->parent ();
    }
    else
    {
      break; // at base, break loop
  }
  else
  {
    
// Find existing location or create it
location find_it_ (a_path.path ());
a_cache = locations_set_.find (find_it_);
if (a_cache == locations_set_.end ())
{
  std::auto_ptr< location > tmp_ (new location (a_path_));
  tmp_->build_file (new_build_file ());
  std::pair< set_type::iterator, bool > add_succeed_ (locations_set_.insert (tmp_.get ()));
  BUTTER_ALWAYS (add_succeed_.second, "Problem creating a new location object, cowardly quitting.");
  base_.add_child (tmp_.release ());
  a_cache = add_succeed_.first;
}
!!!138793.cpp!!!	find_create(in a_path : path, inout a_cache : location, inout a_root : location) : void
// a_path = path to add.
// a_cache = this!!
// a_root = current root of location tree. This can be changed.

// Step 1: Create a relative path from "here" to a_path.
// Step 2: Create any missing location objects between "here" and "there"
//         of the relative path
// Step 3: Ensure a_root is root of tree.

///////////////////////////////////
//  Step 1: Generate relative path.
QDir::
location *Result (this);
// Build stack of dir steps
QStringList path_stack__;
#ifdef BUTTER_TRACE
UmlCom::trace ("<p>Search for location: " + a_path.path () + "</p>\n<p>search: .");
#endif
QDir search_path__ (path_);
while (search_path__ != a_path)
{
  path_stack__.append (a_path.dirName ());
  a_path.cdUp ();
  BUTTER_ALWAYS (not a_path.isRoot (), "The path of a package is not a descendent of the project root.");
}
// Search up dir for existing locations
while (path_stack__.last ())
{
  location *l_old (Result);
  for (unsigned int l_i(0); l_i < Result->m_children.count (); ++l_i)
  {
    BUTTER_CHECK (NULL != Result->m_children.at (l_i), "nul child found.");
    if (QString(Result->m_children.at (l_i)->m_path) == path_stack__.last ())
    {
      Result = Result->m_children.at (l_i);
#ifdef BUTTER_TRACE
      UmlCom::trace ("/" + path_stack__.last ());
#endif
      break;
    }
  }
  if (l_old == Result)
  {
    // Could not find the next object, exit
    break;
  }
  path_stack__.remove (path_stack__.fromLast ());
}
#ifdef BUTTER_TRACE
UmlCom::trace (" | create:");
#endif
// Create any missing locations
while (path_stack__.last ())
{
  if (Result->m_children.size () == Result->m_children.count ())
  {
    Result->m_children.resize (Result->m_children.size () + 4);
  }
  Result->m_children.insert (Result->m_children.count (), new location (QCString(path_stack__.last ()), *Result));
  Result = Result->m_children.at (Result->m_children.count () - 1);
  BUTTER_CHECK (NULL != Result, "child nul after creation.");
#ifdef BUTTER_TRACE
  UmlCom::trace ("/" + path_stack__.last ());
#endif
  path_stack__.remove (path_stack__.fromLast ());
}
#ifdef BUTTER_TRACE
  UmlCom::trace ("</p>");
#endif

return Result;
!!!178345.cpp!!!	prune(in a_root : location, in a_base_path : string, inout a_error_message : string) : bool
// Return true if we have no targets or children (documents and
// templates are not considered).
if (not m_children.isEmpty ())
{
  unsigned int l_newsize (m_children.count ());
  for (unsigned int l_i (0); l_i < l_newsize;)
  {
    location *l_item (m_children.at (l_i));
    if (l_item->prune ())
    {
      // Child can not be pruned
      ++l_i;
    }
    else
    {
      // Child can be pruned (remove and swap last ptr to here), do not increment l_i
#ifdef BUTTER_TRACE
      UmlCom::trace ("<p>Removing directory with no targets: " + m_children.at (l_i)->path () + "</p>");
#endif
      m_children.remove (l_i);
      if (l_newsize - 1 > l_i)
      {
        m_children.insert (l_i, m_children.take (l_newsize - 1));
      }
      --l_newsize;
    }
  }
}
return not m_children.isEmpty () or not m_targets.isEmpty ();
