class gmake_writer
!!!210729.cpp!!!	assoc_library(in a_target : UmlArtifact, out a_os : ostream, out a_includes : unistr, out a_ldflags : unistr, out a_cflags : unistr) : void
////////////////////////////////////
// Define the associations of target
//
// to sources and libraries
//
QString project_;
QString lib_body_;
if (item_traits::property_value (a_target, item_traits::butter_project_name, project_))
{
  //////////////////////////////////
  // Is an externally linked library
  //
  // add flags to main target.
  find_hdr_link (a_target, a_includes, a_ldflags, a_cflags, section_name, true);
}
else
{
  ///////////////////
  // Is local library
  //
  QTextOStream lib_os_ (&lib_body_); // Stream for  dependent library data
  UmlPackage * parent_package_ = dynamic_cast< UmlPackage * >(const_cast< UmlArtifact& >(a_target).parent ()->parent ());
  BUTTER_CHECK (NULL != parent_package_
      , "Grandparent of an artifact was not a package!");
  const QString lib_path_ (root_dir_.create_relative (item_traits::dirname (*parent_package_)));
  QString library_type_;
  pathcmp lib_fname_ ("$(ROOTDIR)");
  if (! lib_path_.isEmpty ())
  {
    lib_fname_ = lib_fname_ / lib_path_;
  }
  if (item_traits::property_search (a_target
           , item_traits::butter_lib_type_name, library_type_)
      && item_traits::shared_value == library_type_)
  {
    //////////////////////
    // Is a shared library
    //
    const QString lib_name_ ("lib"
        + const_cast< UmlArtifact& >(a_target).name ()
        + "$(sufshr)");
    lib_fname_ = lib_fname_ / lib_name_;
    // Add to linker information
    merge_string_list (a_ldflags, lib_fname_.path_localised ());
  }
  else
  {
    //////////////////////
    // Is a static library
    //
    const QString lib_name_ ("lib"
        + const_cast< UmlArtifact& >(a_target).name ()
        + "$(suflib)");
    lib_fname_ = lib_fname_ / lib_name_;
    // Add to object list
    QString obj_body_;
    {
      QTextOStream obj_os_ (&obj_body_);
      obj_os_ << this->target_NAME_ << "_OBJ+="
          << lib_fname_.path_localised ();
    }
    this->individual_obj_.append (obj_body_);
    //////////////////////
    // We need to get ldflags from library's sources
    QVector < UmlArtifact > assoc_arts_ (const_cast< UmlArtifact& >(a_target).associatedArtifacts ());
    for (unsigned int i_ = 0; i_ < assoc_arts_.size (); ++i_)
    {
      const QString stereotype_ (assoc_arts_[i_]->stereotype ().data ());
      if (stereotype_ == item_traits::library_stereotype
          || stereotype_ == item_traits::source_stereotype)
      {
        QString ldflags_;
        if (item_traits::property_value (*assoc_arts_[i_]
            , item_traits::butter_ldflags_name, ldflags_))
        {
          merge_string_list (a_ldflags, ldflags_);
        }
      }
    }
  }
  lib_os_ << lib_fname_.path_localised () << " ";
  // Both static/shared add include and link flags, ignore cflags
  QString ignored_cflags_;
  find_hdr_link (a_target, a_includes, a_ldflags
      , ignored_cflags_, section_name, true);
}
this->lib_set_.append (lib_body_);
!!!210857.cpp!!!	assoc_source(in a_target : UmlArtifact, out a_os : ostream, in a_filename : unistr, in a_basename : unistr, in a_src_inc : unistr, in a_src_flags : unistr, in a_isdoc : bool) : void
////////////////////////////////////
// Define the associations of target
//
// to sources and documents
//
// Add source/document to source list
a_os << " \\\n\t" << a_filename;

QString source_extra_;
{
  QTextOStream source_extra_os_ (&source_extra_);
  if (a_isdoc)
  {
    /////////////////////////////////
    // Add document to TARGET_OBJ as it can not be deduced from source list
    // Assume object just replaces extension
    source_extra_os_ << this->target_NAME_ << "_OBJ+=" << a_basename << "$(sufobj)\n";
  }

  ///////////////////////////////
  // If src has hdr/flags defined
  // we have to add lines like:
  // name.o: $(CCC)FLAGS+=...
  // name.o: CPPFLAGS+=...
  if (! a_src_inc.isEmpty () || ! a_src_flags.isEmpty ())
  {
    QString cppflags_, compflags_;
    this->process_flags (a_src_inc, a_src_flags, cppflags_, compflags_);
    QString comp_ ("CCC");
    BUTTER_ALWAYS(item_traits::property_value (a_target, item_traits::butter_compiler_name, comp_) || ! a_isdoc
                  , ("<p><b>Error:</b> Missing '" + item_traits::butter_compiler_name
                                  + "' property on " + QString (a_filename)).utf8 ().data ());
    if (! cppflags_.isEmpty ())
    {
      source_extra_os_ << a_basename << "$(sufobj): CPPFLAGS+=" << cppflags_ << "\n";
    }
    if (! compflags_.isEmpty ())
    {
      source_extra_os_ << a_basename << "$(sufobj): " << comp_ << "FLAGS+=" << compflags_ << "\n";
    }
    source_extra_os_ << "\n";
  }
}
if (! source_extra_.isEmpty ())
{
  this->individual_obj_.append ("\n");
  this->individual_obj_.append (source_extra_);
}
!!!161065.cpp!!!	descendent_link(inout a_art : compound_artifact, inout a_sys : compound_artifact, in a_loc : location) : void
// Need to write the "M_sys" include line.
QString tmp_;
QTextOStream desc_os_ (&tmp_);
{
  const int e_ = rules_name.find(' ');
  QString name_ (e_ < 0 ? rules_name : rules_name.left(e_));
  desc_os_ << "include " << (pathcmp("$(ROOTDIR)") / name_).path_localised () << "\n\n";
}
// Keep parent dir definitions.
if (NULL != a_loc.parent ())
{
  // Add us to base makefile
  QString & link_ = a_sys.target (a_loc.path ().path ()).second;
  link_.append ("dirs += ");
  link_.append (pathcmp(root_dir_.create_relative (a_loc.full_path ())).path_localised ());
  link_.append ("\n");
}
a_art.preamble.second.append (tmp_);

!!!210985.cpp!!!	end_target(in a_target : UmlArtifact, out a_os : ostream, in a_include : unistr, in a_ldflags : unistr, in a_cflags : unistr, in a_compiler : unistr, in a_type : target_type) : void
////////////////////////////////
// Finalise target build instructions
//
a_os << "\n";
if (a_type == other)
{
  ////////////////
  // Handle "other" library types specially.
  QString other_type_ (this->other_target_type_.upper ());
  this->find_replace (other_type_, '-', '_');
  QString cppflags_, compflags_;
  this->process_flags(a_include, a_cflags, cppflags_, compflags_);
  if (! compflags_.isEmpty ())
  {
    a_os << this->qualified_target_name_ << ": " << other_type_ << "FLAGS+=" << compflags_ << "\n";
  }
  if (! cppflags_.isEmpty ())
  {
    a_os << this->qualified_target_name_ << ": " << other_type_ << "FLAGS+=" << cppflags_ << "\n";
  }
  if (! a_ldflags.isEmpty ())
  {
    a_os << this->qualified_target_name_ << ": " << other_type_ << "FLAGS+=" << a_ldflags << "\n";
  }
  a_os << this->qualified_target_name_ << " : $(" << this->target_NAME_ << "SRC) " << this->lib_set_ << "\n"
        << "\t$(" << other_type_ << ") $(" << other_type_ << "FLAGS) " << this->qualified_target_name_
            << " $(" << this->target_NAME_ << "SRC)\n\n";
}
else
{
  // Create linker and compiler flagsets
  if (! a_ldflags.isEmpty ())
  {
    a_os << this->qualified_target_name_ << ": LDFLAGS+=";
    if (! a_ldflags.isEmpty ())
    {
      a_os << " " << a_ldflags;
    }
    a_os << "\n";
  }
  QString cppflags_, compflags_;
  this->process_flags(a_include, a_cflags, cppflags_, compflags_);
  if (! compflags_.isEmpty ())
  {
    a_os << this->qualified_target_name_ << ": CCCFLAGS+=" << compflags_ << "\n";
    a_os << this->qualified_target_name_ << ": CCFLAGS+=" << compflags_ << "\n";
  }
  if (! cppflags_.isEmpty ())
  {
    a_os << this->qualified_target_name_ << ": CPPFLAGS+=" << cppflags_ << "\n";
  }
  // Add dependency information
  a_os << target_NAME_ << "_DINC := $(filter %$(sufdep), $(" << target_NAME_ << "SRC:." << CppSettings::sourceExtension () << "=$(sufdep)))"
                    << " $(filter %$(sufdep), $(" << target_NAME_ << "SRC:.c=$(sufdep)))\n"
              << "-include $(" << target_NAME_ << "_DINC)\n";
  // Add any object definitions.
  if (! this->individual_obj_.isEmpty ())
  {
    a_os << this->individual_obj_ << "\n";
  }
  a_os << target_NAME_ << "_OBJ+="
      << "$(filter %$(sufobj), $(" << target_NAME_
      << "SRC:." << CppSettings::sourceExtension ()
      << "=$(sufobj)))\n"
      << "USEROBJ+=$(" << target_NAME_ << "_OBJ)\n";
  a_os << this->qualified_target_name_
          << " : $(" << this->target_NAME_ << "_SRC) $("
                      << this->target_NAME_ << "_DINC)\n";

  // Finally add target build definition
  switch (a_type)
  {
  case executable:
    {
      a_os << "$(eval $(call do_link_exe," << this->qualified_target_name_ << ",$(" << this->target_NAME_ << "_OBJ)))\n";
      break;
    }
  case shared_library:
    {
      a_os << "$(eval $(call do_link_shr," << this->qualified_target_name_
          << ",$(" << this->target_NAME_ << "_OBJ),$(or $(" << this->target_NAME_ <<"_VERSION),0)))\n";
      break;
    }
    break;
  case static_library:
    {
      a_os << "$(eval $(call do_archive," << this->qualified_target_name_ << ",$(" << this->target_NAME_ << "_OBJ)))\n";
      break;
    }
    break;
  case other: // Can not get here.
    break;
  }
}

a_os << "\nall :: " << this->qualified_target_name_ << "\n";
a_os << "TARGETS+=" << this->qualified_target_name_ << "\n\n";
!!!160809.cpp!!!	initialise(inout a_base : location, in a_project : UmlItem, inout a_sys : compound_artifact) : void
// The include dir is the difference between the current fullpath and the
// top-projects hdrDir
QString init_text_;
{
  QTextOStream init_os_ (&init_text_);
  this->root_dir_ = a_base.full_path ();
  this->root_dir_.convertToAbs ();
  BUTTER_CHECK (! root_dir_.path ().isEmpty ()
       , "<p><b>Program error:</b> Project root directory is not set properly.</p>");
  init_os_ << "ROOTDIR := " << root_dir_.path_localised () << "\n\n";
  {
    const int e_ = rules_name.find(' ');
    QString name_ (e_ < 0 ? rules_name : rules_name.left(e_));
    init_os_ << "include " << (pathcmp("$(ROOTDIR)") / name_).path_localised () << "\n\n";
  }
  const pathcmp base_include_ (item_traits::hdrname (dynamic_cast< const UmlPackage& >(a_project)));

  // Create list of include directories
  QString inc_;
  item_traits::property_value (a_project, item_traits::butter_include_name, inc_);
  if (!root_dir_.equality (base_include_))
  {
    inc_.append(" " + root_dir_.create_relative (base_include_));
  }

  // Get list of flags
  QString flags_;
  item_traits::property_search (a_project, item_traits::butter_flags_name, flags_);

  // Process flags into preprocessor and compiler sets
  process_flags (inc_, flags_, inc_, flags_);
  if (!inc_.isEmpty())
  {
    init_os_ << "CPPFLAGS+=" << inc_ << "\n";
  }
  if (!flags_.isEmpty())
  {
    init_os_ << "CCFLAGS+=" << flags_ << "\n";
    init_os_ << "CCCFLAGS+=" << flags_ << "\n";
  }

  // Get linker flags
  QString linkflag_;
  if (item_traits::property_search (a_project, item_traits::butter_ldflags_name, linkflag_))
  {
    init_os_ << "LDFLAGS+=" << linkflag_ << "\n";
  }
}
a_sys.preamble.second = init_text_;
!!!211113.cpp!!!	install_target(in a_target : UmlArtifact, out a_os : ostream, in a_loc_var : unistr, in a_type : install_type, in a_isdoc : bool) : void
static const char * install_flag_[] =
{
  "BIN"
, "FILE"
, "LIB"
, "MAN"
};
QString target_name_;
if (a_isdoc)
{
  target_name_ = const_cast< UmlArtifact& >(a_target).name ();
}
else
{
  target_name_ = this->qualified_target_name_;
}
// Remove trailing DIR
if (a_loc_var.right(3) == "DIR")
{
  a_loc_var = a_loc_var.left(a_loc_var.length() - 3);
}
a_os << "$(eval $(call do_install," << target_name_
     << "," << a_loc_var;
if (a_loc_var != install_flag_ [a_type])
{
   a_os << "," << install_flag_ [a_type];
}
a_os << "))\n\n";
!!!236457.cpp!!!	process_flags(in a_inc_list : unistr, in a_flag_list : unistr, out a_cppflags : unistr, out a_cflags : unistr) : void
QTextOStream cppos_ (&a_cppflags);
QTextOStream flagos_ (&a_cflags);
if (! a_inc_list.isEmpty())
{
  QStringList list_ (QStringList::split (" ", a_inc_list));
  for (unsigned int i_ (0); i_ < list_.count (); ++i_)
  {
    const QString item_ ((*list_.at (i_)).stripWhiteSpace ());
    if ('$' != item_[0] && QDir::isRelativePath (item_))
    {
      cppos_ << "-I" << (pathcmp("$(ROOTDIR)") / item_).path_localised () << " ";
    }
    else
    {
      cppos_ << "-I" << pathcmp(item_).path_localised () << " ";
    }
  }
}
if (! a_flag_list.isEmpty())
{
  QStringList list_ (QStringList::split (" ", a_flag_list));
  for (unsigned int i_ (0); i_ < list_.count (); ++i_)
  {
    const QString item_ ((*list_.at (i_)).stripWhiteSpace ());
    if (item_.length() <= 2)
    {
      flagos_ << item_ << " ";
    }
    else if ('-' == item_[0])
    {
      if ('I' == item_[1])
      {
        cppos_ << "-I" << pathcmp(item_.mid(2)).path_localised () << " ";
      }
      else if ('D' == item_[1])
      {
        cppos_ << item_ << " ";
      }
      else
      {
        flagos_ << item_ << " ";
      }
    }
    else
    {
      if ('$' == item_[0] && (item_.contains("INC") || item_.contains("CPP") || item_.contains("HDR")))
      {
        cppos_ << item_ << " ";
      }
      else
      {
        flagos_ << item_ << " ";
      }
    }
  }
}
!!!162089.cpp!!!	process_hdrs(in a_inc_list : unistr) : unistr
QString Result;
QTextOStream l_os (&Result);
QStringList l_list (QStringList::split (" ", a_inc_list));
for (unsigned int l_i (0); l_i < l_list.count (); ++l_i)
{
  const QString l_item ((*l_list.at (l_i)).stripWhiteSpace ());
  if ('$' != l_item[0] && QDir::isRelativePath (l_item))
  {
    l_os << "-I$(ROOTDIR)/" << l_item << " ";
  }
  else
  {
    l_os << "-I" << l_item << " ";
  }
}

return QString (Result);
!!!161193.cpp!!!	requirements(in a_item : UmlItem, inout a_reqs : unistr) : bool
bool Result (false);
QString l_tmp;
QString l_section;
QTextOStream l_os (&l_section);
if (item_traits::property_value (a_item, item_traits::butter_include_name, l_tmp))
{
  Result = true;
  l_os << "USERHDRS := $(USERHDRS) " << process_hdrs (l_tmp) << "\n";
}
if (item_traits::property_search (a_item, item_traits::butter_ldflags_name, l_tmp))
{
  Result = true;
  l_os << "USERLDFLAGS := $(USERLDFLAGS) " << l_tmp << "\n";
}
if (item_traits::property_search (a_item, item_traits::butter_flags_name, l_tmp))
{
  Result = true;
  l_os << "USERFLAGS := $(USERFLAGS) " << l_tmp << "\n";
}
if (Result)
{
  a_reqs = l_section;
}
return Result;
!!!210601.cpp!!!	start_target(in a_target : UmlArtifact, out a_os : ostream, in a_build_file : unistr, in a_compiler : unistr, in a_type : target_type) : void
/////////////////
// Initialise variables for the new target
this->qualified_target_name_ = const_cast< UmlArtifact& >(a_target).name ();
this->target_NAME_ = this->qualified_target_name_.upper ();
this->find_replace (this->target_NAME_, '.', '_');
this->other_target_type_.truncate (0);    // An "other" target type.
this->lib_set_.truncate (0);              // Set of included libraries
this->individual_obj_.truncate (0);       // Set of sources that need to be individually compiled
///////////////////////////////////////////
// Define the characteristics of the target
//
// a_target must be executable or library stereotype!
//
switch (a_type)
{
case executable:
  {
    this->qualified_target_name_.append ("$(sufexe)");
  }
  break;
case static_library:
  this->qualified_target_name_.prepend ("lib");
  this->qualified_target_name_.append ("$(suflib)");
  break;
case shared_library:
  this->qualified_target_name_.prepend ("lib");
  this->qualified_target_name_.append ("$(sufshr)");
  break;
case other:
  item_traits::property_value (a_target, item_traits::butter_other_name, this->other_target_type_);
  break;
}

// Handle target specific include file for library types only
if (a_type != executable)
{
  if (! a_build_file.isEmpty ())
  {
    a_os << "include " << (pathcmp("$(ROOTDIR)")
        / a_build_file).path_localised() << ".mak*\n\n";
  }
}

//////////////////
// Start the source file associations
a_os << this->target_NAME_ << "SRC := ";
