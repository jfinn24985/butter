class cmake_writer
!!!228905.cpp!!!	assoc_library(in a_target : UmlArtifact, out a_os : ostream, out a_includes : unistr, out a_ldflags : unistr, out a_cflags : unistr) : void
QString project_;
if (item_traits::property_value (a_target, item_traits::butter_project_name, project_))
{
  this->dependency_obj_.append(project_);
}
else
{
  this->dependency_obj_.append(const_cast< UmlArtifact& >(a_target).name ());
}
this->dependency_obj_.append("\n\t");
/////////////
// Note. Header/link information is imported with library in boost jam.
!!!228777.cpp!!!	assoc_source(in a_target : UmlArtifact, out a_os : ostream, in a_filename : unistr, in a_basename : unistr, in a_src_inc : unistr, in a_src_flags : unistr, in a_isdoc : bool) : void
if (! this->is_other_ && (! a_src_inc.isEmpty () && ! a_src_flags.isEmpty ()))
{
  QString individual_;
  {
    // Add individual obj description
    QTextOStream source_os_ (&individual_);
    source_os_ << "set_source_file_properties (" << a_filename << " COMPILE_FLAGS ";
    if (! a_src_inc.isEmpty ())
    {
      QStringList include_list_ (QStringList::split (" ", a_src_inc));
      for (unsigned int index_ = 0; index_ < include_list_.count (); ++index_)
      {
        source_os_ << "-I" << (*include_list_.at (index_)).stripWhiteSpace () << " ";
      }
    }
    if (! a_src_flags.isEmpty ())
    {
      source_os_ << a_src_flags;
    }
    source_os_ << ")\n";
  }
  this->individual_obj_.append (individual_);
}
a_os << a_filename << "\n\t";
!!!228521.cpp!!!	descendent_link(inout a_art : compound_artifact, inout a_sys : compound_artifact, in a_loc : location) : void
// Add ourself to the system artifact (if not the top-level).
if (NULL != a_loc.parent ())
{
  QString tmp_;
  QTextOStream os_ (&tmp_);
  // include (subdir).
  pathcmp root_dir_;
  for (location const* loc_cursor_ = &a_loc;
	true;
	loc_cursor_ = loc_cursor_->parent ())
  {
    if (NULL == loc_cursor_->parent ())
    {
      root_dir_ = loc_cursor_->full_path ();
      break;
    }
  }
  // Add definition for this sub-project to the top-level location
  // use-project /compchem/chemistry : src/chemistry ;

  QString dir_line_ ("add_subdirectory ()\n");
  a_sys.close.second.append (dir_line_.insert(18, root_dir_.create_relative (a_loc.full_path ())));
}
!!!228393.cpp!!!	end_target(in a_target : UmlArtifact, out a_os : ostream, in a_include : unistr, in a_ldflags : unistr, in a_cflags : unistr, in a_compiler : unistr, in a_type : target_type) : void
///////////////////////
// end target definition
a_os << ")\n"; // End sources.
// Standard requirements
if (! a_include.isEmpty ())
{
  a_os << "include_directories (" << a_include << ")\n";
}
if (! a_cflags.isEmpty () || ! a_ldflags.isEmpty ())
{
  a_os << "set_target_property (" << this->target_NAME_;
  if (! a_cflags.isEmpty ())
       a_os << "\n\tCOMPILE_FLAGS " << a_cflags;
  if (! a_ldflags.isEmpty ())
       a_os << "\n\tLINK_FLAGS " << a_ldflags;
  a_os << ")\n";
}
a_os << "\n\n";
// Add any object definitions
if (! this->individual_obj_.isEmpty ())
{
  a_os << this->individual_obj_;
}
// Add any dependencies
if (! this->dependency_obj_.isEmpty ())
{
  a_os << "add_dependencies (" << this->target_NAME_ << "\n\t"
      << this->dependency_obj_ << ")\n";
}
!!!228265.cpp!!!	external_target(in a_current : location, in a_target : UmlArtifact, inout a_sys : compound_artifact) : void
// Get project name, if present
QString value_;
item_traits::property_value (a_target, item_traits::butter_project_name, value_);
BUTTER_CHECK (! value_.isEmpty (), "Programming error, should not be in external_target if project attribute is not set on artifact.");
// Get the external target section
butter::compound_artifact::string_pair_t & proj_ = a_sys.target (value_);
// Construct a mini-project section.
if (proj_.second.isEmpty ())
{
  QTextOStream os_(&proj_.second);
  os_ << "# Include " + value_ + " settings\n\n";
  QString tmp_;
  if (item_traits::property_value (a_target, item_traits::butter_buildfile_name, tmp_))
  {
    // Have local definition file
    os_ << "include (" << tmp_ << ")\n";
  }
  else
  {
    const QString template_ (this->section (this->section_name, const_cast< UmlArtifact& >(a_target).description ()));
    if (! template_.isEmpty ())
    {
      os_ << template_ << "\n";
    }
    else
    {
      os_ << "find_package(" << value_ << ")\n";
    }
  }
  QString includes_, linkflags_, cflags_;
  find_hdr_link (a_target, includes_, linkflags_, cflags_, this->section_name, true);
  if (! cflags_.isEmpty ())
  {
    os_ << "add_definitions (" << cflags_ << ")\n";
  }
  os_ << "\n";
}
!!!228137.cpp!!!	initialise(inout a_base : location, in a_project : UmlItem, inout a_sys : compound_artifact) : void
BUTTER_REQUIRE (NULL == a_base.parent (), "initialise can only be called on the top-most location");
this->project_name_ = const_cast< UmlItem& >(a_project).name ().upper();
QString content_;
{
  QString base_include_ (a_base.full_path ().create_relative (item_traits::hdrname (dynamic_cast< const UmlPackage& >(a_project))));
  QTextOStream os_ (&content_);
  os_ << "# Include local constants\ninclude (" << rules_name << ")\n\n";
  os_ << "# Set project's global settings\nproject (" << this->project_name_ << ")\n";

  QString link_, flag_; // Needed arguments.
  find_hdr_link (a_project, base_include_, link_, flag_, section_name, false);
  if (! base_include_.isEmpty ())
  {
    os_ << "set (CMAKE_INCLUDE_PATH " << base_include_ << ")\n";
  }
  if (! link_.isEmpty ())
  {
    QStringList list_ (QStringList::split (" ", base_include_));
    QString lddir_, ldlib_, ldflag_;
    for (unsigned int i_ (0); i_ < list_.count (); ++i_)
    {
      const QString item_((*list_.at (i_)).stripWhiteSpace ());
      if (item_[1] == 'L')
      {
        lddir_.append (" ");
        lddir_.append (item_.mid(2));
      }
      else if (item_[1] == 'l')
      {
        ldlib_.append (" ");
        ldlib_.append (item_.mid(2));
      }
      else
      {
        ldflag_.append(" ");
        ldflag_.append (item_);
      }
    }
    os_ << "set (CMAKE_LIBRARY_PATH " << lddir_ << ")\n";

    os_ << "set (" << this->project_name_ << "_LDLIB CACHE STRING \"Project wide link libraries\" " << ldlib_ << ")\n";
    os_ << "set (" << this->project_name_ << "_LDFLAG CACHE STRING \"Project wide link flags\" " << ldflag_ << ")\n";
  }
  if (! flag_.isEmpty ())
  {
    os_ << "set (" << this->project_name_ << "_FLAGS CACHE STRING \"Project wide compile flags\" " << flag_ << ")\n";
  }
  ///////////
  // CMake handles build directory with variant
}
a_sys.preamble.second = content_;
!!!228009.cpp!!!	install_target(in a_target : UmlArtifact, out a_os : ostream, in a_loc_var : unistr, in a_type : install_type, in a_isdoc : bool) : void
a_os << "install (";
if (! a_isdoc)
  a_os << "TARGET ";
else
  a_os << "FILES ";
a_os << this->target_NAME_;
if (a_type == build_writer::bin)
  a_os << "\n\tRUNTIME";
if (a_type == build_writer::lib)
  a_os << "\n\tLIBRARY";
a_os << "\n\tDESTINATION ${" << a_loc_var
     << "}\n\tCONFIGURATIONS Release )\n\n";
!!!227753.cpp!!!	start_target(in a_target : UmlArtifact, out a_os : ostream, in a_build_file : unistr, in a_compiler : unistr, in a_type : target_type) : void
////////////////////////
// Reset variables
this->other_target_type_.truncate (0);
this->individual_obj_.truncate (0);
this->dependency_obj_.truncate (0);
{
  QString target_loc_(item_traits::location (a_target));
  if (target_loc_[0] == '.')
    target_loc_ = this->project_name_;
  this->target_NAME_ = (target_loc_ + "_" + QString(const_cast< UmlArtifact& >(a_target).name ())).upper ();
}
this->is_other_ = (a_type == other);
///////////////////////
// Start target definition
a_os << "set (" <<  this->target_NAME_ << " " << const_cast< UmlArtifact& >(a_target).name () << ")\n\n";
this->target_NAME_.prepend("${");
this->target_NAME_.append("}");
const QString stereotype_ (const_cast< UmlArtifact& >(a_target).stereotype ());
if (stereotype_ == item_traits::library_stereotype)
{
  if (item_traits::property_value (a_target, item_traits::butter_other_name, this->other_target_type_))
  {
    if (! a_build_file.isEmpty ())
    {
      a_os << "include (" << a_build_file << ".cmake)\n\n";
      a_os << "add_" << this->other_target_type_ << "_target (";
    }
    else
    {
      a_os << "find_package (" << this->other_target_type_ << ")\n\n ";
      return;
    }
  }
  else
  {
    a_os << "add_library (";
  }
}
else
{
  a_os << "add_executable (";
}
a_os << this->target_NAME_ << "\n\t";
// Handle shared/static libraries
switch (a_type)
{
case static_library:
  {
    a_os << "STATIC\n\t";
  }
  break;

case shared_library:
  {
    a_os << "SHARED\n\t";
  }
  break;
default: // do nothing for all other cases
  break;
}
