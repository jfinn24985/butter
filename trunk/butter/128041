format 75
"butter" // butter
  revision 212
  modified_by 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "butter"
  cpp_src_dir "../src/butter"
  cpp_namespace "butter"
  ncouples 1
  key "test" value "test properties"
  comment "Butter is a plug-out that goes well with jam. (standard or boost)

At the top-most project level the following optional property determines
which type of jamfile to write:
 @butter style= boost|standard, the default is standard jam!

For both library and executable artifacts there are the following optional properties.
Note, however, that these are better set in the Jambase file that is not created by the
butter plug-out:
 @butter link = extra libraries to link against
 @butter flag = extra compiler flags
 @butter include = extra include directories

For library we have the optional property:
 @butter type = static,dynamic (default dynamic) [can be set globally and inherited]
 @butter other => specify another target type eg. \"python-extension\"

For both libs and exes, associated artifacts lists are inspected.

If you create an artifact object called Jamrules with a type that is not source,
executable or library then the description from the object will be written into the
Jamrules file.

If you create an artifact object called Jamfile (or Jamroot) with a type that is not 
source, executable or library then the description from the object will be written 
into the corresponding Jamfile (or Jamroot) file. If there
is the line ${butter_boost} or ${butter_standard} then all text following this line (until 
another tag line (${butter_boost} or ${butter_standard}) will be
included in corresponding build file.

Packages that contain only \"external\" classes can also have an artifact with the 
name Jamfile. 

For boost: The artifact can have the property @butter jamfile=\"xml2.jam\".  If there is no 
content in the description field then this is taken to be an existing Jamfile that is to 
be included. If their is content in the description field then the field is written 
into the given file at the project base directory. Both types will be included into 
Jamroot with a using statement.

For standard: Standard doesn't have the concept of including other Jamfiles
therefore the content of the description field in included in the Jamrules file.

If the artifact has the property @boost project then it is assumed to be a library
from an external project that should be added to the top-level construction system 

For automatically referencing external classes you create a library artifact in the
external package with a jamfile artifact or with the @jamfile property containing the 
name of the 'using' jamfile. This library can be made a direct dependency of the target
library/executable or as an indirect dependency by creating a dummy artifact associated 
with library which contains the external classes.

Notes:
* All references to 'jamfile' should be taken to mean the name of the relevant project
construction document, ie jamfile, makefile, jamroot etc."
  classview 129193 "butter"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 128041 // butter
    classdiagram 128041 "butter overview"
      draw_all_relations no hide_attributes yes hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 129193 "generator"
      draw_all_relations default hide_attributes yes hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 159017 "basic_style"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};

${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}interface ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      
      comment "POD type for storing basic information about compound_document elements"
      class 149545 "write_factory_fn_t"
	visibility package stereotype "typedef" base_type class_ref 146985 // base_generator
	cpp_decl "${comment}typedef std::unique_ptr< ${type} > (*${name})();
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      attribute 161577 "comment_string_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "beginning of comment string"
      end

      attribute 199337 "end_comment_string_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "ending of comment string"
      end

      attribute 159145 "end_phrase_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A string indicating the end of a labelled part.

The actual end-phrase will be
end_phrase_ () end_end_phrase_ or \"end_phrase_ () {label} end_end_phrase_\" where label is
the name of the part. Note the \"{\" \"}\" are part of phrase."
      end

      attribute 197801 "end_end_phrase_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A string denoting the end-of-line for  the ending point of a part."
      end

      attribute 159273 "start_phrase_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A string denoting the starting point of a part.

The actual start-phrase will be
\"start_phrase_ {label} end_start_phrase_\" where label is the name of the part.
Note the \"{\" \"}\" are part of phrase."
      end

      attribute 197929 "end_start_phrase_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A string denoting the end-of-line for  the starting point of a part."
      end

      attribute 200489 "name_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The name of the current style."
      end

      attribute 162985 "factory_"
	private type class_ref 149545 // write_factory_fn_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Method to create base_generator object for this style."
      end

      extra_member 134576 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 134832 "basic_style"
	stereotype "default"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${name}${(}${)}${volatile} = delete;"
	
	
	
	
      end

      operation 235689 "basic_style"
	public explicit_return_type ""
	nparams 8
	  param in name "a_com_start" explicit_type "unistr"
	  param in name "a_com_end" explicit_type "unistr"
	  param in name "a_end_phr" explicit_type "unistr"
	  param in name "a_end_end" explicit_type "unistr"
	  param in name "a_start_phr" explicit_type "unistr"
	  param in name "a_start_end" explicit_type "unistr"
	  param in name "a_name" explicit_type "unistr"
	  param in name "a_factory" type class_ref 149545 // write_factory_fn_t
	cpp_decl "    ${comment}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}, const ${t7} & ${p7}${)}${volatile}
: comment_string_(${p0})
, end_comment_string_(${p1})
, end_phrase_(${p2})
, end_end_phrase_(${p3})
, start_phrase_(${p4})
, end_start_phrase_(${p5})
, name_(${p6})
, factory_(${p7})
{}
"
	
	
	
	
      end

      operation 250665 "basic_style"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 159017 // basic_style
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${)}${volatile} = delete;"
	
	
	
	
      end

      operation 128176 "basic_style"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 159017 // basic_style
	cpp_decl "    ${comment}${name}${(}${t0} && ${p0}${)}${volatile} = delete;"
	
	
	
	
      end

      operation 128304 "~basic_style"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile} = default;
"
	
	
	
	
      end

      operation 135088 "operator="
	private return_type class_ref 159017 // basic_style
	nparams 1
	  param in name "source" type class_ref 159017 // basic_style
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract} = delete;
"
	
	
	
	
      end

      extra_member 134704 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 155056 "comment_string"
	const public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} const& ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
      end

      operation 155184 "end_comment_string"
	const public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} const& ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
      end

      operation 141616 "end_phrase"
	const public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} const& ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
      end

      operation 141744 "end_end_phrase"
	const public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} const& ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
      end

      operation 148400 "end_start_phrase"
	const public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} const& ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
      end

      operation 148528 "name"
	const public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} const& ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
      end

      operation 148272 "start_phrase"
	const public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} const& ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
      end

      extra_member 141232 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 195625 "comment_text"
	const public explicit_return_type "unistr"
	nparams 1
	  param in name "a_text" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Transcribe the given text into a comment in the current
build system.  In general this prepends comment indicators
to each line of a_text and adds a terminal newline if
a_text does not end in a newline."
      end

      operation 196905 "create_writer"
	stereotype "unique_ptr"
	const public return_type class_ref 146985 // base_generator
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}std::unique_ptr< ${type} > ${name}${(}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${)}${const}${volatile}${staticnl}
{
  return (*factory_)();
}
"
	
	
	
	
	comment "Create a build generator appropriate for the current style."
      end
    end

    class 146985 "base_generator"
      abstract visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};

${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The build generator derived classes are responsible for creating a set of build system artifacts
in a particular style.  These are inserted into the Uml Project where another class is 
responsible for writing them to the file-system.

The main action takes place in the create_system method.  The generator template class contains
a definitive implementation of this method that attempts to uniformly support all features of the
program, while calling derived class methods to implement the features for each style. The
Curiously Recurring Template Idiom is used to avoid virtual methods calls for the style specific 
functions.

Actions
* traverses a location tree examining packages
* creates a build-file artifact for all locations with targets
* links all the build-file artifacts together to form a build-system

"
      classrelation 154793 // <dependency>
	relation 154025 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 154793 // <dependency>
	  b parent class_ref 137001 // butter_constants
      end

      classrelation 174889 // <dependency>
	relation 174121 -_->
	  a package
	    cpp default "#include in source"
	    classrelation_ref 174889 // <dependency>
	  b parent class_ref 161321 // const_token_iterator
      end

      class 139305 "install_type"
	visibility public stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl "${comment}${public}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl "${comment}${visibility}final class ${name} {
${items}}
"
	python_2_2 python_decl "class ${name}:
${docstring}${members}
"
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	comment "Indicate what sort of object is being installed."
	attribute 153769 "bin"
	  public type class_ref 139305 // install_type
	  init_value "0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "File is a binary file."
	end

	attribute 154025 "file"
	  public type class_ref 139305 // install_type
	  init_value "1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "File is a generic file"
	end

	attribute 154153 "lib"
	  public type class_ref 139305 // install_type
	  init_value "2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Item is a library"
	end

	attribute 154281 "man"
	  public type class_ref 139305 // install_type
	  init_value "3"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "File is a man page"
	end
      end

      class 154281 "target_type"
	visibility protected stereotype "enum"
	cpp_decl "${comment}enum ${name}
{
${items}
};
"
	java_decl "${comment}${public}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl "${comment}${visibility}final class ${name} {
${items}}
"
	python_2_2 python_decl "class ${name}:
${docstring}${members}
"
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	comment "Enum of target types"
	attribute 178857 "executable"
	  public type class_ref 154281 // target_type
	  init_value "0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Target is an executable"
	end

	attribute 178985 "static_library"
	  public type class_ref 154281 // target_type
	  init_value "1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Target is a static library"
	end

	attribute 179113 "shared_library"
	  public type class_ref 154281 // target_type
	  init_value "2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Target is a shared library"
	end

	attribute 179241 "other"
	  public type class_ref 154281 // target_type
	  init_value "3"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Target is an \"other\" library type."
	end
      end

      attribute 174633 "individual_obj_"
	protected explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Extra description for objects individually built from source"
      end

      attribute 177577 "other_target_type_"
	protected explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "An \"other\" target library type name.  This is the name that is used for the
label/converted for the build rule.  See inidividual styles to see how this
is used and what requirements there are for supporting it in each style."
      end

      attribute 204329 "root_dir_"
	private type class_ref 145833 // pathcmp
	multiplicity "0..1"
	stereotype "unique_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The root directory of the project."
      end

      attribute 180393 "target_NAME_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The version of the target name to use with variables."
      end

      operation 191785 "create_system"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "a_base" type class_ref 132393 // location
	  param in name "a_project" type class_ref 7553 // UmlItem
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${abstract};
"
	
	
	
	
	comment "DRIVER METHOD

Create a series of build-system artifacts based at a_base location. The
artifacts are inserted into a package at each location."
      end

      operation 200233 "find_hdr_link"
	class_operation protected explicit_return_type "void"
	nparams 6
	  param in name "a_item" type class_ref 7553 // UmlItem
	  param inout name "a_hdr" explicit_type "unistr"
	  param inout name "a_link" explicit_type "unistr"
	  param inout name "a_flag" explicit_type "unistr"
	  param in name "a_section_label" explicit_type "unistr"
	  param in name "a_not_doc" explicit_type "bool"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} ${p4}, ${t5} ${p5}${v5}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Parse a_artifact's properties and description (iff a_not_doc) looking for 
include directories  and linker options. Append what is found to a_hdr, 
a_link and a_flag."
      end

      operation 194089 "get_artifact"
	stereotype "unique_ptr"
	class_operation protected return_type class_ref 147113 // compound_artifact
	nparams 2
	  param inout name "a_loc" type class_ref 132393 // location
	  param in name "a_name" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}std::unique_ptr< ${type} > ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Find an artifact with a_name in a_loc. If not found then create and
initialise the document.

!!Warning!! returns nul iff a_loc.packages.empty"
      end

      operation 176681 "merge_string_list"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "a_list" explicit_type "unistr"
	  param in name "a_addition" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "The effect of this method is to convert the contents of a_list and a_addition
into lists of tokens.  These lists are merged, removing duplicate items, and
the new list is assigned back to a_list. Either list may be empty."
      end

      operation 192425 "section"
	class_operation public explicit_return_type "unistr"
	nparams 2
	  param in name "a_section" explicit_type "unistr"
	  param in name "a_desc" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "This method finds the substring in a_desc between \"${\"a_section\"}\"
and the next \"${\".  If no \"${\" is found then nothing is returned. Used
to get style specific data from target artifact description fields."
      end

      operation 244137 "root_dir"
	const public return_type class_ref 145833 // pathcmp
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}const ${type} &${name}${(}${)}${const}${volatile}${abstract}
{
  return *root_dir_.get ();
}
"
	
	
	
	
	comment "Get the projects root directory (if set)"
      end

      operation 244265 "root_dir"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_path" type class_ref 145833 // pathcmp
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}
{
  BUTTER_ENSURE (! ${p0}.path ().isEmpty ()
  , \"<p><b>Program error:</b> Attempt to set project root directory to an empty path.</p>\");
  root_dir_ = std::unique_ptr < pathcmp >(new pathcmp (${p0}));
}
"
	
	
	
	
	comment "Set the project's root directory"
      end

      operation 244393 "target_NAME"
	const public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${abstract}
{
  return target_NAME_;
}
"
	
	
	
	
	comment "Version of target name for variables (generally
all uppercase version of target.)"
      end

      operation 244521 "target_NAME"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${abstract}
{
  target_NAME_ = to_target_NAME (a_target);
}"
	
	
	
	
	comment "Set the version of target name to value created by to_target_NAME"
      end

      operation 244777 "to_target_NAME"
	class_operation public explicit_return_type "unistr"
	nparams 1
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${abstract};"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}{
  ${body}
}
"
	
	
	
	
	comment "Create the version of target name for variables (generally
all uppercase version of location + target.)"
      end

      operation 249257 "base_generator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}explicit ${name}${(}${)}${volatile};
"
	cpp_def "${inline}${class}::${name}${(}${)}${volatile} 
:  individual_obj_()
, other_target_type_()
, root_dir_( new pathcmp() )
, target_NAME_()
{}
"
	
	
	
	
      end

      operation 249385 "~base_generator"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile};"
	cpp_def "${inline}${class}::${name}${(}${)}${volatile} 
{}
"
	
	
	
	
      end
    end

    class 133545 "bjam_generator"
      visibility package 
      nactuals 1
      actual class class_ref 150697 // generator
        rank 0 value class_ref 133545 // bjam_generator
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};

${inlines}
"
      java_decl "${comment}${public}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Build file generator for boost-jam.

This is the build system of choice for C++-only projects that use
the Boost library."
      classrelation 162985 // <realization>
	relation 162217 -_-|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 162985 // <realization>
	  b parent class_ref 150697 // generator
      end

      extra_member 130345 "friend generator"
	
	cpp "// Make out parent a friend.
friend class generator<bjam_generator>;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 183472 // style (<directional composition>)
	relation 183344 *-->
	  a role_name "style" multiplicity "1" init_value "( \"#\", \"\", \"##END:\", \"\", \"##START:\", \"\", \"boost\", &butter::bjam_generator::create )" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 183472 // style (<directional composition>)
	  b parent class_ref 159017 // basic_style
      end

      attribute 164905 "build_file_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"Jamfile\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default leaf filename for the current style"
      end

      attribute 165033 "build_file_sysname"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"Jamroot\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default leaf filename for the current style"
      end

      attribute 150057 "rules_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"local.jam\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The name of the project rules file."
      end

      attribute 150185 "default_rules"
	class_attribute const_attribute public explicit_type "str"
	init_value "{ \"#\\n\"
, \"# local.jam\\n\"
, \"#\\n\"
, \"# Set constants for installation paths\\n\"
, \"import path ;\\n\"
, \"path-constant INSTALL_PREFIX : installdir ;\\n\"
, \"constant BINDIR : bin ; # User programs\\n\"
, \"constant DATADIR : share ; # Private libraries and static data\\n\"
, \"constant DOCDIR : [ path.join share doc ] ;\\n\"
, \"constant HTMLDIR : [ path.join share html ] ;\\n\"
, \"constant INCDIR : include ;\\n\"
, \"constant LIBDIR : bin ; # Shared libraries\\n\"
, \"constant MANDIR  : [ path.join share man1 ] ;\\n\"
, \"\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}[]${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This is the default contents of a the rules file (local.jam) If a 
document artifact with name 'local.jam' is not present when 
butter is executed with \\@style='boost' then one will be created
using this string.
"
      end

      attribute 180521 "is_other_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Is this an alternate/other library target?"
      end

      attribute 135337 "project_name_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This name of the project"
      end

      extra_member 154672 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 153385 "bjam_generator"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${name}${(}${)}${volatile}
: is_other_ ()
, project_name_ ()
{}
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
      end

      operation 153513 "~bjam_generator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile} throw () {}
"
	
	
	
	
      end

      operation 153257 "bjam_generator"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 133545 // bjam_generator
	cpp_decl "    ${comment}${name}${(}const ${t0} &${)}${volatile} = delete;
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment "no copy"
      end

      operation 182576 "bjam_generator"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 133545 // bjam_generator
	cpp_decl "    ${comment}${name}${(}${t0} && ${p0}${)}${volatile} = delete;
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment "no copy"
      end

      operation 153129 "operator="
	private return_type class_ref 133545 // bjam_generator
	nparams 1
	  param in name "source" type class_ref 133545 // bjam_generator
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}const ${t0} &${)}${const}${volatile}${abstract};"
	
	
	
	
	comment "no assign"
      end

      operation 199977 "create"
	stereotype "unique_ptr"
	class_operation public return_type class_ref 146985 // base_generator
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}std::unique_ptr< ${type} > ${name}${(}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${)}${const}${volatile}${staticnl}
{
  std::unique_ptr< ${type} > Result (new bjam_generator);
  return Result;
}
"
	
	
	
	
	comment "Create bjam generator object.s"
      end

      extra_member 154800 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 212649 "assoc_library"
	private explicit_return_type "void"
	nparams 5
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param out name "a_includes" explicit_type "unistr"
	  param out name "a_ldflags" explicit_type "unistr"
	  param out name "a_cflags" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "This method scans a_target for its direct sources and
direct and indirect dependencies. "
      end

      operation 212777 "assoc_source"
	force_body_gen private explicit_return_type "void"
	nparams 7
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_filename" explicit_type "unistr"
	  param in name "a_basename" explicit_type "unistr"
	  param in name "a_src_inc" explicit_type "unistr"
	  param in name "a_src_flags" explicit_type "unistr"
	  param in name "a_isdoc" explicit_type "bool"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "This method scans a_target for its direct sources and
direct and indirect dependencies. "
      end

      operation 153001 "descendent_link"
	private explicit_return_type "void"
	nparams 3
	  param inout name "a_art" type class_ref 147113 // compound_artifact
	  param inout name "a_sys" type class_ref 147113 // compound_artifact
	  param in name "a_loc" type class_ref 132393 // location
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Write the Jamfile descent links for a_location."
      end

      operation 212905 "end_target"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 7
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_include" explicit_type "unistr"
	  param in name "a_ldflags" explicit_type "unistr"
	  param in name "a_cflags" explicit_type "unistr"
	  param in name "a_compiler" explicit_type "unistr"
	  param in name "a_type" type class_ref 154281 // target_type
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${v6}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${staticnl}{
${body}}
"
	preserve_java_body_indent java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	preserve_php_body_indent 
	preserve_python_body_indent 
	
	comment "This method scans a_target for its direct sources and
direct and indirect dependencies. "
      end

      operation 152361 "external_target"
	private explicit_return_type "void"
	nparams 3
	  param in name "a_current" type class_ref 132393 // location
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param inout name "a_sys" type class_ref 147113 // compound_artifact
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Write the external a_target at a_location. 

* searches system_artifact_ for an existing target
* new target sections are add to system_artifact_"
      end

      operation 152745 "initialise"
	private explicit_return_type "void"
	nparams 3
	  param inout name "a_base" type class_ref 132393 // location
	  param in name "a_project" type class_ref 7553 // UmlItem
	  param inout name "a_sys" type class_ref 147113 // compound_artifact
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Write extra details to the top-level build file.

"
      end

      operation 213033 "install_target"
	private explicit_return_type "void"
	nparams 5
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_loc_var" explicit_type "unistr"
	  param in name "a_type" type class_ref 139305 // install_type
	  param in name "a_isdoc" explicit_type "bool"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Create an install target."
      end

      operation 212265 "start_target"
	private explicit_return_type "void"
	nparams 5
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_build_file" explicit_type "unistr"
	  param in name "a_compiler" explicit_type "unistr"
	  param in name "a_type" type class_ref 154281 // target_type
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${v4}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "This method scans a_target for its direct sources and
direct and indirect dependencies. "
      end
    end

    class 137001 "butter_constants"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};

${inlines}
"
      java_decl "${comment}${public}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Static strings for the butter project.
"
      attribute 150569 "bindir_value"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"BINDIR\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Then label of the install target binary directory."
      end

      attribute 141353 "buildfile_value"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"buildfile\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Artifacts with the document stereotype that contain this
string are considered to be templates"
      end

      attribute 160809 "BUTTER_VERSION"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "\"Butter version 1.2beta.\" BUTTER_SVN_VERSION_"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current program version string"
      end

      attribute 141225 "butter_base_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter base\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "User property name:
* indicates the relationship between the package and the root directory set in C++ settings.
* only used if present on the top-level project"
      end

      attribute 144041 "butter_build_dir_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter build-dir\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "User property name:
* indicates where the project should be compiled.  This is not supported
on all build platforms.
* only useful on the project package."
      end

      attribute 142377 "butter_buildfile_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter buildfile\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "User property name:
* indicates the name of a buildfile to include for the current library.
* used with 'library' artifacts which also have butter_project_name property to indicate
they are external projects."
      end

      attribute 169897 "butter_compiler_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter compiler\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "User property name:
* indicates the name of a compiler tag/variable to use with this artifact."
      end

      attribute 143401 "butter_flags_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter flags\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "User property name:
* indicates c++flags to use for the current target artifact. This property is automatically 
inherited from parent objects if not overriden
* only used on target artifacts (library or executable artifacts)"
      end

      attribute 150441 "butter_install_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter install\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The name of the install property"
      end

      attribute 143273 "butter_ldflags_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter ldflags\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "User property name:
* indicates ldflags to use for the current target artifact (\\see link_label). This property is 
automatically inherited from parent objects if not overriden
* only used on target artifacts (library or executable artifacts)"
      end

      attribute 143913 "butter_lib_type_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter type\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "User property name:
* indicates whether the library artifact is static or dynamic. will have value 
shared_value or static_value. This property is automatically inherited from 
parent objects if not overriden.
* only used on library target artifacts."
      end

      attribute 171945 "butter_log_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter log-level\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "User property name:
* indicates how much information to print:
0 = (default) warning and error messages
1 = as for 0 and information messages
2 = as for 1 and debugging information"
      end

      attribute 143529 "butter_other_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter other\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "User property name
* Indicates that a library artifact should be built as another target type. 
For jam based builds this is used directly as the target-type name, for make
based builds the buidl rule will replace \"$(CCC)\" with \"$(VALUE)\" (in 
uppercase)
* For document artifacts if the property value is 'nowrite' then the document is not written
to the filesystem.
* This property only used on library artifact targets."
      end

      attribute 143145 "butter_include_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter include\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "User property name:
* indicates extra include directories for the current target artifact. The value should be 
a a list of directory names (\\see header_label)
* only used on target artifacts (library or executable artifacts)"
      end

      attribute 141481 "butter_project_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter project\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "User property name:
* indicates the artifact represents an object from an external project. The property value is the name of the external project.
* only used if present on artifacts with the library stereotype

\\see butter_buildfile_name"
      end

      attribute 142761 "butter_style_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter style\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "User property name:
* indicates the style of build system/files to create, defaults to 'boost'
* only used if present on the top-level project"
      end

      attribute 150825 "butter_version_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter version\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Property name for the project version."
      end

      attribute 139945 "document_stereotype"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"document\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The stereotype name for document artifacts."
      end

      attribute 141737 "executable_stereotype"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"executable\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The stereotype name for executable artifacts."
      end

      attribute 148905 "flag_label"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"FLAGS\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The  label of a line of std flags in a 'generic' description section. 
eg:

FLAGS = -DHAVE_ALLOCA"
      end

      attribute 141993 "generic_section"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"generic\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The label of a 'generic' section of an artifact description."
      end

      attribute 142121 "header_label"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"HDR\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The label of a line of include directories in a 'generic' description section. This
list should contain directorie names without the \"-I\" include flag. The \"-I' will be
added when necessary. eg:

HDR=/dir1 /dir2"
      end

      attribute 150313 "libdir_value"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"LIBDIR\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The label of the install target library directory var."
      end

      attribute 141609 "library_stereotype"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"library\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The stereotype name for library artifacts."
      end

      attribute 142249 "link_label"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"LINK\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The  label of a line of link flags in a 'generic' description section. 
eg:

LINK = -L/my/path -lmylib"
      end

      attribute 150697 "no_install_value"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"NONE\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of he \"butter install\" property to indicate that the target 
should not be installed."
      end

      attribute 142633 "section_prefix"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"butter_\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The prefix for the beginning of section labels that
might be found in artifact descriptions."
      end

      attribute 143785 "shared_value"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"shared\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Property value for \"butter_lib_type\" property. Indicates that
library targets will be shared."
      end

      attribute 141865 "source_stereotype"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"source\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The stereotype name for source artifacts."
      end

      attribute 143657 "static_value"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"static\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Property value for \"butter_lib_type\" property. Indicates that
library targets will be static."
      end

      attribute 150953 "version_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"version\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Generic property name for the project version."
      end

      attribute 163241 "version_label"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"version\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Build-file section name for the project version."
      end

      attribute 163369 "date_label"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"date\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Build file section name for the date."
      end

      attribute 163497 "preamble_label"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"preamble\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Build file section name for the preamble."
      end

      attribute 163625 "close_label"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"close\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Build file section name for the closing section."
      end

      attribute 163753 "target_label"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"target\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Build file section label for a target section."
      end

      attribute 193577 "app_data_env_var"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "
#ifdef _WIN32
\"APPDATA\"
#else
\"HOME\"
#endif
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Build file section label for a target section."
      end

      attribute 193705 "app_data_subdir_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "
#ifdef _WIN32
\"Butter\"
#else
\".butter\"
#endif
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Build file section label for a target section."
      end
    end

    class 157737 "cmake_generator"
      visibility package 
      nactuals 1
      actual class class_ref 150697 // generator
        rank 0 value class_ref 157737 // cmake_generator
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};

${inlines}
"
      java_decl "${comment}${public}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Build file generator for cmake

Assumes external library xxx will set variables:
XXX_INCLUDE_DIRS
XXX_COMPILE_FLAGS
XXX_LINK_LIBRARIES

TODO:
need to root relative files with CMAKE_SOURCE_DIR
need to convert $(..) to ${..}
need to convert $(OUTPUTDIR) to CMAKE_BINARY_DIR

Additionally external library xxx without a local buildfile can be
found using:
find_package(Xxx)

\\cond xdoc
The CMake style does not recognised round brackets, \"(\" and \")\", as
variable delimiters.  The style generator will replace thes with \"{\" and \"}\"
in the generated files.

CMake automatically prepends \"lib\" to library targets on some platforms.
This plugout turns off this automatic behaviour for library targets.
\\endcond xdoc"
      classrelation 170409 // <realization>
	relation 169641 -_-|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 170409 // <realization>
	  b parent class_ref 150697 // generator
      end

      extra_member 146345 "friend generator"
	
	cpp "// Make out parent a friend.
friend class generator<cmake_generator>;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 182960 // style (<directional composition>)
	relation 182832 *-->
	  a role_name "style" multiplicity "1" init_value "( \"#\", \"\", \"##END:\", \"\", \"##START:\", \"\", \"cmake\", &butter::cmake_generator::create )" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 182960 // style (<directional composition>)
	  b parent class_ref 159017 // basic_style
      end

      attribute 191145 "build_file_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"CMakeLists.txt\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default leaf filename for the current style"
      end

      attribute 191273 "build_file_sysname"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(cmake_generator::build_file_name)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type}& ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default leaf filename for the current style"
      end

      attribute 196393 "cmake_minimum_required_"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"cmake_minimum_required(VERSION 2.6)\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Identify the minimum cmake version this generator supports."
      end

      attribute 191913 "default_rules"
	class_attribute const_attribute public explicit_type "str"
	init_value "{ \"#\\n\"
, \"# local.cmake\\n\"
, \"#\\n\"
, \"set_directory_properties(PROPERTIES COMPILE_DEFINITIONS_DEBUG DEBUG=1)\\n\"
, \"set_directory_properties(PROPERTIES COMPILE_DEFINITIONS DEBUG=0)\\n\"
, \"#############################\\n\"
, \"##  Default install locations\\n\"
, \"#############################\\n\"
, \"set (CMAKE_INSTALL_PREFIX installdir)\\n\"
, \"set (BINDIR bin)\\n\"
, \"set (DATADIR share)\\n\"
, \"set (DOCDIR share/doc)\\n\"
, \"set (HTMLDIR share/html)\\n\"
, \"set (INCLUDEDIR include)\\n\"
, \"set (LIBDIR bin)\\n\"
, \"set (MANDIR share/man)\\n\"
, \"\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}[]${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This is the default contents of a the rules file (M_sys.mak) If a 
document artifact with name 'M_sys.mak' is not present when 
butter is executed with \\@style='cmake' then one will be created
using this string.
"
      end

      attribute 192809 "rules_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"local.cmake\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The name of the rules file."
      end

      attribute 193065 "lib_set_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Set of included libraries"
      end

      attribute 193193 "project_name_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The top-level package name"
      end

      attribute 194985 "depend_set_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 196137 "is_static_type_"
	private explicit_type "bool"
	init_value "false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "When type is library, is this a static library?"
      end

      attribute 196265 "language_set_"
	private explicit_type "QStringList"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "List of languages to include (excluding C++)"
      end

      attribute 196521 "sys_buildfile_"
	private type class_ref 147113 // compound_artifact
	init_value "NULL"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type}* ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 155056 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 231209 "cmake_generator"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${name}${(}${)}${volatile};
"
	cpp_def "${inline}${class}::${name}${(}${)}
: lib_set_ ()
, project_name_ ()
, depend_set_ ()
, is_static_type_ (false)
, language_set_ ()
, sys_buildfile_ ()
{}
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment "Create a generator from the top-level a_project

\\pre a_project.parent = nul"
      end

      operation 231465 "cmake_generator"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 157737 // cmake_generator
	cpp_decl "    ${comment}${name}${(}const ${t0} &${)}${volatile} = delete;
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment "no copy"
      end

      operation 182704 "cmake_generator"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 157737 // cmake_generator
	cpp_decl "    ${comment}${name}${(}${t0} && ${p0}${)}${volatile} = delete;
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment "no copy"
      end

      operation 231849 "operator="
	private return_type class_ref 157737 // cmake_generator
	nparams 1
	  param in name "source" type class_ref 157737 // cmake_generator
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}const ${t0} &${)}${const}${volatile}${abstract} = delete;"
	
	
	
	
	comment "no assign"
      end

      operation 231337 "~cmake_generator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile} throw () {}
"
	
	
	
	
      end

      operation 230697 "create"
	stereotype "unique_ptr"
	class_operation public return_type class_ref 146985 // base_generator
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}std::unique_ptr< ${type} > ${name}${(}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${)}${const}${volatile}${staticnl}
{
  std::unique_ptr< ${type} > Result (new cmake_generator);
  return Result;
}
"
	
	
	
	
	comment "Create bjam generator object.s"
      end

      extra_member 154928 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 230441 "assoc_library"
	private explicit_return_type "void"
	nparams 5
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param out name "a_includes" explicit_type "unistr"
	  param out name "a_ldflags" explicit_type "unistr"
	  param out name "a_cflags" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** This method a library association to the current target entry for a_target.

Responsibilites
- Properties
 - associated includes, ldflags, cflags"
      end

      operation 230569 "assoc_source"
	private explicit_return_type "void"
	nparams 7
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_filename" explicit_type "unistr"
	  param in name "a_basename" explicit_type "unistr"
	  param in name "a_src_inc" explicit_type "unistr"
	  param in name "a_src_flags" explicit_type "unistr"
	  param in name "a_isdoc" explicit_type "bool"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** This method sets up object for creating a new target entry for a_target.

Responsibilites
- Properties
 - doc/source: includes, ldflags, cflags
 - compiler
- Other
 - set compilation for individual "
      end

      operation 230825 "descendent_link"
	private explicit_return_type "void"
	nparams 3
	  param inout name "a_art" type class_ref 147113 // compound_artifact
	  param inout name "a_sys" type class_ref 147113 // compound_artifact
	  param in name "a_loc" type class_ref 132393 // location
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Write the Jamfile descent links for a_location to a_os"
      end

      operation 230953 "end_target"
	private explicit_return_type "void"
	nparams 7
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_include" explicit_type "unistr"
	  param in name "a_ldflags" explicit_type "unistr"
	  param in name "a_cflags" explicit_type "unistr"
	  param in name "a_compiler" explicit_type "unistr"
	  param in name "a_type" type class_ref 154281 // target_type
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** This method finalises the target entry for a_target.

NOTE: \"Other\" target requires WORKING_DIRECTORY to allow 
finding of source files. Alternatively, this could be
avoided by prepending ${CMAKE_CURRENT_SOURCE_DIR} to each 
source file. Currently WORKING_DIRECTORY is chosen as
it was felt that it is more obvious to the user and less
verbose."
      end

      operation 231081 "external_target"
	private explicit_return_type "void"
	nparams 3
	  param in name "a_current" type class_ref 132393 // location
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param inout name "a_sys" type class_ref 147113 // compound_artifact
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${abstract} {}
"
	
	
	
	
	comment "In this style external targets are not used, external library 
data is written in local-targets directly where it is 
referenced."
      end

      operation 231593 "initialise"
	private explicit_return_type "void"
	nparams 3
	  param inout name "a_base" type class_ref 132393 // location
	  param in name "a_project" type class_ref 7553 // UmlItem
	  param inout name "a_sys" type class_ref 147113 // compound_artifact
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Write extra details to the top-level build file. "
      end

      operation 231721 "install_target"
	private explicit_return_type "void"
	nparams 5
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_loc_var" explicit_type "unistr"
	  param in name "a_type" type class_ref 139305 // install_type
	  param in name "a_isdoc" explicit_type "bool"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** Create an install target.

Responsibilites
- Properties
 - install (library, executable and document)"
      end

      operation 245929 "mangle"
	public explicit_return_type "unistr"
	nparams 1
	  param in name "input" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Convert input string into CMake allowed string.  This
means converting () to {} and OUTPUTDIR to 
CMAKE_BINARY_DIR"
      end

      operation 233385 "preamble"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Update the main buildfile's project entry.  This is called
in initialise() and when adding a new compiler language."
      end

      operation 232233 "start_target"
	private explicit_return_type "void"
	nparams 5
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_build_file" explicit_type "unistr"
	  param in name "a_compiler" explicit_type "unistr"
	  param in name "a_type" type class_ref 154281 // target_type
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${v4}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** This method sets up object for creating a new target entry for a_target.

Responsibility
- Properties
 - compiler
 - include, ldflags, cflags
 - buildfile
 - type (library)
- Other
 - shared lib
 - static lib
 - executable
 - non-standard target"
      end
    end

    class 147113 "compound_artifact"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};

${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An artifact that is made up of multiple-parts. It exposes an ordered list of 
pair< string, string > that represent the parts of the artifact. These can
be unlabelled or labelled depending on the content of the first entry in the
pair.

* labelled parts are enclosed in \"start_phrase_\"/\"end_phrase_\" markers.
* unlabelled parts are any non-whitespace outside part markers.

Standard build-file form is a compound_artifact with something like
[version] version information
[date] date
[preamble] ...
[target:....] ...
[close] ...

* destructor writes parts to artifact."
      classrelation 155696 // <dependency>
	relation 155568 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 155696 // <dependency>
	  b parent class_ref 159017 // basic_style
      end

      classrelation 154921 // <dependency>
	relation 154153 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 154921 // <dependency>
	  b parent class_ref 137001 // butter_constants
      end

      classrelation 176297 // <dependency>
	relation 175529 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 176297 // <dependency>
	  b parent class_ref 145833 // pathcmp
      end

      classrelation 155177 // <dependency>
	relation 154409 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 155177 // <dependency>
	  b parent class_ref 148393 // style
      end

      class 148265 "string_pair_t"
	visibility package stereotype "typedef" explicit_base_type "unistr"
	cpp_decl "${comment}typedef std::pair< ${type}, ${type} > ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 153129 "value_type"
	visibility package stereotype "typedef" explicit_base_type "unistr"
	cpp_decl "${comment}typedef std::pair< ${type}, string_pair_t > ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      attribute 159401 "artifact"
	public type class_ref 6913 // UmlArtifact
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reference to the object this compound artifact is representing."
      end

      attribute 161321 "close"
	public type class_ref 148265 // string_pair_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The close texts"
      end

      attribute 161065 "date"
	public type class_ref 148265 // string_pair_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The date texts"
      end

      attribute 161449 "end"
	public explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Any text at the end of the document."
      end

      attribute 161193 "preamble"
	public type class_ref 148265 // string_pair_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The preamble texts"
      end

      attribute 199081 "style_"
	const_attribute private type class_ref 159017 // basic_style
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type}& ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "reference to style object"
      end

      attribute 159017 "targets_"
	private type class_ref 148265 // string_pair_t
	multiplicity "*"
	stereotype "dict"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The artifact's target parts."
      end

      attribute 173097 "target_order_"
	private explicit_type "unistr"
	multiplicity "*"
	stereotype "valuelist"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The list of key in encounter-order."
      end

      attribute 160937 "version"
	public type class_ref 148265 // string_pair_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The version texts."
      end

      operation 236329 "compound_artifact"
	public explicit_return_type ""
	nparams 1
	  param inout name "a_art" type class_ref 6913 // UmlArtifact
	cpp_decl "    ${comment}${name}${(}${t0} & ${p0}${)}${volatile};
"
	cpp_def "${inline}${class}::${name}${(}${t0} & ${p0}${)}${volatile} 
${body}
"
	
	
	
	
	comment "Construct and initialise object from a_art"
      end

      operation 195753 "compound_artifact"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_art" type class_ref 6913 // UmlArtifact
	  param in name "a_style" type class_ref 159017 // basic_style
	cpp_decl "    ${comment}${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile};
"
	cpp_def "${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile} 
${body}
"
	
	
	
	
	comment "Construct and initialise object from a_art"
      end

      operation 195881 "~compound_artifact"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile};
"
	cpp_def "${inline}${class}::${name}${(}${)}${volatile} 
{
${body}
}
"
	
	
	
	
      end

      operation 196009 "compound_artifact"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 147113 // compound_artifact
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${)}${volatile} = delete;
"
	
	
	
	
	comment "no copy"
      end

      operation 193065 "deserialise"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_is" type class_ref 163113 // QTextIStream
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Reset object and read-in a new artifact.

The version, date, preamble and close are read as-is. Unlabelled sections preceding
targets are read, but the content of the target section is left blank."
      end

      operation 198697 "has_target"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "a_label" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Check for the existance of a target."
      end

      operation 195241 "merge"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_art" type class_ref 6913 // UmlArtifact
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Merges the content of a_art into this artifact.

Merge process:
* Create temporary compound_artifact from a_art.
* If any labelled sections exist in both artifacts then the content 
from a_art is appended. If an unlabelled section exists before the
labelled section then is is appended to any preceding unlabelled
section or inserted if no existing labelled section exists.
* If any sections remain then they are appended inorder to this 
artifact. "
      end

      operation 196137 "operator="
	private return_type class_ref 147113 // compound_artifact
	nparams 1
	  param in name "source" type class_ref 147113 // compound_artifact
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${abstract} = delete;
"
	
	
	
	
	comment "no assign"
      end

      operation 196265 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Emptys any target, preamble and close labelled sections"
      end

      operation 192937 "serialise"
	const public explicit_return_type "void"
	nparams 1
	  param out name "a_os" type class_ref 162985 // QTextOStream
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Output the parts into a_os"
      end

      operation 198057 "target"
	public return_type class_ref 148265 // string_pair_t
	nparams 1
	  param in name "a_label" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Get a reference to the text for target with a_label. Insert if necessary"
      end
    end

    class 168880 "compound_document"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};

${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A compound document is used to manage documents that
contain user and auto-generated content. The auto-generated
content contains information about a build target, the
user content is something manually added by the user,
possibly build information for subsequent targets. When
initially generated the targets will have the following
order: (\"version\", \"date\", \"preamble\", [build targets]*,
\"close\" {end}). The {end} target is a special unnamed
pseudo-target that contains any user text added after the
generated text. The user can manually reorder the build
target sequence, though the order of \"version\", \"date\",
\"preamble\" and \"close\" are fixed. The object maintains the
information as a list of string pairs. The first element
is any text manually added by the user and the second
element is the auto generated text.

NOTES:

  * If the user supplies an artifact with the appropriate
  name before a build generator is run, any text in the
  document will be added between the \"date\" and \"preamble\"
  sections.

  * (auto-generted) parts are enclosed in \"start_phrase_\" /
  \"end_phrase_\" markers that are used to parse the document
  back into a compound document.

  * (user) parts are any non-whitespace outside the
  markers. This information is stored with the following
  auto-generated part, except when there is no following
  target in which case it is the {end} text.

Standard build-file form is a compound_document with the
following initial order

[version] generator version information
[date] generation date
[preamble] ... (optional)
[target:....]* ...
[close] ...  (optional)
{end}  (optional)


"
      classrelation 204976 // <dependency>
	relation 204848 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 204976 // <dependency>
	  b parent class_ref 159017 // basic_style
      end

      classrelation 205104 // <dependency>
	relation 204976 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 205104 // <dependency>
	  b parent class_ref 137001 // butter_constants
      end

      classrelation 205232 // <dependency>
	relation 205104 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 205232 // <dependency>
	  b parent class_ref 145833 // pathcmp
      end

      classrelation 205360 // <dependency>
	relation 205232 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 205360 // <dependency>
	  b parent class_ref 148393 // style
      end

      class 175664 "element_t"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit}
{
${members}
};

${inlines}
"
	java_decl "${comment}${public}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl "${comment}${final}${visibility}${abstract}class ${name}${extends}${implements} {
${members}}
"
	python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl "${comment}struct ${name} {
${members}};
"
	explicit_switch_type ""
	
	attribute 148784 "label"
	  public explicit_type "unistr"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The element's label"
	end

	attribute 148912 "user"
	  public explicit_type "unistr"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The element's user-added text"
	end

	attribute 149040 "value"
	  public explicit_type "unistr"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The element's generated text"
	end

	operation 235824 "element_t"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${name}${(}${)}${volatile} = default;
"
	  
	  
	  
	  
	end

	operation 236720 "element_t"
	  public explicit_return_type ""
	  nparams 3
	    param in name "a_label" explicit_type "unistr"
	    param in name "a_user" explicit_type "unistr"
	    param in name "a_value" explicit_type "unistr"
	  cpp_decl "    ${comment}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}
: label( ${p0} )
, user( ${p1} )
, value( ${p2} )
{}
"
	  
	  
	  
	  
	end

	operation 235952 "~element_t"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile} = default;
"
	  
	  
	  
	  
	end

	operation 236080 "element_t"
	  stereotype "move"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "source" type class_ref 175664 // element_t
	  cpp_decl "    ${comment}${name}${(}${t0} && ${p0}${)}${volatile}
: label( std::move( ${p0}.label ) )
, user( std::move( ${p0}.user ) )
, value( std::move( ${p0}.value ) )
{}

"
	  
	  
	  
	  
	end

	operation 236208 "element_t"
	  stereotype "copy"
	  public explicit_return_type ""
	  nparams 1
	    param in name "source" type class_ref 175664 // element_t
	  cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${)}${volatile}
: label( ${p0}.label )
, user( ${p0}.user )
, value( ${p0}.value )
{}"
	  
	  
	  
	  
	end

	operation 236336 "operator="
	  public return_type class_ref 175664 // element_t
	  nparams 1
	    param in name "source" type class_ref 175664 // element_t
	  cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	  
	  
	  
	  
	end

	operation 236464 "swap"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "other" type class_ref 175664 // element_t
	  cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${abstract}
{
  std::swap( label, ${p0}.label );
  std::swap( user, ${p0}.user );
  std::swap( value, ${p0}.value );
}
"
	  
	  
	  
	  
	end
      end

      attribute 141360 "close_"
	private type class_ref 175664 // element_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The close texts (optional)"
      end

      attribute 141488 "date_"
	private type class_ref 175664 // element_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The date texts"
      end

      attribute 141616 "end_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Any user text at the end of the document."
      end

      attribute 141744 "preamble_"
	private type class_ref 175664 // element_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The preamble texts"
      end

      attribute 142000 "targets_"
	private type class_ref 175664 // element_t
	multiplicity "*"
	stereotype "valuevector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The artifact's target parts."
      end

      attribute 142256 "version_"
	private type class_ref 175664 // element_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The version texts."
      end

      extra_member 162864 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 206384 "compound_document"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${name}${(}${)}${volatile};
"
	cpp_def "${inline}${class}::${name}${(}${)}${volatile} 
${body}
"
	
	
	
	
	comment "Construct and initialise object from a_art"
      end

      operation 206640 "~compound_document"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile} {}
"
	
	
	
	
      end

      operation 206768 "compound_document"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 168880 // compound_document
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${)}${volatile}
: close_( ${p0}.close_ )
, date_( ${p0}.date_ )
, end_( ${p0}.end_ )
, preamble_( ${p0}.preamble_ )
, targets_( ${p0}.targets_ )
, version_( ${p0}.version_ )
{}"
	
	
	
	
      end

      operation 207792 "compound_document"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 168880 // compound_document
	cpp_decl "    ${comment}${name}${(}${t0} && ${p0}${)}${volatile}
: close_( std::move( ${p0}.close_ ) )
, date_( std::move( ${p0}.date_ ) )
, end_( std::move( ${p0}.end_ ) )
, preamble_( std::move( ${p0}.preamble_ ) )
, targets_( std::move( ${p0}.targets_ ) )
, version_( std::move( ${p0}.version_ ) )
{}
"
	
	
	
	
      end

      operation 236592 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 168880 // compound_document
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${abstract}
{
  std::swap( close_, ${p0}.close_ );
  std::swap( date_, ${p0}.date_ );
  std::swap( end_, ${p0}.end_ );
  std::swap( preamble_, ${p0}.preamble_ );
  std::swap( targets_, ${p0}.targets_ );
  std::swap( version_, ${p0}.version_ );
}
"
	
	
	
	
	comment "no copy"
      end

      operation 207280 "operator="
	public return_type class_ref 168880 // compound_document
	nparams 1
	  param in name "source" type class_ref 168880 // compound_document
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract}
{
  this->swap( ${p0} );
  return *this;
}"
	
	
	
	
      end

      extra_member 169520 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 207664 "add_target"
	public explicit_return_type "void"
	nparams 3
	  param in name "a_label" explicit_type "unistr"
	  param in name "a_prevalue" explicit_type "unistr"
	  param in name "a_value" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Insert a new target into the document, with the
given user and value text.

\\pre not has_target( a_label )"
      end

      operation 229296 "add_target_entry"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_label" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Insert a new blank target into the document.

\\pre not has_target( a_label )"
      end

      operation 221616 "close"
	const public return_type class_ref 175664 // element_t
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->close_;
}
"
	
	
	
	
	comment "Get the document close element (precedes end_text)."
      end

      operation 221360 "date"
	const public return_type class_ref 175664 // element_t
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->date_;
}
"
	
	
	
	
	comment "Get the date element."
      end

      operation 229040 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->targets_.isEmpty();
}
"
	
	
	
	
      end

      operation 221872 "end_text"
	const public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->end_;
}
"
	
	
	
	
	comment "Get any user supplied information at the end of the document"
      end

      operation 214320 "get_target"
	const public return_type class_ref 175664 // element_t
	nparams 1
	  param in name "a_label" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}const ${type}& ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}const ${type}& ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Get target element with a_label.

\\pre has_target( a_label ) [or return an empty element]"
      end

      operation 207024 "has_target"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "a_label" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Check for the existance of a target."
      end

      operation 222000 "preamble"
	const public return_type class_ref 175664 // element_t
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->preamble_;
}
"
	
	
	
	
	comment "Get the preamble element."
      end

      operation 250544 "set_close_user"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_value" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract}
{
  std::swap( this->close_.user, ${p0} );
}
"
	
	
	
	
	comment "Set value data of the close element."
      end

      operation 250672 "set_close_value"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_value" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract}
{
  std::swap( this->close_.value, ${p0} );
}
"
	
	
	
	
	comment "Set value data of the close element."
      end

      operation 250928 "set_date_user"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_value" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract}
{
  std::swap( this->date_.user, ${p0} );
}
"
	
	
	
	
	comment "Set value data of the close element."
      end

      operation 250800 "set_date_value"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_value" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract}
{
  std::swap( this->date_.value, ${p0} );
}
"
	
	
	
	
	comment "Set value data of the close element."
      end

      operation 251568 "set_end_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_value" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract}
{
  std::swap( this->end_, ${p0} );
}
"
	
	
	
	
	comment "Set text at the end fo the document"
      end

      operation 251184 "set_preamble_user"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_value" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract}
{
  std::swap( this->preamble_.user, ${p0} );
}
"
	
	
	
	
	comment "Set value data of the close element."
      end

      operation 251056 "set_preamble_value"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_value" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract}
{
  std::swap( this->preamble_.value, ${p0} );
}
"
	
	
	
	
	comment "Set value data of the close element."
      end

      operation 236848 "set_target"
	public explicit_return_type "void"
	nparams 3
	  param in name "a_label" explicit_type "unistr"
	  param in name "a_user" explicit_type "unistr"
	  param in name "a_value" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Set element data of an existing target.

\\pre has_target( a_label )"
      end

      operation 214448 "set_target_user"
	public explicit_return_type "void"
	nparams 2
	  param in name "a_label" explicit_type "unistr"
	  param in name "a_preamble" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Set user text of an existing target.

\\pre has_target( a_label )"
      end

      operation 236976 "set_target_value"
	public explicit_return_type "void"
	nparams 2
	  param in name "a_label" explicit_type "unistr"
	  param in name "a_value" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Set element data of an existing target.

\\pre has_target( a_label )"
      end

      operation 251440 "set_version_user"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_value" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract}
{
  std::swap( this->version_.user, ${p0} );
}
"
	
	
	
	
	comment "Set value data of the close element."
      end

      operation 251312 "set_version_value"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_value" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract}
{
  std::swap( this->version_.value, ${p0} );
}
"
	
	
	
	
	comment "Set value data of the close element."
      end

      operation 237104 "target_at"
	const public return_type class_ref 175664 // element_t
	nparams 1
	  param in name "idx" explicit_type "uint"
	cpp_decl "    ${comment}${static}${virtual}const ${type}& ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}const ${type}& ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Get target at a given index.

\\pre idx < size"
      end

      operation 229168 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->targets_.size();
}
"
	
	
	
	
      end

      operation 222256 "version"
	const public return_type class_ref 175664 // element_t
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${abstract}
{
  return this->version_;
}
"
	
	
	
	
	comment "Get the version element."
      end

      extra_member 162992 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 207152 "merge"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_other" type class_ref 168880 // compound_document
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Merges the content of two compound documents.

Merge process:

* For any elements with the same label, append the other data to 
  the element in this object.

* Append any elements in the other object that are not in this
  object."
      end

      operation 206896 "parse"
	public explicit_return_type "void"
	nparams 2
	  param inout name "a_is" type class_ref 163113 // QTextIStream
	  param in name "a_style" type class_ref 159017 // basic_style
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Reset object and read-in a new artifact.

The version, date, preamble and close are read as-is. User data preceding
targets are read and the sequence order of targets is maintained, but the 
content of the target section is left blank."
      end

      operation 207408 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Emptys auto-generated values for all targets, preamble and close 
labelled sections, leaving any user supplied data."
      end

      operation 207536 "write"
	const public explicit_return_type "void"
	nparams 2
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_style" type class_ref 159017 // basic_style
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Output the parts into a_os"
      end
    end

    class 161321 "const_token_iterator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}: public std::iterator< std::forward_iterator_tag, std::string >
{
${members}
};

${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provide an iterator over the tokens in a string

This class will break a string into tokens on the given separator
character.  It will ignore separators that are in quotation marks
or escaped.  An error is thrown if the end of the string is reached
and no matching closing quote was found."
      class 161577 "char_type"
	visibility package stereotype "typedef" explicit_base_type "char"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 161705 "string_type"
	visibility package stereotype "typedef" explicit_base_type "std::string"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 161833 "size_type"
	visibility package stereotype "typedef" explicit_base_type "std::string::size_type"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      extra_member 156336 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 241193 "const_token_iterator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}
: orig_()
, tmp_()
, s_(0)
, e_(0)
, esc_(0)
, sep_(0)
{}"
	
	
	
	
      end

      operation 249129 "const_token_iterator"
	public explicit_return_type ""
	nparams 2
	  param in name "orig" explicit_type "unistr"
	  param in name "sep" type class_ref 161577 // char_type
	cpp_decl "#if QT_VERSION < 300L
    ${comment}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}${v1}${)}${volatile}
: orig_(orig.latin1())
, tmp_()
, s_(0)
, e_(0)
, esc_('\\\\')
, sep_(sep.latin1())
{ this->increment(); }
#endif"
	
	
	
	
      end

      operation 241321 "const_token_iterator"
	public explicit_return_type ""
	nparams 2
	  param in name "orig" type class_ref 161705 // string_type
	  param in name "sep" type class_ref 161577 // char_type
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}
: orig_(orig)
, tmp_()
, s_(0)
, e_(0)
, esc_('\\\\')
, sep_(sep)
{ this->increment(); }"
	
	
	
	
      end

      operation 241449 "const_token_iterator"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "orig" type class_ref 161321 // const_token_iterator
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}
: orig_(orig.orig_)
, tmp_(orig.tmp_)
, s_(orig.s_)
, e_(orig.e_)
, esc_(orig.esc_)
, sep_(orig.sep_)
{}"
	
	
	
	
      end

      operation 183728 "const_token_iterator"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "orig" type class_ref 161321 // const_token_iterator
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}
: orig_( std::move( orig.orig_ ) )
, tmp_( std::move( orig.tmp_ ) )
, s_( std::move( orig.s_ ) )
, e_( std::move( orig.e_ ) )
, esc_( std::move( orig.esc_ ) )
, sep_( std::move( orig.sep_ ) )
{}"
	
	
	
	
      end

      operation 241705 "operator ="
	public return_type class_ref 161321 // const_token_iterator
	nparams 1
	  param in name "orig" type class_ref 161321 // const_token_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract}
{
  this->swap( orig );
  return *this;
}"
	
	
	
	
      end

      operation 241577 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rhs" type class_ref 161321 // const_token_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${abstract}
{
  std::swap(const_cast< string_type& >(this->orig_)
     		, const_cast< string_type& >(rhs.orig_));
  std::swap(this->tmp_, rhs.tmp_);
  std::swap(this->s_, rhs.s_);
  std::swap(this->e_, rhs.e_);
  std::swap(const_cast< char_type& >(this->esc_), const_cast< char_type& >(rhs.esc_));
  std::swap(const_cast< char_type& >(this->sep_), const_cast< char_type& >(rhs.sep_));
}"
	
	
	
	
      end

      extra_member 156208 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 241833 "operator ++"
	public return_type class_ref 161321 // const_token_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${abstract}
{
  this->increment();
  return *this;
}"
	
	
	
	
      end

      operation 241961 "operator ++"
	public return_type class_ref 161321 // const_token_iterator
	nparams 1
	  param in name "" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract}
{
  const_token_iterator tmp(*this);
  this->increment();
  return tmp;
}"
	
	
	
	
      end

      operation 242089 "operator =="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 161321 // const_token_iterator
	  param in name "rhs" type class_ref 161321 // const_token_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${abstract}
{
     return lhs.at_end ()
		? rhs.at_end ()
		: rhs.at_end ()
			? false
			: (lhs.s_ == rhs.s_) & (lhs.e_ == rhs.e_)
				? lhs.orig_ == rhs.orig_
				: false;
}"
	
	
	
	
      end

      operation 242217 "operator !="
	friend cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 161321 // const_token_iterator
	  param in name "rhs" type class_ref 161321 // const_token_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${abstract}
{
  return !(lhs == rhs);
}"
	
	
	
	
      end

      operation 242345 "operator ->"
	const public return_type class_ref 161705 // string_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}* const ${name}${(}${)}${const}${volatile}${abstract}
{
  return &(this->operator*());
}"
	
	
	
	
      end

      operation 242473 "operator *"
	const public return_type class_ref 161705 // string_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${abstract}
{
  if (this->tmp_.empty ())
  {
    if (this->s_ != this->e_)
    {
      this->tmp_ = this->orig_.substr(this->s_, this->e_ - this->s_);
    }
  }
  return this->tmp_;
}"
	
	
	
	
      end

      operation 242601 "at_end"
	const private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract}
{
      return this->orig_.empty ()
            ? true
            : this->s_ >= this->orig_.size (); 
}"
	
	
	
	
      end

      operation 242729 "increment"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
      end

      operation 242857 "is_quote"
	class_operation private explicit_return_type "bool"
	nparams 1
	  param in name "c" type class_ref 161577 // char_type
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${abstract}
{
  return (c == '\\'') | (c == '\"') | (c == '`');
} 
"
	
	
	
	
      end

      operation 244009 "reset"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract}
{
  this->s_ = 0; this->e_ = 0;
}
"
	
	
	
	
	comment "Reset iterator to the beginning of the contained string"
      end

      classrelation 173225 // orig_ (<directional composition>)
	relation 172457 *-->
	  a role_name "orig_" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 173225 // orig_ (<directional composition>)
	  b parent class_ref 161705 // string_type
      end

      attribute 206633 "tmp_"
	private type class_ref 161705 // string_type
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 203049 "s_"
	private type class_ref 161833 // size_type
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 203177 "e_"
	private type class_ref 161833 // size_type
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 173353 // esc_ (<directional composition>)
	relation 172585 *-->
	  a role_name "esc_" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 173353 // esc_ (<directional composition>)
	  b parent class_ref 161577 // char_type
      end

      classrelation 173481 // sep_ (<directional composition>)
	relation 172713 *-->
	  a role_name "sep_" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 173481 // sep_ (<directional composition>)
	  b parent class_ref 161577 // char_type
      end
    end

    class 150697 "generator"
      visibility package 
      nformals 1
      formal name "derived" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};

${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Writer class for recursive template idiom.  This contains the implementation for
the create_system () factory_ method. Derived class writers can use this class to handle
the boiler-plate process of traversing the location and artifact sets - they implement
descendent_link, external_target, initialise and local_target."
      classrelation 162857 // <generalisation>
	relation 162089 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 162857 // <generalisation>
	  b parent class_ref 146985 // base_generator
      end

      classrelation 155568 // <dependency>
	relation 155440 -_->
	  a package
	    cpp default "#include in header"
	    classrelation_ref 155568 // <dependency>
	  b parent class_ref 159017 // basic_style
      end

      classrelation 177577 // <dependency>
	relation 176809 -_->
	  a package
	    cpp default "#include in header"
	    classrelation_ref 177577 // <dependency>
	  b parent class_ref 161321 // const_token_iterator
      end

      classrelation 176169 // <dependency>
	relation 175401 -_->
	  a package
	    cpp default "#include in header"
	    classrelation_ref 176169 // <dependency>
	  b parent class_ref 1280 // CppSettings
      end

      classrelation 163113 // <dependency>
	relation 162345 -_->
	  a package
	    cpp default "#include in header"
	    classrelation_ref 163113 // <dependency>
	  b parent class_ref 137001 // butter_constants
      end

      classrelation 163241 // <dependency>
	relation 162473 -_->
	  a package
	    cpp default "#include in header"
	    classrelation_ref 163241 // <dependency>
	  b parent class_ref 147113 // compound_artifact
      end

      classrelation 163753 // <dependency>
	relation 162985 -_->
	  a package
	    cpp default "#include in header"
	    classrelation_ref 163753 // <dependency>
	  b parent class_ref 148393 // style
      end

      classrelation 163369 // <dependency>
	relation 162601 -_->
	  a package
	    cpp default "#include in header"
	    classrelation_ref 163369 // <dependency>
	  b parent class_ref 6913 // UmlArtifact
      end

      classrelation 163497 // <dependency>
	relation 162729 -_->
	  a package
	    cpp default "#include in header"
	    classrelation_ref 163497 // <dependency>
	  b parent class_ref 7937 // UmlPackage
      end

      operation 208809 "create_system"
	public explicit_return_type "void"
	nparams 2
	  param inout name "a_base" type class_ref 132393 // location
	  param in name "a_project" type class_ref 7553 // UmlItem
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "DRIVER METHOD

Create a series of build-system artifacts based at a_base location. The
artifacts are inserted into a package at each location."
      end

      operation 226473 "rules_file"
	public explicit_return_type "void"
	nparams 2
	  param inout name "a_base" type class_ref 132393 // location
	  param in name "a_project" type class_ref 7553 // UmlItem
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Create the initial rules set."
      end
    end

    class 135849 "gmake_generator"
      visibility package 
      nactuals 1
      actual class class_ref 150697 // generator
        rank 0 value class_ref 135849 // gmake_generator
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};

${inlines}
"
      java_decl "${comment}${public}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Build file generator for gnu make

Requires GNU make compatible make, for generic make use the CMake %style
\\ref cmake_generator .

\\cond xdoc
<xdoc:section part-of=\"limitation/make\" ><p>The <code>make</code> program
can not create target dependency graph between directories.  As all the other
styles do create such a graph, this plugout does not. This can require calling
make several times to get all targets to link correctly.</p>
<xdoc:subsection name=\"workaround\" ><p>The initially generated makefile will include targets and
subdirectories in the order they appear in the project.  Once created, the
order of target sections in the generated artifact is maintained so manually
reordering the target sections within a single artifact will change their compilation
order.</p></xdoc:subsection>
<xdoc:title>Limitations of the Make style build system</xdoc:title></xdoc:section>
<xdoc:section part-of=\"extension/build-environ/make\" >
<xdoc:title>Extending Make style to new compilers and operating
environments</xdoc:title>
<p>New compiler and operating systems can be added by creating system makefiles
like M_gcc.mak and M_unix.mak.  See <xdoc:xref to=\"customisation/build-environ\" >
customisation section</xdoc:xref> for how to include new system files.
To be portable you should only specify tools
that would be available with the standard installations of the new compiler suite or
operating system. Listed below are the minimal
set of variables directly used by this style and so must be defined.</p>
<p>The build system uses the following variables to control the build
process. The first two select the makefiles with the compiler and operating
system specific data.  Note the operating system file is always included first,
so it can not rely on variables that will be set in the compiler file. Alternatively
the compiler file can <em>override</em> definitions if required. The
last variable selects the optimisation level
to use.  These variables must be set on the command line or as environment
variables or at the top of the first makefile.</p>
<dl><dt>CC</dt><dd>C compiler</dd>
<dt>OS</dt><dd>The operating system type, eg unix</dd>
<dt>VARIANT</dt><dd>The build system expects optimisation flags
to be added according to the value of this variable. A value of
<code>RELEASE</code> should add standard optimisation flags to the relevant
preprocessor and language flags.  A value of <code>DEBUG</code> or undefined or
an unrecognised value should add debugging flags. Other actions are
allowed, such as using a dummy install location when set to DEBUG.</dd></dl>
<p>The build system requires the following variables to be set for
each compiler suite.  You may also need to set other variables
that GNU make uses, such as <code>AR</code>, <code>RM</code> and <code>LINK</code>, for the new
build environment.</p>
<dl><dt>CCC</dt><dd>C++ compiler</dd>
<dt>CPPFLAGS</dt><dd>Preprocessor flags</dd>
<dt>CCFLAGS</dt><dd>C language flags</dd>
<dt>CCCFLAGS</dt><dd>C++ language flags</dd>
<dt>LDFLAGS</dt><dd>Linker flags</dd></dl>
Commonly defined optional variables are.
<dl><dt>FORTRAN</dt><dd>Fortran compiler </dd>
<dt>FORTRANFLAGS</dt><dd>Fortran language flags</dd>
<dt>OPENMP</dt><dd>OpenMP compiler switch</dd></dl>
<p>The following macros and definitions must be defined
in either the operating system or compiler definition makefiles.  For how
to define a makefile macro refer to the GNU make documentation.</p>
<dl><dt>do_link_exe</dt><dd>Creates an executable. Takes two
arguments: the program name and a list of objects.</dd>
<dt>do_link_shr</dt><dd>Creates a shared library. Takes three
arguments: the library name, a list of objects and an optional
version number. The prefix <code>lib</code>, used on many unices,
must <em>not</em> be automatically added.</dd>
<dt>do_archive</dt><dd>Creates a static library. Takes two
arguments: the library name and a list of objects. The
prefix <code>lib</code>, used on many unices,
must <em>not</em> be automatically added.</dd>
<dt>do_install</dt><dd>Installs a target.  Takes three arguments: the target
name, the destination <em>identifier</em> and permission <em>identifier</em>.
These identifiers are prepended to <code>DIR</code> to form the variable name
containing the destination directory and to <code>IFLAGS</code> for permissions.
The third argument is optional if it would be the same as the second. For
example a the identifier <code>BIN</code> would select the
<code>$(BINDIR)</code> directory variable or the the <code>$(BINIFLAGS)</code>
permission variable. The minimum set of directory and permission flags required
by the make style are:<br />
<dl><dt>BINDIR, BINIFLAGS</dt><dd>For executable targets</dd>
<dt>LIBDIR, LIBIFLAGS</dt><dd>For shared library targets</dd>
<dt>DOCDIR</dt><dd>For documentation targets</dd>
<dt>MANDIR, MANIFLAGS</dt><dd>For man-page or help targets</dd>
<dt>FILEIFLAGS</dt><dd>For general file targets</dd>
</dl></dd>
<dt>doit</dt><dd>Macro to recursively descend source tree.
Takes two arguments, the current make target (eg \"clean\")
and a list of directories. It should call <code>$(MAKE) -C [subdir] [target]</code>
for each directory in the list.</dd>
<dt>%$(sufdep): %.[???]</dt><dd>A set of implicit rules for
creating a dependency file for each source file extension. This
can be a dummy operation that creates an empty file if the
dependency information is not required.</dd></dl>
<p>The following variables for operating system settings
are expected.</p>
<dl><dt>sufobj</dt><dd>File suffix of object files</dd>
<dt>sufexe</dt><dd>File suffix of program</dd>
<dt>suflib</dt><dd>File suffix of static libraries</dd>
<dt>sufshr</dt><dd>File suffix of shared librraries</dd>
<dt>sufdep</dt><dd>File suffix of generated dependency files</dd>
<dt>SLASH</dt><dd>File path separator</dd></dl>
</xdoc:section >
\\endcond xdoc"
      classrelation 164009 // <realization>
	relation 163241 -_-|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 164009 // <realization>
	  b parent class_ref 150697 // generator
      end

      extra_member 130473 "friend generator"
	
	cpp "// Make out parent a friend.
friend class generator<gmake_generator>;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 183216 // style (<directional composition>)
	relation 183088 *-->
	  a role_name "style" multiplicity "1" init_value "( \"#\", \"\", \"##END:\", \"\", \"##START:\", \"\", \"make\", &butter::gmake_generator::create )" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 183216 // style (<directional composition>)
	  b parent class_ref 159017 // basic_style
      end

      attribute 168745 "build_file_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"makefile\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default leaf filename for the current style"
      end

      attribute 168617 "build_file_sysname"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"makefile\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default leaf filename for the current style"
      end

      attribute 189865 "default_rules_sys"
	class_attribute const_attribute private explicit_type "str"
	init_value "{ \"#\\n\"
, \"# M_sys.mk\\n\"
, \"#\\n\"
, \"##################################\\n\"
, \"# Settings for current environment\\n\"
, \"##################################\\n\"
, \"\\n\"
, \"OS ?= unix\\n\"
, \"ifeq ($(origin CC),default)\\n\"
, \"CC = gcc\\n\"
, \"endif\\n\"
, \"VARIANT ?= DEBUG\\n\"
, \"\\n\"
, \"# Preprocessor flags (defines and include directories)\\n\"
, \"#  CPPFLAGS\\n\"
, \"# C language flags\\n\"
, \"#  CCFLAGS\\n\"
, \"# C++ language flags\\n\"
, \"#  CCCFLAGS\\n\"
, \"# Fortran language flags\\n\"
, \"#  FORTRANFLAGS\\n\"
, \"# Linker flags\\n\"
, \"#  LDFLAGS\\n\"
, \"\\n\"
, \"# Optimisation/debugging flags\\n\"
, \"# are added depending on VARIANT\\n\"
, \"\\n\"
, \"##########################\\n\"
, \"## Include compiler and OS\\n\"
, \"##########################\\n\"
, \"include $(ROOTDIR)$(or $(SLASH),/)M_$(OS).mk\\n\"
, \"include $(ROOTDIR)$(or $(SLASH),/)M_$(CC).mk\\n\"
, \"\\n\"
, \"##############\\n\"
, \"## Unify Vars\\n\"
, \"##############\\n\"
, \"CFLAGS = $(CCFLAGS)\\n\"
, \"CXXFLAGS = $(CCCFLAGS)\\n\"
, \"FFLAGS = $(FORTRANFLAGS)\\n\"
, \"FC = $(FORTRAN)\\n\"
, \"\\n\"
, \"#############################################\\n\"
, \"##  Define standard directory descent targets\\n\"
, \"#############################################\\n\"
, \"export\\n\"
, \"unexport dirs\\n\"
, \"\\n\"
, \"all:: ; $(call doit,all,$(dirs))\\n\"
, \"\\n\"
, \"install:: ; $(call doit,install,$(dirs))\\n\"
, \"\\n\"
, \"distclean: doclean\\n\"
, \"\\t$(call doit,distclean,$(dirs))\\n\"
, \"\\t$(RM) core core.* $(TARGETS) *~ $(if $(sufdep),*$(sufdep))\\n\"
, \"\\n\"
, \"clean: doclean\\n\"
, \"\\t$(call doit,clean,$(dirs))\\n\"
, \"\\n\"
, \"doclean: \\n\"
, \"\\t$(if $(USEROBJ),$(RM) $(USEROBJ))\\n\"
, \"\\n\"
, \"################################################\\n\"
, \"##  Example link library setup with alternatives\\n\"
, \"################################################\\n\"
, \"##  \\n\"
, \"##  # Make this a one time only definition\\n\"
, \"##  \\n\"
, \"##  ifndef USE_XML_MK\\n\"
, \"##  USE_XML_MAK:=1\\n\"
, \"##  \\n\"
, \"##  ifdef ($(XMLLIB))\\n\"
, \"##  ifeq ($(XMLLIB),EXPAT)\\n\"
, \"##  CPPFLAGS+=-DEXPAT\\n\"
, \"##  LDFLAGS+=-lexpat\\n\"
, \"##  endif\\n\"
, \"##  \\n\"
, \"##  ifeq ($(XMLLIB),XML2)\\n\"
, \"##  CPPFLAGS+=-DXML2 `xml2-config --cflags`\\n\"
, \"##  LDFLAGS+=`xml2-config --libs`\\n\"
, \"##  endif\\n\"
, \"##  \\n\"
, \"##  endif # XMLLIB\\n\"
, \"##  \\n\"
, \"##  endif # USE_XML_MK\\n\"
, \"\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}[]${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This is the default contents of a the rules file (M_sys.mk).
If a document artifact with name 'M_sys.mak' is not present when 
%butter is executed with \\@style='standard' then one will be created
using this string.
"
      end

      attribute 183209 "default_rules_cl"
	class_attribute const_attribute private explicit_type "str"
	init_value "{ \"##########################################\\n\"
, \"##  Definitions for Microsoft VC compiler\\n\"
, \"#########################################\\n\"
, \"ifndef M_CL_MK\\n\"
, \"M_CL_MAK:=1\\n\"
, \"\\n\"
, \"CCC:=cl\\n\"
, \"CXX:=cl\\n\"
, \"AR:=link\\n\"
, \"ARFLAGS:= /LIB\\n\"
, \"FORTRAN:=fc\\n\"
, \"CPPFLAGS?=\\n\"
, \"CCFLAGS+=/Za /nologo /errorReport:none\\n\"
, \"CCCFLAGS+=/GR /Gm- /EHsc /Za /Zc:forScope /nologo /errorReport:none\\n\"
, \"\\n\"
, \"ifeq ($(VARIANT),DEBUG)\\n\"
, \"OPTFLAGS+=/Od /Zi\\n\"
, \"LDFLAGS+=/MTd\\n\"
, \"else\\n\"
, \"OPTFLAGS+=/O2\\n\"
, \"LDFLAGS+=/MT\\n\"
, \"endif\\n\"
, \"\\n\"
, \"CCFLAGS+=$(OPTFLAGS)\\n\"
, \"CCCFLAGS+=$(OPTFLAGS)\\n\"
, \"FORTRANFLAGS?=\\n\"
, \"LDFLAGS+=$(OPTFLAGS)\\n\"
, \"\\n\"
, \"FORTRANLIBS:=\\n\"
, \"OPENMP:=/openmp\\n\"
, \"\\n\"
, \"endif # end of once-only\\n\"
, \"\\n\"
, \"#  commands to execute (built-in):\\n\"
, \"COMPILE.c = $(CC) $(subst -,/,$(subst -L,/LIBPATH ,$(patsubst -l%,%.lib,$(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH)))) /c /Fo\\n\"
, \"COMPILE.cc = $(CXX) $(subst -,/,$(subst -L,/LIBPATH ,$(patsubst -l%,%.lib,$(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH)))) /c /Fo\\n\"
, \"define _makeobj_\\n\"
, \"%$$(sufobj): %$(1) ; $$(COMPILE$(1))$$@ $$<\\n\"
, \"endef\\n\"
, \"\\n\"
, \"$(foreach suff,.c .cc .cpp .cxx,$(eval $(call _makeobj_,$(suff))))\\n\"
, \"\\n\"
, \"# Commands to create dummy make dependency files.\\n\"
, \"# (Or use depend generator such as X11 makedepend\\n\"
, \"# or Digital Mars makedep or makedep.py)\\n\"
, \"# %$(sufdep): %$(1)\\n\"
, \"# \\tstart makedep.py $$@ $$< $(CC) /showInclude /Zs /nologo $(CPPFLAGS) $(CXXFLAGS)\\n\"
, \"define _makedep_\\n\"
, \"%$(sufdep): %$(1) ; @echo # Dummy file  $$@\\n\"
, \"endef\\n\"
, \"\\n\"
, \"$(foreach suff,.c .C .cc .cpp .cxx,$(eval $(call _makedep_,$(suff))))\\n\"
, \"\\n\"
, \"_makeobj_:=\\n\"
, \"_makedep_:=\\n\"
, \"\\n\"
, \"define do_link_exe\\n\"
, \"$(1) : $(2); $$(LINK.cpp) $$(OUTPUT_OPTIONS) /Fe$(1) $(2)\\n\"
, \"endef\\n\\n\"
, \"define do_link_shr\\n\"
, \"$(1) : CCFLAGS+=$(SHRFLAGS)\\n\"
, \"$(1) : CCCFLAGS+=$(SHRFLAGS)\\n\"
, \"$(1) : $(2); $$(LINK.cpp) $$(OUTPUT_OPTIONS) /dll /Fe$(1) $(2)\\n\"
, \"endef\\n\\n\"
, \"define do_archive\\n\"
, \"$(1): $(2) ; $$(AR) $$(ARFLAGS) /OUT:$(1) $(2)\\n\"
, \"endef\\n\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}[]${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This is the default contents of the rules file (M_cl.mak) for
the microsoft compiler. If a 
document artifact with name 'M_cl.mk' is not present when 
%butter is executed with \\@style='standard' then one will be created
using this string.

"
      end

      attribute 182953 "default_rules_gcc"
	class_attribute const_attribute private explicit_type "str"
	init_value "{ \"####################################\\n\"
, \"##  Definitions for GNU g++ compiler\\n\"
, \"####################################\\n\"
, \"ifndef M_GCC_MK\\n\"
, \"M_GCC_MK:=1\\n\"
, \"##\\n\"
, \"## Define compiler variables once only.\\n\"
, \"## \\n\"
, \"CCC?=g++\\n\"
, \"FORTRAN?=gfortran\\n\"
, \"CPPFLAGS?=\\n\"
, \"CCFLAGS+=-Wall -std=c99\\n\"
, \"CCCFLAGS+=-Wall -std=c++98\\n\"
, \"\\n\"
, \"ifeq ($(VARIANT),DEBUG)\\n\"
, \"OPTFLAGS+=-O0 -DDEBUG=1\\n\"
, \"CCFLAGS+=-pedantic\\n\"
, \"CCCFLAGS+=-Weffc++\\n\"
, \"else\\n\"
, \"OPTFLAGS+=-O2 -march=native -DDEBUG=0\\n\"
, \"endif\\n\"
, \"\\n\"
, \"CCFLAGS+=$(OPTFLAGS)\\n\"
, \"CCCFLAGS+=$(OPTFLAGS)\\n\"
, \"FORTRANFLAGS+=$(OPTFLAGS)\\n\"
, \"LDFLAGS?=\\n\"
, \"SHRFLAGS?=-fpic\\n\"
, \"\\n\"
, \"FORTRANLIBS:=-lgfortran\\n\"
, \"OPENMP:=-fopenmp\\n\"
, \"\\n\"
, \"endif\\n\"
, \"# END ONCE-ONLY\\n\"
, \"\\n\"
, \"define _makedep_\\n\"
, \"%$(sufdep): %$(1)\\n\"
, \"\\tset -e; $$(CCC) -MM $$(CPPFLAGS) $$< \\\\\\n\"
, \"\\t| sed 's/\\\\($$*\\\\)$$(sufobj)[ :]*/\\\\1$$(sufobj) $$@ : /g' > $$@;\\\\\\n\"
, \"\\t[ -s $$@ ] || rm -f $$@\\n\"
, \"endef\\n\"
, \"\\n\"
, \"$(foreach suff,.c .C .cc .cpp .cxx,$(eval $(call _makedep_,$(suff))))\\n\"
, \"_makedep_:=\\n\"
, \"\\n\"
, \"define do_link_exe\\n\"
, \"$(1) : $(2); $$(LINK.cpp) $$(OUTPUT_OPTIONS) -o $(1) -Wl,--start-group $(2) -Wl,--end-group\\n\"
, \"endef\\n\"
, \"define do_link_shr\\n\"
, \"$(1) : CCFLAGS+=$(SHRFLAGS)\\n\"
, \"$(1) : CCCFLAGS+=$(SHRFLAGS)\\n\"
, \"$(1) : $(2); $$(LINK.cpp) $$(OUTPUT_OPTIONS) -shared -Wl,-soname,$(1) -o $(1) -Wl,--start-group $(2) -Wl,--end-group\\n\"
, \"endef\\n\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}[]${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This is the default contents of the rules file (M_gcc.mk) for
the GNU compiler collection. If a 
document artifact with name 'M_gcc.mk' is not present when 
%butter is executed with \\@style='standard' then one will be created
using this string.
"
      end

      attribute 183081 "default_rules_unix"
	class_attribute const_attribute private explicit_type "str"
	init_value "{ \" # Definition of for loop in local shell.\\n\"
, \"define doit\\n\"
, \"$(if $(2),STATUS=0 ; for subdir in $(2); do $(MAKE) -C $${subdir}  $(1) || STATUS=$$? ; done ; exit $${STATUS})\\n\"
, \"endef\\n\"
, \"\\n\"
, \"# MAKE MOST VARIABLES ONCE-ONLY\\n\"
, \"ifndef M_UNIX_MK\\n\"
, \"M_UNIX_MK:=1\\n\"
, \"#############################\\n\"
, \"##  Default install locations\\n\"
, \"#############################\\n\"
, \"PREFIX=$(ROOTDIR)/installdir\\n\"
, \"BINDIR?=$(PREFIX)/bin\\n\"
, \"LIBDIR?=$(PREFIX)/bin\\n\"
, \"INCLUDEDIR?=$(PREFIX)/include\\n\"
, \"DATADIR?=$(PREFIX)/share\\n\"
, \"DOCDIR?=$(DATADIR)/doc\\n\"
, \"MANDIR?=$(DATADIR)/man1\\n\"
, \"HTMLDIR?=$(DATADIR)/html\\n\"
, \"\\n# Flags for the install targets.\\n\"
, \"BINIFLAGS?=-m 755\\n\"
, \"FILEIFLAGS?=-m 644\\n\"
, \"LIBIFLAGS?=-m 644 \\n\"
, \"MANIFLAGS?=-m 644\\n\"
, \"INSTALL?=install\\n\"
, \"\\n# Standard suffixes\\n\"
, \"sufobj:=.o\\n\"
, \"sufexe:=\\n\"
, \"suflib:=.a\\n\"
, \"sufshr:=.so\\n\"
, \"sufdep:=.d\\n\"
, \"\\n# Path separator\\n\"
, \"SLASH?=/\\n\"
, \"\\n# END OF ONCE-ONLY.\\n\"
, \"endif\\n\\n\"
, \"define do_install\\n\"
, \"install:: $(1) ; $$(INSTALL) -d $$($(2)DIR) ; $$(INSTALL) $$($(or $(3),$(2))IFLAGS) $(1) $$($(2)DIR)/$(1)\\n\"
, \"endef\\n\\n\"
, \"define do_archive\\n\"
, \"$(1): $(2) ; $$(AR) $$(ARFLAGS) $(1) $(2)\\n\"
, \"endef\\n\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}[]${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This is the default contents of the rules file (M_unix.mak) for
a UNiX/POSIX like operating system. If a 
document artifact with name 'M_unix.mak' is not present when 
%butter is executed with \\@style='standard' then one will be created
using this string.

"
      end

      attribute 183337 "default_rules_winnt"
	class_attribute const_attribute private explicit_type "str"
	init_value "{ \"# Definition of for loop in local shell.\\n\\n\"
, \"define doit\\n\"
, \"IF \\\"$(2)\\\" NEQ \\\"\\\" FOR %%W IN ( $(2) ) DO \\\"$(subst /,\\\\,$(MAKE))\\\" -C %%W $(1)\\n\"
, \"endef\\n\"
, \"\\n\"
, \"ifndef M_WINNT_MK\\n\"
, \"M_WINNT_MK:=1\\n\"
, \"#############################\\n\"
, \"##  Default install locations\\n\"
, \"#############################\\n\"
, \"PREFIX?=$(ROOTDIR)\\\\installdir\\n\"
, \"BINDIR?=$(PREFIX)\\\\bin\\n\"
, \"DATADIR?=$(PREFIX)\\\\share\\n\"
, \"DOCDIR?=$(DATADIR)\\\\doc\\n\"
, \"HTMLDIR?=$(DATADIR)\\\\html\\n\"
, \"INCLUDEDIR?=$(PREFIX)\\\\include\\n\"
, \"LIBDIR?=$(PREFIX)\\\\lib\\n\"
, \"MANDIR?=$(DATADIR)\\\\man1\\n\"
, \"\\n# Standard Suffixes\\n\"
, \"sufobj:=.obj\\n\"
, \"sufexe:=.exe\\n\"
, \"sufdep:=.dep\\n\"
, \"suflib:=.lib\\n\"
, \"sufshr:=.dll\\n\"
, \"# Programs\\n\"
, \"MKDIR?=MD\\n\"
, \"COPY?=COPY /Y /B /V\\n\"
, \"RM:=-DEL /F\\n\"
, \"\\n# Path separator\\n\"
, \"SLASH?=\\\\\\n\"
, \"\\n# END OF ONCE-ONLY.\\n\"
, \"endif\\n\\n\"
, \"define do_install\\n\"
, \"install:: $(1) ; IF NOT EXIST $$($(2)DIR) ( $$(MKDIR) $$($(2)DIR) )\\n\\t$$(COPY) $(1) $$($(2)DIR)\\\\$(1)\\n\"
, \"endef\\n\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}[]${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This is the default contents of the rules file (M_Windows_NT.mk) for
a (post NT) Micrsoft Windows like operating system. If a 
document artifact with name 'M_Windows_NT.mk' is not present when 
%butter is executed with \\@style='standard' then one will be created
using this string.
"
      end

      attribute 189993 "default_rules_list"
	class_attribute const_attribute private explicit_type "str"
	init_value "{ default_rules_sys, default_rules_cl, default_rules_gcc, default_rules_unix, default_rules_winnt, 0 }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type}* ${name}[]${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Null terminated list of the default_rules_[] attributes.
This is a simple list of the default_rules_[...] attributes, listed
in the same order as the rules_name attribute. It is only
used to initialise the default_rules attribute. "
      end

      extra_member 145193 ""
	
	cpp "" "static char const** combine(char const*** list )
{
  int size_ = 0;
  for (const char *** y = list ; 0 != *y; ++y, ++size_ )
    for (const char ** x = *y; 0 != *x; ++x, ++size_) ;
  char const** result = new char const*[size_];
  char const** cur = result;
  size_ = 0;
  for (char const*** y = &list[0] ; 0 != *y; ++y, ++cur, ++size_)
  {
    for (char const** x = *y; 0 != *x; ++x, ++cur, ++size_)
    {
      *cur = *x;
    }
    *cur = 0;
  }
  return result;
}
"
	java ""
	php ""
	python ""
	idl ""
	comment "Combiner function"
      end

      attribute 138793 "default_rules"
	class_attribute const_attribute private explicit_type "str"
	init_value "combine(gmake_generator::default_rules_list)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type}* ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A list containing _all_ the default rules.
This is assigned all the default rules concatenated together. The
rules appear in the order specified by rules_name.
\\sa default_rules_list"
      end

      attribute 144297 "rules_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"M_sys.mk M_cl.mk M_gcc.mk M_unix.mk M_Windows_NT.mk\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A space separated list of rule names.
This style has multiple system buildfiles. This variable contains a space
separated list of the names of these files."
      end

      attribute 176297 "lib_set_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Set of included libraries"
      end

      attribute 175785 "qualified_target_name_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The target name as used by make"
      end

      extra_member 155312 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 160553 "gmake_generator"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${name}${(}${)}${volatile};
"
	cpp_def "${inline}${class}::${name}${(}${)}
: lib_set_ ()
, qualified_target_name_ ()
{}
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment "Create a generator from the top-level a_project

\\pre a_project.parent = nul"
      end

      operation 160297 "gmake_generator"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 135849 // gmake_generator
	cpp_decl "    ${comment}${name}${(}const ${t0} &${)}${volatile} = delete;
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment "no copy"
      end

      operation 182832 "gmake_generator"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 135849 // gmake_generator
	cpp_decl "    ${comment}${name}${(}${t0} && ${p0}${)}${volatile} = delete;
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment "no copy"
      end

      operation 160169 "operator="
	private return_type class_ref 135849 // gmake_generator
	nparams 1
	  param in name "source" type class_ref 135849 // gmake_generator
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}const ${t0} &${)}${const}${volatile}${abstract} = delete;"
	
	
	
	
	comment "no assign"
      end

      operation 160425 "~gmake_generator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile} throw () {}
"
	
	
	
	
      end

      operation 202921 "create"
	stereotype "unique_ptr"
	class_operation public return_type class_ref 146985 // base_generator
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}std::unique_ptr< ${type} > ${name}${(}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${)}${const}${volatile}${staticnl}
{
  std::unique_ptr< ${type} > Result (new gmake_generator);
  return Result;
}
"
	
	
	
	
	comment "Create bjam generator object.s"
      end

      extra_member 155184 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 210729 "assoc_library"
	private explicit_return_type "void"
	nparams 5
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param out name "a_includes" explicit_type "unistr"
	  param out name "a_ldflags" explicit_type "unistr"
	  param out name "a_cflags" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** This method a library association to the current target entry for a_target.

Responsibilites
- Properties
 - associated includes, ldflags, cflags"
      end

      operation 210857 "assoc_source"
	private explicit_return_type "void"
	nparams 7
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_filename" explicit_type "unistr"
	  param in name "a_basename" explicit_type "unistr"
	  param in name "a_src_inc" explicit_type "unistr"
	  param in name "a_src_flags" explicit_type "unistr"
	  param in name "a_isdoc" explicit_type "bool"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment " This method sets up object for creating a new target entry for a_target.

Responsibilites
- Properties
 - doc/source: includes, ldflags, cflags
 - compiler
- Other
 - set compilation for individual 

\\cond XDOC
<property style=\"standard\" name=\"include\" on=\"artifact\" subtype=\"stereotype=source\"> Add
include directories to compilation of this source only.  Any include directories
needed to compile dependents of this source should be set in this property on
the target artifact that is associated to the source.</property>
\\endcond XDOC"
      end

      operation 161065 "descendent_link"
	private explicit_return_type "void"
	nparams 3
	  param inout name "a_art" type class_ref 147113 // compound_artifact
	  param inout name "a_sys" type class_ref 147113 // compound_artifact
	  param in name "a_loc" type class_ref 132393 // location
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Write the Jamfile descent links for a_location to a_os"
      end

      operation 210985 "end_target"
	private explicit_return_type "void"
	nparams 7
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_include" explicit_type "unistr"
	  param in name "a_ldflags" explicit_type "unistr"
	  param in name "a_cflags" explicit_type "unistr"
	  param in name "a_compiler" explicit_type "unistr"
	  param in name "a_type" type class_ref 154281 // target_type
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** This method finalises the target entry for a_target."
      end

      operation 202665 "external_target"
	private explicit_return_type "void"
	nparams 3
	  param in name "a_current" type class_ref 132393 // location
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param inout name "a_sys" type class_ref 147113 // compound_artifact
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${abstract} {}
"
	
	
	
	
	comment "In this style external targets are not used, external library 
data is written in local-targets directly where it is 
referenced."
      end

      operation 160809 "initialise"
	private explicit_return_type "void"
	nparams 3
	  param inout name "a_base" type class_ref 132393 // location
	  param in name "a_project" type class_ref 7553 // UmlItem
	  param inout name "a_sys" type class_ref 147113 // compound_artifact
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Write extra details to the top-level build file. "
      end

      operation 211113 "install_target"
	private explicit_return_type "void"
	nparams 5
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_loc_var" explicit_type "unistr"
	  param in name "a_type" type class_ref 139305 // install_type
	  param in name "a_isdoc" explicit_type "bool"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** Create an install target.

Responsibilites
- Properties
 - install (library, executable and document)"
      end

      operation 236457 "process_flags"
	private explicit_return_type "void"
	nparams 4
	  param in name "a_inc_list" explicit_type "unistr"
	  param in name "a_flag_list" explicit_type "unistr"
	  param out name "a_cppflags" explicit_type "unistr"
	  param out name "a_cflags" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Process a_inc_list and a_flag_list into preprocessor
and compiler flag sets."
      end

      operation 162089 "process_hdrs"
	class_operation private explicit_return_type "unistr"
	nparams 1
	  param in name "a_inc_list" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Transform a space separated list of include dirs into a
list with -I..."
      end

      operation 161193 "requirements"
	class_operation private explicit_return_type "bool"
	nparams 2
	  param in name "a_item" type class_ref 7553 // UmlItem
	  param inout name "a_reqs" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Scan a_item for any requirements, add these to a_req and
return true if found."
      end

      operation 210601 "start_target"
	private explicit_return_type "void"
	nparams 5
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_build_file" explicit_type "unistr"
	  param in name "a_compiler" explicit_type "unistr"
	  param in name "a_type" type class_ref 154281 // target_type
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${v4}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** This method sets up object for creating a new target entry for a_target.

Responsibility
- Properties
 - compiler
 - include, ldflags, cflags
 - buildfile
 - type (library)
- Other
 - shared lib
 - static lib
 - executable
 - non-standard target"
      end
    end

    class 134697 "jam_generator"
      visibility package 
      nactuals 1
      actual class class_ref 150697 // generator
        rank 0 value class_ref 134697 // jam_generator
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};

${inlines}
"
      java_decl "${comment}${public}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Build file generator for standard jam.

This is the build system generator of choice as is supports the widest range of
build options.

\\cond XDOC
<style style=\"make\">
<limitation>The <code>standard</code> jam tool does not provide
a shared library target. Providing a shared library for this style is on 
the <link target=\"todo\">TODO list</link>.</limitation>
\\endcond XDOC"
      classrelation 163881 // <realization>
	relation 163113 -_-|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 163881 // <realization>
	  b parent class_ref 150697 // generator
      end

      extra_member 130601 "friend generator"
	
	cpp "// Make our parent a friend.
friend class generator<jam_generator>;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 182576 // style (<directional composition>)
	relation 182448 *-->
	  a role_name "style" multiplicity "1" init_value "( \"#\", \"\", \"##END:\", \"\", \"##START:\", \"\", \"standard\", &butter::jam_generator::create )" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 182576 // style (<directional composition>)
	  b parent class_ref 159017 // basic_style
      end

      attribute 166569 "build_file_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"Jamfile\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 166697 "build_file_sysname"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"Jamfile\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 140073 "default_rules"
	class_attribute const_attribute private explicit_type "str"
	init_value "{ \"#\\n\"
, \"# Default Jamrules\\n\"
, \"#\\n\"
, \"\\nif $(UNIX)  { SUFSHR ?= .so ; }\\n\"
, \"else if $(NT) { SUFSHR ?= .dll ; }\\n\"
, \"\\n\"
, \"if $(JAM_TOOLSET) { TOOLSET ?= $(JAM_TOOLSET) ; }\\n\"
, \"TOOLSET ?= GNU ;\\n\"
, \"VARIANT ?= DEBUG ;\\n\"
, \"\\n\"
, \"#############################\\n\"
, \"##\\n\"
, \"##  Default install locations\\n\"
, \"##\\n\"
, \"#############################\\n\"
, \"PREFIX = installdir ;\\n\"
, \"BINDIR = $(PREFIX)/bin ;\\n\"
, \"DATADIR = $(PREFIX)/share ;\\n\"
, \"DOCDIR = $(DATADIR)/doc ;\\n\"
, \"HTMLDIR = $(DATADIR)/html ;\\n\"
, \"INCDIR = $(PREFIX)/include ;\\n\"
, \"LIBDIR = $(PREFIX)/bin ;\\n\"
, \"MANDIR = $(DATADIR)/man1 ;\\n\"
, \"\\n\"
, \"######################################################\\n\"
, \"##\\n\"
, \"##  Example definitions for compiler suite (TOOLSETS)\\n\"
, \"##  It is possible to add definitions here or in a\\n\"
, \"##  separate file \\\"$(TOOLSET).jam\\\", the NOCARE rule\\n\"
, \"##  tells jam not to worry if file does not exist.\\n\"
, \"## \\n\"
, \"######################################################\\n\"
, \"NOCARE $(TOOLSET).jam ;\\n\"
, \"include $(TOOLSET).jam ;\\n\"
, \"switch $(TOOLSET)\\n\"
, \"{\\n\"
, \"case GNU :\\n\"
, \"CC = gcc ;\\n\"
, \"C++ = g++ ;\\n\"
, \"FORTRAN = gfortran ;\\n\"
, \"LINK = $(C++) ;\\n\"
, \"CCFLAGS += -Wall -std=c99 ;\\n\"
, \"C++FLAGS += -Wall -std=c++98 ;\\n\"
, \"SHRFLAGS = -fpic ;\\n\"
, \"switch $(VARIANT)\\n\"
, \"{\\n\"
, \"case RELEASE :\\n\"
, \"  OPTIM += -O2 -march=native -DDEBUG=0 ;\\n\"
, \"case * :\\n\"
, \"  OPTIM = -O0 -ggdb -DDEBUG=1 ;\\n\"
, \"  CCFLAGS += -pedantic ;\\n\"
, \"  C++FLAGS += ; # -Weffc++ ;\\n\"
, \"}\\n\"
, \"FORTRANFLAGS += -Wall -c ;\\n\"
, \"LINKFLAGS += $(OPTIM) ;\\n\"
, \"OPENMP = -fopenmp ;\\n\"
, \"FORTRANLIBS += -lgfortran ;\\n\"
, \"}\\n\"
, \"\\n\"
, \"##################################################\\n\"
, \"##\\n\"
, \"##  Example of how you might define a set of\\n\"
, \"##  \\\"standard\\\" flags for libraries you use often.\\n\"
, \"##\\n\"
, \"##################################################\\n\"
, \"##\\n\"
, \"##switch $(GUILIB)\\n\"
, \"##{\\n\"
, \"##case GTKMM :\\n\"
, \"##  CCFLAGS += `pkg-config gtkmm-2.4 --cflags` ;\\n\"
, \"##  C++FLAGS += `pkg-config gtkmm-2.4 --cflags` ;\\n\"
, \"##  LINKFLAGS += `pkg-config gtkmm-2.4 --libs` ;\\n\"
, \"##\\n\"
, \"##case MOTIF :\\n\"
, \"##  CCFLAGS += -I/usr/include ;\\n\"
, \"##  C++FLAGS += -I/usr/include ;\\n\"
, \"##  LINKFLAGS += -L/usr/lib -lXm -lXp -lXpm -lXmu -lXt -lXext -lX11 ;\\n\"
, \"##\\n\"
, \"##case QT3 :\\n\"
, \"##  CCFLAGS += -I$(QTDIR)/include ;\\n\"
, \"##  C++FLAGS += -I$(QTDIR)/include ;\\n\"
, \"##  LINKFLAGS += -L$(QTDIR)/lib -lqt-mt -lXext -lX11 -lm ;\\n\"
, \"##\\n\"
, \"##case * :\\n\"
, \"##}\\n\"
, \"##\\n\"
, \"\\n\"
, \"# Set variable for variant-specific build-dir handling\\n\"
, \"BASE_LOCATE_TARGET = $(BUILDDIR)$(SLASH)$(VARIANT) ;\\n\"
, \"ALL_LOCATE_TARGET = $(BASE_LOCATE_TARGET) ;\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}[]${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A template Jamrules."
      end

      attribute 144169 "rules_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"Jamrules\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The name of the jam rules document."
      end

      attribute 174249 "lib_defn_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Text for the a main targets associated sub-targets"
      end

      attribute 201641 "grist_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Jam \"Grist\" of the current target location. Set in initialisation."
      end

      attribute 174377 "qualified_target_name_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The full target name for the currently processing target (defined in start_target)"
      end

      extra_member 155568 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 154921 "jam_generator"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${name}${(}${)}${volatile};
"
	cpp_def "${inline}${class}::${name}${(}${)}
: lib_defn_ ()
, grist_ ()
, qualified_target_name_ ()
{}
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment "Main ctor, takes top-level a_project.

\\pre a_project.parent = nul"
      end

      operation 155177 "jam_generator"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 134697 // jam_generator
	cpp_decl "    ${comment}${name}${(}const ${t0} &${)}${volatile} = delete;
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment "no copy"
      end

      operation 182960 "jam_generator"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 134697 // jam_generator
	cpp_decl "    ${comment}${name}${(}${t0} && ${p0}${)}${volatile} = delete;
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment "no copy"
      end

      operation 155689 "operator="
	private return_type class_ref 134697 // jam_generator
	nparams 1
	  param in name "source" type class_ref 134697 // jam_generator
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}const ${t0} &${)}${const}${volatile}${abstract} = delete;"
	
	
	
	
	comment "no assign"
      end

      operation 155049 "~jam_generator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile} throw () {}
"
	
	
	
	
      end

      operation 201513 "create"
	stereotype "unique_ptr"
	class_operation public return_type class_ref 146985 // base_generator
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}std::unique_ptr< ${type} > ${name}${(}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${)}${const}${volatile}${staticnl}
{
  std::unique_ptr< ${type} > Result (new jam_generator);
  return Result;
}
"
	
	
	
	
	comment "Create bjam generator object.s"
      end

      extra_member 155440 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 209065 "assoc_library"
	private explicit_return_type "void"
	nparams 5
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param out name "a_includes" explicit_type "unistr"
	  param out name "a_ldflags" explicit_type "unistr"
	  param out name "a_cflags" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** This method a library association to the current target entry for a_target.

Responsibilites
- Properties
 - associated includes, ldflags, cflags"
      end

      operation 209193 "assoc_source"
	private explicit_return_type "void"
	nparams 7
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_filename" explicit_type "unistr"
	  param in name "a_basename" explicit_type "unistr"
	  param in name "a_src_inc" explicit_type "unistr"
	  param in name "a_src_flags" explicit_type "unistr"
	  param in name "a_isdoc" explicit_type "bool"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** This method sets up object for creating a new target entry for a_target.

Responsibilites
- Properties
 - doc/source: includes, ldflags, cflags
 - compiler
- Other
 - set compilation for individual "
      end

      operation 205737 "check_properties"
	public explicit_return_type "void"
	nparams 3
	  param in name "a_is_source" explicit_type "bool"
	  param in name "a_source" type class_ref 6913 // UmlArtifact
	  param inout name "a_os" type class_ref 162985 // QTextOStream
	constraint "QString link_flags_;
QString includes_;
QString cflags_;
find_hdr_link_prop (a_source, includes_, link_flags_, cflags_);
find_hdr_link (a_source.description (), includes_, link_flags_, cflags_);
if (! cflags.isEmpty ())
{
  a_os << 
}"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} & ${p2}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Check a_source for butter properties and add information to a_os.
a_is_source is true of a_source stereotype is \"source\" and false
if stereotype is \"document\"."
      end

      operation 158121 "descendent_link"
	private explicit_return_type "void"
	nparams 3
	  param inout name "a_art" type class_ref 147113 // compound_artifact
	  param inout name "a_sys" type class_ref 147113 // compound_artifact
	  param in name "a_loc" type class_ref 132393 // location
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Build the inter-buildfile link from this artifact/location to its parent and 
vice-versa. This is called just before the artifact is closed so has access 
to the (almost) complete content."
      end

      operation 209321 "end_target"
	private explicit_return_type "void"
	nparams 7
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_include" explicit_type "unistr"
	  param in name "a_ldflags" explicit_type "unistr"
	  param in name "a_cflags" explicit_type "unistr"
	  param in name "a_compiler" explicit_type "unistr"
	  param in name "a_type" type class_ref 154281 // target_type
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${v6}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** This method finalises the target entry for a_target."
      end

      operation 201385 "external_target"
	private explicit_return_type "void"
	nparams 3
	  param in name "a_current" type class_ref 132393 // location
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param inout name "a_sys" type class_ref 147113 // compound_artifact
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${abstract} {}
"
	
	
	
	
	comment "In this style external targets are not used, external library 
data is written in local-targets directly where it is 
referenced.

Responsibility
- Properties
 - project (defines external)
 - buildfile
- Other
 - external target"
      end

      operation 156329 "initialise"
	private explicit_return_type "void"
	nparams 3
	  param inout name "a_base" type class_ref 132393 // location
	  param in name "a_project" type class_ref 7553 // UmlItem
	  param inout name "a_sys" type class_ref 147113 // compound_artifact
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Write extra details to the top-level build file.

Responsibilities:
- Property handling
 - build-dir
 - project: flags, include, ldflags, (library) type
 - style
 - version"
      end

      operation 209449 "install_target"
	private explicit_return_type "void"
	nparams 5
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param inout name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_loc_var" explicit_type "unistr"
	  param in name "a_type" type class_ref 139305 // install_type
	  param in name "a_isdoc" explicit_type "bool"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${staticnl}
{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** Create an install target.

Responsibilites
- Properties
 - install (library, executable and document)"
      end

      operation 208937 "start_target"
	private explicit_return_type "void"
	nparams 5
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param out name "a_os" type class_ref 162985 // QTextOStream
	  param in name "a_build_file" explicit_type "unistr"
	  param in name "a_compiler" explicit_type "unistr"
	  param in name "a_type" type class_ref 154281 // target_type
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${v4}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "** This method sets up object for creating a new target entry for a_target.

Responsibility
- Properties
 - compiler
 - include, ldflags, cflags
 - buildfile
 - type (library)
- Other
 - shared lib
 - static lib
 - executable
 - non-standard target"
      end
    end

    class 132393 "location"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};

${inlines}
"
      java_decl "${comment}${public}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Manages a build location in the project. It has a one-to-one correspondence with a filesystem 
directory and one-to-many with the set of UmlPackages for the directory. These are generated in the first
phase of the program execution.

Responsibilities:
- Property handling
 - base
 - log-level
 - style

"
      classrelation 176425 // <dependency>
	relation 175657 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 176425 // <dependency>
	  b parent class_ref 1280 // CppSettings
      end

      classrelation 155824 // <dependency>
	relation 155696 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 155824 // <dependency>
	  b parent class_ref 159017 // basic_style
      end

      classrelation 145193 // <dependency>
	relation 144425 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 145193 // <dependency>
	  b parent class_ref 137001 // butter_constants
      end

      classrelation 154409 // <dependency>
	relation 153641 -_->
	  a package
	    cpp default "#include in source"
	    classrelation_ref 154409 // <dependency>
	  b parent class_ref 145833 // pathcmp
      end

      classrelation 165289 // <dependency>
	relation 164521 -_->
	  a package
	    cpp default "#include in source"
	    classrelation_ref 165289 // <dependency>
	  b parent class_ref 151849 // log
      end

      classrelation 155561 // <dependency>
	relation 154793 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 155561 // <dependency>
	  b parent class_ref 148393 // style
      end

      classrelation 135977 // children_ (<composition>)
	relation 135337 *---
	  stereotype "vector"
	  a role_name "children_" multiplicity "*" private
	    comment "The child nodes (managed)"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    java "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 135977 // children_ (<composition>)
	  b role_name "parent_" multiplicity "1" private
	    comment "The parent"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 136489 // parent_ (<composition>)
      end

      classrelation 136233 // packages_ (<directional composition>)
	relation 135593 *-->
	  stereotype "vector"
	  a role_name "packages_" multiplicity "*" private
	    comment "The packages associated with this location,"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    java "  ${comment}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 136233 // packages_ (<directional composition>)
	  b parent class_ref 7937 // UmlPackage
      end

      classrelation 136489 // parent_ (<composition>)
	relation_ref 135337 // <composition>
      end

      attribute 134057 "path_"
	private type class_ref 145833 // pathcmp
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The location's filesystem path."
      end

      operation 143145 "add_package"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_package" type class_ref 7937 // UmlPackage
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Add the package as a client of the location.

\\pre path of a_package = full_path"
      end

      operation 167081 "children"
	stereotype "vector"
	const public return_type class_ref 132393 // location
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}const QVector< ${type} >& ${name}${(}${)}${const}${volatile}${abstract}
{
  return children_;
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Get the children!"
      end

      operation 190505 "compare_file_to_string"
	class_operation private explicit_return_type "bool"
	nparams 2
	  param in name "a_path" explicit_type "unistr"
	  param in name "a_str" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${staticnl}{
${body}}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Are the contents of the file a_path and a_str identical? If they are not then
write a_str to a_path and return false. Throws an exception if it cannot open a file
at a_path."
      end

      operation 187433 "create_as_child"
	public return_type class_ref 132393 // location
	nparams 1
	  param in name "a_path" type class_ref 145833 // pathcmp
	cpp_decl "    ${comment}${static}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Create a new location object as a descendent of this location.  The
created object is owned by this object or one of its descendents.

\\pre full_path.has_subpath( a_path )"
      end

      operation 187561 "create_common_parent"
	class_operation private return_type class_ref 132393 // location
	nparams 2
	  param in name "a_base" type class_ref 132393 // location
	  param in name "a_path" type class_ref 145833 // pathcmp
	cpp_decl "    ${comment}${static}${virtual}std::unique_ptr< ${type} > ${name}${(}std::unique_ptr< ${t0} > ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}std::unique_ptr< ${type} > ${class}::${name}${(}std::unique_ptr< ${t0} > ${p0}, const ${t1} & ${p1}${)}${const}${volatile}
{
${body}
}
"
	
	
	
	
	comment "Create a location object that is a parent of the a_base 
location and a_path. Only base location objects may call 
this method. The pointer a_base should refer to allocated
memory which the method takes over management of. The
return is either a new root location or a_base. The
returned pointer should be managed by the caller.

** This reroots the location tree. The returned object
is the new root of the location tree. **

\\pre nul = a_base.parent"
      end

      operation 164521 "create_uml_document"
	public return_type class_ref 6913 // UmlArtifact
	nparams 1
	  param in name "a_name" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} * ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Create a document at the current location with  a_name. This 
scans the package(s) for a deployment view and uses the first one 
found.  If none are found then it creates a deployment view in
the first package.  Then it creates an artifact with a_name in the
selected deployment view.

\\pre not packages.empty
\\pre not has_document(a_name)"
      end

      operation 187689 "find"
	class_operation public return_type class_ref 132393 // location
	nparams 2
	  param inout name "a_location" type class_ref 132393 // location
	  param in name "a_path" type class_ref 145833 // pathcmp
	cpp_decl "    ${comment}${static}${virtual}${type} * ${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} * ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${staticnl}{
${body}
}
"
	
	
	
	
	comment "Attempt to find a location pointer for the given path. Will return the \"closest\" 
location if no exact match is found.

\\pre a_location.parent_path (a_path)"
      end

      operation 164393 "find_uml_document"
	stereotype "vector"
	const public return_type class_ref 7553 // UmlItem
	nparams 1
	  param in name "a_name" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}QVector< ${type} > ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}QVector< ${type} > ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "Find a document of the given name at the current location. This
may return an empty list if no document is found

\\pre not a_name.empty"
      end

      operation 145577 "full_path"
	const public return_type class_ref 145833 // pathcmp
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "This gives the fully qualifed path of the location (relative to
the base path.)"
      end

      operation 142633 "location"
	public explicit_return_type ""
	nparams 1
	  param in name "a_path" type class_ref 145833 // pathcmp
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${)}${volatile};
"
	cpp_def "${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}
${body}
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment "Ctor for location tree root objects (a_path is full
path or relative to a base path.)"
      end

      operation 144425 "location"
	private explicit_return_type ""
	nparams 2
	  param in name "a_path" type class_ref 145833 // pathcmp
	  param inout name "a_parent" type class_ref 132393 // location
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${volatile};
"
	cpp_def "${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}
${body}
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment " Ctor for child location objects (a_path is relative to the parent
 location.) Not to be called directly, use \"create_as_child\"."
      end

      operation 142761 "~location"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${inline}${class}::${name}${(}${)}${volatile} throw ()
{}
"
	
	
	
	
	comment "Deletes all children."
      end

      operation 142889 "location"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 132393 // location
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${)}${volatile} = delete;
"
	java_def "  ${comment}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
${body}}
"
	
	
	
	comment "no copy"
      end

      operation 143017 "operator="
	private return_type class_ref 132393 // location
	nparams 1
	  param in name "source" type class_ref 132393 // location
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${abstract} = delete;
"
	
	
	
	
	comment "no assign"
      end

      operation 167337 "packages"
	stereotype "vector"
	const public return_type class_ref 7937 // UmlPackage
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}const QVector< ${type} >& ${name}${(}${)}${const}${volatile}${abstract}
{
  return packages_;
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "The packages associated with this location"
      end

      operation 145193 "parent"
	const public return_type class_ref 132393 // location
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} *const ${name}${(}${)}${const}${volatile}${abstract}
{
  return ${name}_;
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "The parent location, this is nul for the top-level locations"
      end

      operation 133929 "parse_project"
	class_operation public return_type class_ref 132393 // location
	nparams 2
	  param inout name "a_item" type class_ref 7553 // UmlItem
	  param in name "a_interaction" explicit_type "unsigned"
	cpp_decl "    ${comment}${static}${virtual}std::unique_ptr<${type}> ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}std::unique_ptr<${type}> ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "This visits all the UmlItems starting at (a_item) and proceeding
through all of the descendent items.  It returns a location tree
suitable for creating a build-system.  The return value may be empty
in the event of an error or there being no targets or documents.

\\arg a_item : Root of bouml tree.
\\arg a_interaction : automate user interaction (during test mode)
  (0 = query user(default), 1 = user selects \"Ok\", 2 = user selects other option)

\\pre a_item.type = UmlPackageType and nul = a_item.parent [ie = project]"
      end

      operation 144553 "path"
	const public return_type class_ref 145833 // pathcmp
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${abstract}
{
  return path_;
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "The leaf node of sub-locs and the base-path for top-level locs"
      end

      operation 146601 "serialize"
	stereotype "debug"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" type class_ref 162985 // QTextOStream
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${abstract};"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${staticnl}
{
  BUTTER_ALWAYS (DEBUG, \"Programming error: attempt to get debug info in release build\");
${body}
}
"
	java_def "  ${comment}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
${body}}
"
	
	
	
	comment "This descends the location tree writing debug information to
a_os as it goes.

(Only if NO_LOG is undefined)"
      end

      operation 190633 "write_documents"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "a_base" type class_ref 132393 // location
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}{
${body}
}
"
	
	
	
	
	comment "Write all UML documents for this and descendent locations.

* This calls write_uml_documents on a_base and all a_base's descendent
locations."
      end

      operation 189097 "write_uml_documents"
	const public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Scan the list of packages at this location and write any UmlArtifact:documents 
to the file-system."
      end
    end

    class 145833 "pathcmp"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};

${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Minimal class to allow comparison of file paths as ordered lists of strings.

The methods defined in this derived class allow some operations that do
not reference the operating system.  This means that comparisons etc
are for absolute paths without resolving symlinks."
      classrelation 167849 // <generalisation>
	relation 167081 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 167849 // <generalisation>
	  b parent class_ref 155433 // QDir
      end

      attribute 181673 "default_separator_"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "2"
	init_value "\"/\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Separator to use regardless of OS"
      end

      attribute 181801 "other_separator_"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "2"
	init_value "\"\\\\\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "separator used on other OS"
      end

      extra_member 147760 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 185129 "pathcmp"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${name}${(}${)}${volatile}
: QDir ()
{}
"
	
	
	
	
	comment "Default ctor"
      end

      operation 184617 "pathcmp"
	public explicit_return_type ""
	nparams 1
	  param in name "a_path" explicit_type "unistr"
	cpp_decl "    ${comment}${name}${(}${t0} ${p0}${)}${volatile}
: QDir (normalise (${p0}))
{}
"
	
	
	
	
	comment "Construct from string"
      end

      operation 214185 "pathcmp"
	stereotype "base"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 155433 // QDir
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${)}${volatile}
: QDir( normalise( ${p0}.path() ) )
{}
"
	
	
	
	
	comment "Construct from base class"
      end

      operation 184745 "~pathcmp"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile}
{}
"
	
	
	
	
      end

      operation 184873 "pathcmp"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 145833 // pathcmp
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${)}${volatile}
: QDir (source)
{}
"
	
	
	
	
      end

      operation 185001 "operator="
	public return_type class_ref 145833 // pathcmp
	nparams 1
	  param in name "source" type class_ref 145833 // pathcmp
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract}
{
  this->setPath( ${p0}.path() );
  return *this;
}
"
	
	
	
	
      end

      extra_member 148016 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 185385 "depth"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract}
{
  const QString path_ (path ());
  return (${type})(path_.contains (default_separator_[0]) + (path_.at(path_.length () - 1) == default_separator_[0] ? 0 : 1));
}
"
	
	
	
	
	comment "The number of steps in the path."
      end

      operation 185769 "equality"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "a_rhs" type class_ref 145833 // pathcmp
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Compare two paths. Returns canonicalPath = a_rhs.canonicalPath 
(ignoring trailing separator)"
      end

      operation 185897 "has_subpath"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "a_rhs" type class_ref 145833 // pathcmp
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Here subpath means that a_rhs is a subdirectory or file in this
directory.

NOTE: a is_subpath implies that this == create_common(a_rhs).

"
      end

      operation 185257 "leaf_at"
	const public explicit_return_type "unistr"
	nparams 1
	  param in name "a_count" explicit_type "uint"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Get part of path at position a_count"
      end

      extra_member 129193 "operator=="
	
	cpp "friend bool operator==(const pathcmp &a_lhs, const pathcmp &a_rhs)
{
  return a_lhs.equality (a_rhs);
}" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 148144 "ACCESS (base class)"
	
	cpp "
using QDir::path;
using QDir::exists;
using QDir::isRelative;

" ""
	java ""
	php ""
	python ""
	idl ""
	comment "using directives to get base class methods."
      end

      extra_member 147888 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 186025 "create_common"
	const public explicit_return_type "unistr"
	nparams 1
	  param in name "a_other" type class_ref 145833 // pathcmp
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Generate a path that has the greatest shared path between this and a_other.

Will returnempty string when paths are on different drives."
      end

      operation 186281 "create_relative"
	const public explicit_return_type "unistr"
	nparams 1
	  param in name "a_target" type class_ref 145833 // pathcmp
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Build a relative path from here to a_target.

canonical (path_ + relative (a_target)) <==> a_target"
      end

      operation 240041 "mkpath"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Create this and all parent directories for the current path."
      end

      operation 214697 "normalise"
	class_operation private explicit_return_type "unistr"
	nparams 1
	  param in name "a_path" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract}
{
  return -1 == ${p0}.find (other_separator_) ? ${p0} : normalise_(${p0});
}
"
	
	
	
	
	comment "Convert string to form with all separators as \"/\" (inline part)"
      end

      operation 214953 "normalise_"
	class_operation private explicit_return_type "unistr"
	nparams 1
	  param in name "a_path" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}{
  return ${p0}.replace (QRegExp(\"\\\\\\\\\"), default_separator_);
}"
	
	
	
	
	comment "Convert string to form with all separators as \"/\" (function part)"
      end

      operation 216105 "operator/"
	const public return_type class_ref 145833 // pathcmp
	nparams 1
	  param in name "rhs" type class_ref 145833 // pathcmp
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${abstract}
{
  return ${type}(path () + default_separator_ + ${p0}.path ());
}
"
	
	
	
	
	comment "Concatenate 2 paths"
      end

      operation 225321 "operator/"
	const public return_type class_ref 145833 // pathcmp
	nparams 1
	  param in name "rhs" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract}
{
  return ${type}(path () + default_separator_ + normalise (${p0}));
}
"
	
	
	
	
	comment "Concatenate 2 paths"
      end

      operation 224169 "path_localised"
	const public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract}
{
  return QDir::convertSeparators (path ());
}"
	
	
	
	
	comment "Output path using the current OS'S separators.  Used when
writing paths for external visibility."
      end

      operation 216361 "path_convert"
	const public explicit_return_type "unistr"
	nparams 1
	  param in name "a_trans" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "Create a copy of the path string that has all the separators replaced 
by some arbitrary string \"a_trans\"."
      end

      operation 214825 "setPath"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_path" explicit_type "unistr"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0}& ${p0}${v0}${)}${const}${volatile}${abstract}
{
  QDir::setPath (normalise (${p0}));
}
"
	
	
	
	
	comment "Change to a new internal path."
      end
    end

    class 148393 "style"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};

${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A Singleton container object for meta-style related information. This includes a 
factory method for creating style specific base_generators.

People implementing new build-system styles need to edit set_style 
to add a basic_style object for the new derived base_generator."
      classrelation 183600 // <dependency>
	relation 183472 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 183600 // <dependency>
	  b parent class_ref 133545 // bjam_generator
      end

      classrelation 182832 // <dependency>
	relation 182704 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 182832 // <dependency>
	  b parent class_ref 157737 // cmake_generator
      end

      classrelation 183344 // <dependency>
	relation 183216 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 183344 // <dependency>
	  b parent class_ref 135849 // gmake_generator
      end

      classrelation 182704 // <dependency>
	relation 182576 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 182704 // <dependency>
	  b parent class_ref 134697 // jam_generator
      end

      classrelation 165545 // <dependency>
	relation 164777 -_->
	  a package
	    cpp default "#include in source"
	    classrelation_ref 165545 // <dependency>
	  b parent class_ref 151849 // log
      end

      attribute 163113 "style_"
	class_attribute const_attribute private type class_ref 159017 // basic_style
	multiplicity "0..1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Singleton object."
      end

      operation 196649 "get_style"
	class_operation public return_type class_ref 159017 // basic_style
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}const ${type}& ${class}::${name}${(}${)}${const}${volatile}
{
${body}
}
"
	
	
	
	
	comment "Get the Singleton Style object. set_style must have been called
prior to calling this method."
      end

      operation 196777 "set_style"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "a_style" explicit_type "unistr"
	    defaultvalue "QString()"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}{
${body}
}
"
	
	
	
	
	comment "Set the style parameters."
      end

      operation 198185 "style"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${name}${(}${)}${volatile} = delete;
"
	
	
	
	
      end

      operation 198313 "~style"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile} {}
"
	
	
	
	
      end

      operation 198441 "style"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 148393 // style
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${)}${volatile} = delete;
"
	
	
	
	
	comment "no copy"
      end

      operation 198569 "operator="
	private return_type class_ref 148393 // style
	nparams 1
	  param in name "source" type class_ref 148393 // style
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${abstract} = delete;
"
	
	
	
	
	comment "no assign"
      end

      operation 250537 "style"
	stereotype "upcast"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 159017 // basic_style
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${)}${volatile} = delete;
"
	
	
	
	
	comment "create from parent class"
      end
    end

    class 151849 "log"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};

${inlines}"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Central point for handling logging and debugging messages."
      classrelation 165161 // <dependency>
	relation 164393 -_->
	  a package
	    cpp default "#include in source"
	    classrelation_ref 165161 // <dependency>
	  b parent class_ref 5248 // UmlCom
      end

      class 151977 "log_levels"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name}
{
${items}
};
"
	java_decl "${comment}${public}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl "${comment}${visibility}final class ${name} {
${items}}
"
	python_2_2 python_decl "class ${name}:
${docstring}${members}
"
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	comment "Logging levels"
	attribute 171177 "warn"
	  public type class_ref 151977 // log_levels
	  init_value "0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Base logging level, reports warning and error messages."
	end

	attribute 171305 "info"
	  public type class_ref 151977 // log_levels
	  init_value "1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Include information messages"
	end

	attribute 171433 "debug"
	  public type class_ref 151977 // log_levels
	  init_value "2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "include debugging messages"
	end
      end

      attribute 171561 "com"
	class_attribute public type class_ref 151849 // log
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Exemplar"
      end

      attribute 171689 "debug_file_"
	private explicit_type "QFile"
	multiplicity "*"
	stereotype "unique_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "File for debugging information. "
      end

      attribute 171817 "debug_os_"
	private type class_ref 162985 // QTextOStream
	multiplicity "*"
	stereotype "unique_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Output stream for debug builds. "
      end

      attribute 171049 "level_"
	private type class_ref 151977 // log_levels
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current logging level. (default is 'warn')"
      end

      extra_member 155824 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 207273 "log"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${name}${(}${)}${volatile}
: debug_file_ ()
, debug_os_ ()
, level_(warn)
{}
"
	
	
	
	
      end

      operation 183216 "log"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 151849 // log
	cpp_decl "    ${comment}${name}${(}${t0} && ${p0}${)}${volatile} = delete;
"
	
	
	
	
      end

      operation 183344 "log"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 151849 // log
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${)}${volatile} = delete;
"
	
	
	
	
      end

      operation 183472 "operator="
	private return_type class_ref 151849 // log
	nparams 1
	  param in name "source" type class_ref 151849 // log
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${abstract} = delete;
"
	
	
	
	
      end

      operation 223017 "~log"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile};
"
	cpp_def "${inline}${class}::${name}${(}${)}${volatile} 
{
${body}
}
"
	
	
	
	
	comment "Dtor to ensure correct order of deconstructing stream and file"
      end

      extra_member 155696 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 207401 "debug_log"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_fname" explicit_type "str"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} ${p0}${)}${const}${volatile}${staticnl}
{
BUTTER_ALWAYS (DEBUG, \"Programming error: attempt to set debug log in release build\");
${body}
}"
	
	
	
	
	comment "Open a_fname file for debug messages. (Only present with debug builds.)"
      end

      operation 207657 "is_debug"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract}
{
  return DEBUG && NULL != debug_os_.get ();
}
"
	
	
	
	
	comment "Is it possible to write debug messages."
      end

      operation 206889 "level"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract}
{
  return level_;
}
"
	
	
	
	
	comment "Get the logging level"
      end

      operation 207017 "level"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_val" explicit_type "int"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract}
{
  level_ = (0 >= ${p0} ? warn : (2 <= ${p0} ? debug : info ));
}
    
"
	
	
	
	
	comment "Set the logging level"
      end

      operation 207529 "stream"
	stereotype "reference"
	const public return_type class_ref 162985 // QTextOStream
	nparams 0
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${staticnl}
{
  BUTTER_ALWAYS (DEBUG, \"Programming error: attempt to get debug log in release build\");
  return *debug_os_;
}"
	
	
	
	
	comment "Get reference to debug stream. (Only present with debug builds.)

Calling this method before debug_log(filename) is undefined. This can
be tested with is_debug
\\pre is_debug"
      end

      operation 207145 "trace"
	public explicit_return_type "void"
	nparams 2
	  param in name "a_lvl" type class_ref 151977 // log_levels
	  param in name "a_msg" explicit_type "str"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} ${p1}${)}${const}${volatile}${staticnl}
{
  if (level_ >= ${p0}) UmlCom::trace (${p1});
}"
	
	
	
	
	comment "Write a message to the trace window"
      end
    end

    class 158889 "wix_installer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};

${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "(In progress) Class to generate WiX installer document.

UUIDs: http://www.ietf.org/rfc/rfc4122.txt
Windows see uuidgen.c for example
Linux see uuid.h and uuidgen"
      attribute 199209 "style_"
	class_attribute const_attribute private type class_ref 159017 // basic_style
	init_value "(\"<!--\", -->\", \"<!-- START\", \"-->\", \"<!-- END\", \"-->\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The style for wix documents"
      end

      attribute 197673 "wix_document"
	private type class_ref 147113 // compound_artifact
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The prototype WIX document"
      end

      operation 234537 "do_install"
	public explicit_return_type ""
	nparams 4
	  param in name "a_target" type class_ref 6913 // UmlArtifact
	  param in name "a_loc_var" explicit_type "unistr"
	  param in name "a_type" type class_ref 139305 // install_type
	  param in name "a_isdoc" explicit_type "bool"
	cpp_decl "    ${comment}${static}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${staticnl}
{
${body}
}
"
	
	
	
	
	comment "add installation entry"
      end

      operation 235817 "wix_installer"
	public explicit_return_type ""
	nparams 1
	  param in name "a_project" type class_ref 7937 // UmlPackage
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${)}${volatile};
"
	cpp_def "${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile} 
{
${body}
}
"
	
	
	
	
      end

      operation 235945 "~wix_installer"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile};
"
	cpp_def "${inline}${class}::${name}${(}${)}${volatile} 
{
${body}
}
"
	
	
	
	
      end

      operation 236073 "wix_installer"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 158889 // wix_installer
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${)}${volatile};
"
	
	
	
	
	comment "no copy"
      end

      operation 236201 "operator="
	private return_type class_ref 158889 // wix_installer
	nparams 1
	  param in name "source" type class_ref 158889 // wix_installer
	cpp_decl "    ${comment}${static}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${abstract};
"
	
	
	
	
	comment "no assign"
      end
    end

    class 160169 "rpm_installer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};

${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "(In progress) Class to generate rpm SPEC document."
    end
  end

  deploymentview 128041 "butter"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 152489 "base_generator"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
// Manual includes
#include <qregexp.h>
#include <stdexcept>
#include <qstack.h>
#include \"butter/config.h\"
// --
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 146985 // base_generator
      end
      comment "Base generator source file"
    end

    artifact 174249 "basic_style"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
#include <qtextstream.h>
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 159017 // basic_style
      end
    end

    artifact 135209 "bjam_generator"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
// Manual source includes
#include \"butter/config.h\"
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 133545 // bjam_generator
      end
      comment "Boost Jam generator source file."
    end

    artifact 152617 "butter"
      stereotype "library"
      associated_artifacts
	artifact_ref 132521 // location
	artifact_ref 134057 // qt
	artifact_ref 135209 // bjam_generator
	artifact_ref 136361 // jam_generator
	artifact_ref 137641 // gmake_generator
	artifact_ref 138793 // butter_constants
	artifact_ref 149296 // compound_document
	artifact_ref 150825 // utility
	artifact_ref 152233 // style
	artifact_ref 152361 // compound_artifact
	artifact_ref 152489 // base_generator
	artifact_ref 165929 // cmake_generator
	artifact_ref 174249 // basic_style
      end
      comment "Version of the butter plugout for building using the butter plugout."
    end

    artifact 136112 "butter_exe"
      stereotype "executable"
      associated_artifacts
	artifact_ref 134057 // qt
	artifact_ref 142889 // bouml
	artifact_ref 152617 // butter
	artifact_ref 154025 // main
      end
    end

    artifact 138793 "butter_constants"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
#include \"version.h\"
#include \"butter/config.h\"
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 137001 // butter_constants
      end
    end

    artifact 148393 "butter.plugout"
      stereotype "document"
      associated_artifacts
	artifact_ref 512 // UmlBaseActualParameter
	artifact_ref 640 // UmlBaseClassItem
	artifact_ref 768 // CppSettings
	artifact_ref 896 // UmlBaseFormalParameter
	artifact_ref 1024 // IdlSettings
	artifact_ref 1152 // JavaSettings
	artifact_ref 1280 // UmlTypeSpec
	artifact_ref 1536 // UmlBaseAttribute
	artifact_ref 1664 // UmlBaseClass
	artifact_ref 1792 // UmlBaseClassDiagram
	artifact_ref 1920 // UmlBaseClassMember
	artifact_ref 2048 // UmlBaseClassView
	artifact_ref 2176 // UmlBaseCollaborationDiagram
	artifact_ref 2304 // UmlBaseArtifact
	artifact_ref 2432 // UmlBaseComponentDiagram
	artifact_ref 2560 // UmlBaseComponentView
	artifact_ref 2688 // UmlBaseDeployment
	artifact_ref 2816 // UmlBaseDeploymentDiagram
	artifact_ref 2944 // UmlBaseDeploymentView
	artifact_ref 3072 // UmlBaseDiagram
	artifact_ref 3200 // UmlBaseExtraClassMember
	artifact_ref 3328 // UmlBaseItem
	artifact_ref 3456 // UmlBaseNode
	artifact_ref 3584 // UmlBaseOperation
	artifact_ref 3712 // UmlBasePackage
	artifact_ref 3840 // UmlBaseRelation
	artifact_ref 3968 // UmlBaseSequenceDiagram
	artifact_ref 4096 // UmlBaseUseCase
	artifact_ref 4224 // UmlBaseUseCaseDiagram
	artifact_ref 4352 // UmlBaseUseCaseView
	artifact_ref 4480 // UmlCom
	artifact_ref 4608 // UmlSettings
	artifact_ref 4736 // aRelationKind
	artifact_ref 4864 // aDirection
	artifact_ref 4992 // aVisibility
	artifact_ref 4993 // UmlActualParameter
	artifact_ref 5120 // anItemKind
	artifact_ref 5121 // UmlClassItem
	artifact_ref 5248 // CmdFamily
	artifact_ref 5249 // UmlFormalParameter
	artifact_ref 5376 // MiscGlobalCmd
	artifact_ref 5504 // OnInstanceCmd
	artifact_ref 5505 // UmlAttribute
	artifact_ref 5632 // ClassGlobalCmd
	artifact_ref 5633 // UmlClass
	artifact_ref 5760 // PackageGlobalCmd
	artifact_ref 5761 // UmlClassDiagram
	artifact_ref 5888 // UmlSettingsCmd
	artifact_ref 5889 // UmlClassMember
	artifact_ref 6016 // CppSettingsCmd
	artifact_ref 6017 // UmlClassView
	artifact_ref 6144 // JavaSettingsCmd
	artifact_ref 6145 // UmlCollaborationDiagram
	artifact_ref 6272 // IdlSettingsCmd
	artifact_ref 6273 // UmlArtifact
	artifact_ref 6400 // UmlParameter
	artifact_ref 6401 // UmlComponentDiagram
	artifact_ref 6528 // UmlBuiltin
	artifact_ref 6529 // UmlComponentView
	artifact_ref 6656 // UmlStereotype
	artifact_ref 6657 // UmlDeploymentDiagram
	artifact_ref 6784 // UmlBaseNcRelation
	artifact_ref 6785 // UmlDeploymentView
	artifact_ref 6912 // UmlBaseComponent
	artifact_ref 6913 // UmlDiagram
	artifact_ref 7041 // UmlExtraClassMember
	artifact_ref 7169 // UmlItem
	artifact_ref 7297 // UmlNode
	artifact_ref 7425 // UmlOperation
	artifact_ref 7553 // UmlPackage
	artifact_ref 7681 // UmlRelation
	artifact_ref 7809 // UmlSequenceDiagram
	artifact_ref 7937 // UmlUseCase
	artifact_ref 8065 // UmlUseCaseDiagram
	artifact_ref 8193 // UmlUseCaseView
	artifact_ref 128002 // UmlComponent
	artifact_ref 128228 // UmlNcRelation
	artifact_ref 132521 // location
	artifact_ref 135209 // bjam_generator
	artifact_ref 136361 // jam_generator
	artifact_ref 137641 // gmake_generator
	artifact_ref 138793 // butter_constants
	artifact_ref 150825 // utility
	artifact_ref 152233 // style
	artifact_ref 152361 // compound_artifact
	artifact_ref 152489 // base_generator
	artifact_ref 154025 // main
	artifact_ref 165929 // cmake_generator
	artifact_ref 174249 // basic_style
      end
      ncouples 10
      key "genpro pro" value "/home/finnerty/src/butter/butter.pro"
      key "genpro path" value "butter"
      key "genpro target" value "/home/finnerty/src/butter/butter2"
      key "genpro tmplt" value "app"
      key "genpro config" value "release warn_off qt thread"
      key "genpro defines" value "WITHCPP NO_LOG DEBUG=0"
      key "genpro includepath" value "include/bouml/ include/butter/ include/"
      key "genpro dependpath" value ""
      key "genpro objectsdir" value "/home/finnerty/src/butter/build"
      key "genpro footer" value ""
      comment "Version of the butter plugout buildable using genpro"
    end

    artifact 152361 "compound_artifact"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
// Manual includes
#include <utility>
// --
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
// Manual includes
#include <stdexcept>
#include \"butter/config.h\"
// --
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 147113 // compound_artifact
      end
    end

    artifact 149296 "compound_document"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
// Manual include
#include \"butter/config.h\"
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 168880 // compound_document
      end
    end

    artifact 141609 "config"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_CONFIG_H
#define @{PROJECT}_CONFIG_H 1
#include <string>
#include <stdexcept>

#ifdef NO_DBC
#define NO_DBC 1
#else
#define NO_DBC 0
#endif

inline void @{PROJECT}_ALWAYS(bool X, std::string Y)
{
   if (! X) throw std::runtime_error(Y);
}

inline void @{PROJECT}_REQUIRE(bool X, std::string Y)
{
   @{PROJECT}_ALWAYS(X,Y);
}

inline void @{PROJECT}_CHECK(bool X, std::string Y)
{
   if (! NO_DBC) @{PROJECT}_ALWAYS(X,Y);
}

inline void @{PROJECT}_ENSURE(bool X, std::string Y)
{
   if (! NO_DBC) @{PROJECT}_ALWAYS(X,Y);
}

#undef NO_DBC

#endif
"
      associated_classes
      end
      comment "C++ environment configuration information."
    end

    artifact 169641 "const_token_iterator"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
// Manual includes
#include <string>
#include <stdexcept>
#include <stack>
#include <iterator>
#if QT_VERSION < 300L
#include <qstring.h>
#endif
//
${declarations}
${namespace_start}
${definition}
${namespace_end}

namespace std {
	inline void swap(butter::const_token_iterator & lhs, butter::const_token_iterator & rhs)
	{ lhs.swap (rhs); }
}
#endif
"
      associated_classes
	class_ref 161321 // const_token_iterator
      end
    end

    artifact 165929 "cmake_generator"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
#include \"butter/config.h\"
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 157737 // cmake_generator
      end
    end

    artifact 155177 "generator"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
// Manual includes
// #include <qfile.h>
#include <qtextstream.h>
#include <qregexp.h>
#include <stdexcept>
#include <qstack.h>
#include <cstdlib>
#include <map>
// --
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      associated_classes
	class_ref 150697 // generator
      end
      comment "Intermediate generator template class."
    end

    artifact 137641 "gmake_generator"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
// Manual source includes
#include \"butter/config.h\"
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 135849 // gmake_generator
      end
      comment "Source for GNU make generator"
    end

    artifact 136361 "jam_generator"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
// Manual source includes
#include <qregexp.h>
#include \"butter/config.h\"
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 134697 // jam_generator
      end
      comment "Source file for Jam generator"
    end

    artifact 132521 "location"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
// Manual source includes
#include \"UmlDeploymentView.h\"
#include <qstack.h>
#include <stdexcept>
#include <qmessagebox.h>
#include <cstring>
#include \"butter/config.h\"
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 132393 // location
      end
    end

    artifact 154025 "main"
      stereotype "source"
      cpp_src "#include <qapplication.h>

#include \"UmlCom.h\"
#include \"UmlItem.h\"
#include \"UmlPackage.h\"
#include \"UmlArtifact.h\"
#include \"butter/base_generator.h\"
#include \"butter/basic_style.h\"
#include \"butter/location.h\"
#include \"butter/style.h\"
#include \"butter/butter_constants.h\"
#include \"butter/config.h\"

#include <qtextstream.h>
#include <qmessagebox.h>
#ifdef __unix__
#include <unistd.h>
#endif
#ifdef _WIN32
#include <Windows.h>
#endif

// the program is called with the socket port number in argument

int main( int argc, char ** argv )
{
  unsigned int port = 0; // Port for connection to bouml.
  // User-interaction variable
  //    0 = ask user
  //    1 = assume all answers are \"Ok\"
  //    2 = assume all answers are \"Abort/Cancel\"
  unsigned int interaction = 0;
  QApplication a( argc, argv );
  if ( argc < 2 )
  {
    return -1;
  }

  if( argc == 2 )
  {
    port = QString( argv[1] ).toUInt();
  }
  else
  {
    for( int c_ = 1; c_ != argc; ++c_ )
    {
      if( QString( argv[c_] ) == \"-test:ok\" )
      {
        interaction = 1;
      }
      else if ( QString( argv[c_] ) == \"-test:cancel\" )
      {
         interaction = 2;
      }
      else
      {
        port = QString( argv[c_] ).toUInt();
      }
    }
  }

  if ( UmlCom::connect( port ) )
  {
    try
    {
      UmlCom::trace( \"<b><i>jamfile/makefile</i> generator</b> \" + butter::butter_constants::BUTTER_VERSION + \"<br>\" );
      if ( DEBUG and 0 == interaction )
      {
        QString msg_;
        QTextOStream mos_( &msg_ );
#ifdef __unix__
        mos_ << \"Hit Ok to continue. If you want to debug this application attach to process [pid=\"
          << getpid() << \"] before continuing.\";
#else
#ifdef _WIN32
        mos_ << \"Hit Ok to continue. If you want to debug this application attach to process [Id=\"
          << GetCurrentProcessId() << \"] before continuing.\";
#else
        mos_ << \"Hit Ok to continue. If you want to debug this application attach to butter process now.\";
#endif
#endif
        QMessageBox msg_box_( butter::butter_constants::BUTTER_VERSION, msg_, QMessageBox::Warning, QMessageBox::Ok | QMessageBox::Default, QMessageBox::NoButton, QMessageBox::NoButton );
        msg_box_.exec();
      }
      BUTTER_CHECK( NULL != UmlPackage::getProject (), \"Error: no project defined!<br>\" );
      // Parse the project into a location tree
      std::unique_ptr< butter::location > base_( butter::location::parse_project( *UmlPackage::getProject(), interaction ) );
      // Generate the build-system files.
      std::unique_ptr< butter::base_generator > writer_( butter::style::get_style().create_writer() );
      writer_->create_system( *base_.get(), *UmlPackage::getProject() );
      // Write the build-system files.
      butter::location::write_documents( *base_.get() );
    }
    catch ( const std::exception & a_err )
    {
      UmlCom::trace( a_err.what () );
    }
    catch ( const char * a_what )
    {
      UmlCom::trace( a_what );
    }
    catch ( ... )
    {
      UmlCom::trace( \"Caught unknown exception.\" );
    }

    UmlCom::trace( \"<b><i>jamfile/makefile</i> generator</b> complete<br>\" );
    // must be called to cleanly inform that all is done
    UmlCom::bye();
  }

  UmlCom::close();
  return 0;
}

#ifdef _WIN32
#if QT_VERSION < 300L
QStringData * QString::shared_null = 0;
QString QString::null = QString ( 0 );
QChar QChar::null = 0;
#endif
#endif
"
      associated_classes
      end
      comment "The main function."
    end

    artifact 150953 "path_test"
      stereotype "source"
      cpp_src "// #include <QDir.h>
#include <butter/utility.h>
#include <iostream>

void do_path_test (QString const& a1, QString const& a2, QString const& a3, QString const& a4)
{
try {
#ifdef _MSC_VER
  unsigned int i;
#define MSC_NO_INT
#else
#define MSC_NO_INT unsigned int
#endif
  butter::pathcmp p1, p2;
  std::cerr << \"Created empty path\\n\";
  p1 = a1;
  std::cerr << \"Path1 \\\"\" << p1.path () << \"\\\" assigned from C string \\\"\" << a1 << \"\\\"\\n\";
  std::cerr << \"Has \" << p1.depth () << \" lvls\\n\";
  for (MSC_NO_INT i = 0; i < p1.depth (); ++i)
  {
    std::cerr << \"path[\" << i + 1 << \"] = \\\"\" << p1.leaf_at (i) << \"\\\"\\n\";
  }
  p2 = a2;
  std::cerr << \"Path2 \\\"\" << p2.path () << \"\\\" assigned from C string \\\"\" << a2 << \"\\\"\\n\";
  std::cerr << \"Has \" << p2.depth () << \" lvls\\n\";
  for (MSC_NO_INT i = 0; i < p2.depth (); ++i)
  {
    std::cerr << \"path[\" << i + 1 << \"] = \\\"\" << p2.leaf_at (i) << \"\\\"\\n\";
  }
  butter::pathcmp p3 (a3);
  std::cerr << \"Path3 \\\"\" << p3.path () << \"\\\" created from C string \\\"\" << a3 << \"\\\"\\n\";
  std::cerr << \"Has \" << p3.depth () << \" lvls\\n\";
  for (MSC_NO_INT i = 0; i < p3.depth (); ++i)
  {
    std::cerr << \"path[\" << i + 1 << \"] = \\\"\" << p3.leaf_at (i) << \"\\\"\\n\";
  }
  if (p1.equality (p2))
  {
    std::cerr << \"Correctly found that path 1 and 2 are equal.\\n\";
  }
  else
  {
    std::cerr << \"Incorrectly found that path 1 and 2 are not equal.\\n\";
  }
  p2 = a4;
  std::cerr << \"Path2 \\\"\" << p2.path () << \"\\\" reassigned from C string \\\"\" << a4 << \"\\\"\\n\";
  std::cerr << \"Has \" << p2.depth () << \" lvls\\n\";
  for (MSC_NO_INT i = 0; i < p2.depth (); ++i)
  {
    std::cerr << \"path[\" << i + 1 << \"] = \\\"\" << p2.leaf_at (i) << \"\\\"\\n\";
  }
  if (p1.equality (p2))
  {
    std::cerr << \"Incorrectly found that path 1 and 2 are equal.\\n\";
  }
  else
  {
    std::cerr << \"Correctly found that path 1 and 2 are not equal.\\n\";
  }
  if (p3.has_subpath (p1))
  {
    std::cerr << \"Correctly found that path 1 is a subpath of 3.\\n\";
  }
  else
  {
    std::cerr << \"Incorrectly found that path 1 is not a subpath of 3.\\n\";
  }
  if (p3.has_subpath (p2))
  {
    std::cerr << \"Incorrectly found that path 2 is a subpath of 3.\\n\";
  }
  else
  {
    std::cerr << \"Correctly found that path 2 is not a subpath of 3.\\n\";
  }
  std::cerr << \"Common path of 1 and 3 (should be == 3) is: \" << p1.create_common (p3) << \"\\n\";
  std::cerr << \"Common path of 3 and 1 (should be == 3) is: \" << p3.create_common (p1) << \"\\n\";
  std::cerr << \"Common path of 2 and 3 is: \" << p2.create_common (p3) << \"\\n\";
  std::cerr << \"Common path of 3 and 2 is: \" << p3.create_common (p2) << \"\\n\";
  std::cerr << \"Relative path 3 to 2 is: \" << p3.create_relative (p2) << \"\\n\";
  std::cerr << \"Relative path 2 to 3 is: \" << p2.create_relative (p3) << \"\\n\";
  std::cerr << \"Relative path 3 to 1 is: \" << p3.create_relative (p1) << \"\\n\";
  std::cerr << \"Relative path 1 to 3 is: \" << p1.create_relative (p3) << \"\\n\";
}
catch (const std::exception &err)
{
  std::cerr << \"Caught std::exception: \" << err.what () << \"\\n\";
}  
catch (char const *const err)
{
  std::cerr << \"Caught C string exception \" << err << \"\\n\";
}
catch (...)
{
  std::cerr << \"Caught unknown exception\\n\";
}  
}




int main (int argc, char** argv)
{
  do_path_test (\"/home/is/where/heart/is\"
	, \"/home/is/where/heart/is/\"
	, \"/home/is/where\"
	, \"/home/is/hwere/heart/is\");
  do_path_test (\"C:\\\\home\\\\is\\\\where\\\\heart\\\\is\"
	, \"C:\\\\home\\\\is\\\\where\\\\heart\\\\is\\\\\"
	, \"C:\\\\home\\\\is\\\\where\"
	, \"D:\\\\home\\\\is\\\\where\\\\heart\\\\is\");
  return 0;
}"
      associated_classes
      end
      ncouples 1
      key "butter flags" value "-fopenmp"
      comment "Source file for functionality test of pathcmp class."
    end

    artifact 152233 "style"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
// Manual include
#include <qtextstream.h>
#include \"butter/config.h\"
//--
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 148393 // style
      end
    end

    artifact 164777 "test_path"
      stereotype "executable"
      associated_artifacts
	artifact_ref 134057 // qt
	artifact_ref 142889 // bouml
	artifact_ref 150825 // utility
	artifact_ref 150953 // path_test
      end
      comment "Simple program to exercise pathcmp class."
    end

    artifact 150825 "utility"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_${NAME}_HPP
#define @{PROJECT}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
#include <stdexcept>
#include <stack>
#include <qregexp.h>
#include \"butter/config.h\"
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 145833 // pathcmp
	class_ref 151849 // log
      end
      comment "Utility classes log and pathcmp"
    end

    artifact 128944 "makefile"
      stereotype "document"
      comment "##START:version
#Butter version 1.2beta.175
##END:version
##START:date
#Wed Nov 8 20:00:39 2017
##END:date
##START:preamble
include $(ROOTDIR)/M_sys.mk

##END:preamble
##START:target butter
BUTTER_BUTTERSRC :=  \\
	jam_generator.cpp \\
	butter_constants.cpp \\
	utility.cpp \\
	bjam_generator.cpp \\
	compound_artifact.cpp \\
	location.cpp \\
	base_generator.cpp \\
	basic_style.cpp \\
	gmake_generator.cpp \\
	cmake_generator.cpp \\
	compound_document.cpp \\
	style.cpp
BUTTER_BUTTER_DINC := $(filter %$(sufdep), $(BUTTER_BUTTERSRC:.cpp=$(sufdep))) $(filter %$(sufdep), $(BUTTER_BUTTERSRC:.c=$(sufdep)))
butter$(suflib): LDFLAGS+= -L${QTDIR}/lib64 -lqt-mt -lm
butter$(suflib) $(BUTTER_BUTTER_DINC) : CPPFLAGS+=-I${QTDIR}/include -DQT_NO_DEBUG -DQT_SHARED -DQT_THREAD_SUPPORT 
BUTTER_BUTTER_OBJ+=$(filter %$(sufobj), $(BUTTER_BUTTERSRC:.cpp=$(sufobj)))
USEROBJ+=$(BUTTER_BUTTER_OBJ)
butter$(suflib) : $(BUTTER_BUTTER_SRC) $(BUTTER_BUTTER_DINC)
-include $(BUTTER_BUTTER_DINC)
$(eval $(call do_archive,butter$(suflib),$(BUTTER_BUTTER_OBJ)))

all :: butter$(suflib)
TARGETS+=butter$(suflib)

$(eval $(call do_install,butter$(suflib),LIB))

##END:target butter
##START:target test_path
BUTTER_TEST_PATHSRC :=  \\
	path_test.cpp \\
	utility.cpp
BUTTER_TEST_PATH_DINC := $(filter %$(sufdep), $(BUTTER_TEST_PATHSRC:.cpp=$(sufdep))) $(filter %$(sufdep), $(BUTTER_TEST_PATHSRC:.c=$(sufdep)))
test_path$(sufexe): LDFLAGS+= -L${QTDIR}/lib64 -lqt-mt -lm
test_path$(sufexe) $(BUTTER_TEST_PATH_DINC) : CPPFLAGS+=-I${QTDIR}/include -DQT_NO_DEBUG -DQT_SHARED -DQT_THREAD_SUPPORT 
BUTTER_TEST_PATH_OBJ+=$(ROOTDIR)/src/bouml/bouml$(suflib)

path_test$(sufobj) : CCCFLAGS+=-fopenmp 


BUTTER_TEST_PATH_OBJ+=$(filter %$(sufobj), $(BUTTER_TEST_PATHSRC:.cpp=$(sufobj)))
USEROBJ+=$(BUTTER_TEST_PATH_OBJ)
test_path$(sufexe) : $(BUTTER_TEST_PATH_SRC) $(BUTTER_TEST_PATH_DINC)
-include $(BUTTER_TEST_PATH_DINC)
$(eval $(call do_link_exe,test_path$(sufexe),$(BUTTER_TEST_PATH_OBJ)))

all :: test_path$(sufexe)
TARGETS+=test_path$(sufexe)

$(eval $(call do_install,test_path$(sufexe),BIN))

##END:target test_path
##START:target butter_exe
BUTTER_BUTTER_EXESRC :=  \\
	main.cpp
BUTTER_BUTTER_EXE_DINC := $(filter %$(sufdep), $(BUTTER_BUTTER_EXESRC:.cpp=$(sufdep))) $(filter %$(sufdep), $(BUTTER_BUTTER_EXESRC:.c=$(sufdep)))
butter_exe$(sufexe): LDFLAGS+= -L${QTDIR}/lib64 -lqt-mt -lm
butter_exe$(sufexe) $(BUTTER_BUTTER_EXE_DINC) : CPPFLAGS+=-I${QTDIR}/include -DQT_NO_DEBUG -DQT_SHARED -DQT_THREAD_SUPPORT 
BUTTER_BUTTER_EXE_OBJ+=$(ROOTDIR)/src/bouml/bouml$(suflib)
BUTTER_BUTTER_EXE_OBJ+=$(ROOTDIR)/src/butter/butter$(suflib)

BUTTER_BUTTER_EXE_OBJ+=$(filter %$(sufobj), $(BUTTER_BUTTER_EXESRC:.cpp=$(sufobj)))
USEROBJ+=$(BUTTER_BUTTER_EXE_OBJ)
butter_exe$(sufexe) : $(BUTTER_BUTTER_EXE_SRC) $(BUTTER_BUTTER_EXE_DINC)
-include $(BUTTER_BUTTER_EXE_DINC)
$(eval $(call do_link_exe,butter_exe$(sufexe),$(BUTTER_BUTTER_EXE_OBJ)))

all :: butter_exe$(sufexe)
TARGETS+=butter_exe$(sufexe)

$(eval $(call do_install,butter_exe$(sufexe),BIN))

##END:target butter_exe
"
    end
  end

  package_ref 141232 // butter-test
end
