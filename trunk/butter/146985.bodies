class build_writer
!!!200233.cpp!!!	find_hdr_link(in a_item : UmlItem, inout a_hdr : unistr, inout a_link : unistr, inout a_flag : unistr, in a_section_label : unistr, in a_not_doc : bool) : void
// Process any data from properties.
QString value_;
if (item_traits::property_value (a_item, item_traits::butter_flags_name, value_))
{
  if (not a_flag.isEmpty ()) { a_flag.append (" "); }
  a_flag.append (value_);
}
if (item_traits::property_value (a_item, item_traits::butter_ldflags_name, value_))
{
  if (not a_link.isEmpty ()) { a_link.append (" "); }
  a_link.append (value_);
}
if (item_traits::property_value (a_item, item_traits::butter_include_name, value_))
{
  if (not a_hdr.isEmpty ()) { a_hdr.append (" "); }
  a_hdr.append (value_);
}
// For non-documents any data from the description.
if (a_not_doc)
{
  QString section_ (section (a_section_label, const_cast< UmlItem& >(a_item).description ()));
  if (section_.isEmpty ())
  {
    section_ = section (item_traits::generic_section, const_cast< UmlItem& >(a_item).description ());
  }
  if (not section_.isEmpty ())
  {
    QRegExp hdr_re_ ("^ *" + item_traits::header_label + " *= *");
    QRegExp link_re_ ("^ *" + item_traits::link_label + " *= *");
    QRegExp flag_re_ ("^ *" + item_traits::flag_label + " *= *");
    if (not section_.isEmpty ())
    {
      QTextIStream section_is_ (&section_);
      while (not section_is_.atEnd ())
      {
        const QString line_ (section_is_.readLine ());
        int length_;
        if (-1 != hdr_re_.match (line_, 0, &length_))
        {
          if (not a_hdr.isEmpty ()) { a_hdr.append (" "); }
          a_hdr.append (line_.mid (length_));
        }
        else if (-1 != link_re_.match (line_, 0, &length_))
        {
          if (not a_link.isEmpty ()) { a_link.append (" "); }
          a_link.append (line_.mid (length_));
        }
        else if (-1 != flag_re_.match (line_, 0, &length_))
        {
          if (not a_flag.isEmpty ()) { a_flag.append (" "); }
          a_flag.append (line_.mid (length_));
        }
      }
    }
  }
}
!!!194089.cpp!!!	get_artifact(inout a_loc : location, in a_name : unistr) : compound_artifact
// Get deployment views from current location's packages
std::auto_ptr< compound_artifact > Result;
if (a_loc.packages ().count () > 0)
{
  QPtrVector< UmlItem > docs_ = a_loc.find_uml_document (a_name);
  // If any documents found
  if (not docs_.isEmpty ())
  {
    Result.reset (new compound_artifact (dynamic_cast< UmlArtifact& >(*docs_.at (0))));
    for (unsigned int k_ = 1; k_ < docs_.count (); ++k_)
    {
      UmlItem * item_ = docs_.at (k_);
      Result->merge (dynamic_cast< UmlArtifact& >(*item_));
      log::com.trace (log::info, "<p><b>Note:</b> Removing duplicated build file from Package " + item_->parent ()->name () + "</p>\n");
      // item_->parent ()->children ().remove (item_->parent ()->children ().findRef (item_));
      item_->set_Name (("OLD_" + a_name).utf8 ());
    }
    // Reset the artifact (keeps section labels but empties content)
    Result->reset ();
  }
}
if (NULL == Result.get ())
{
  // This will throw an error if no packages exist.
  Result.reset (new compound_artifact (*a_loc.create_uml_document (a_name)));
}
return Result;
!!!192425.cpp!!!	section(in a_section : unistr, in a_desc : unistr) : unistr
static const QString marker_start_ ("${" + item_traits::section_prefix);
const QString marker_phrase_ (marker_start_ + a_section + "}");
QString Result;
int l_start (a_desc.find (marker_phrase_));
if (-1 != l_start)
{
  // Found a_section start, search from here to end for next section
  int l_end (a_desc.find (marker_start_, l_start + marker_phrase_.length ()));
  if (-1 != l_end)
  {
    Result = a_desc.mid (l_start + marker_phrase_.length (), l_end - (l_start + marker_phrase_.length ()));
  }
  else
  {
    Result = a_desc.mid (l_start + marker_phrase_.length ());
  }
}
// else ...
// Found no section titles --> return empty string
return Result;
