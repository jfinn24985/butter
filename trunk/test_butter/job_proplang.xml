<?xml version = '1.0'?>
<job>
    <property name="basefile" if="build-style=standard" >Jamfile</property>
    <property name="sysfile"  if="build-style=standard" >Jamrules</property>
    <property name="mainfile" if="build-style=standard" >Jamfile</property>
    <property name="basefile" if="build-style=make" >makefile</property>
    <property name="sysfile"  if="build-style=make" >%(make-sys)s</property>
    <property name="mainfile" if="build-style=make" >makefile</property>
    <property name="basefile" if="build-style=boost" >Jamroot</property>
    <property name="sysfile"  if="build-style=boost" >local.jam</property>
    <property name="mainfile" if="build-style=boost" >Jamfile</property>
    <property name="basefile" if="build-style=cmake" >CMakeLists.txt</property>
    <property name="sysfile"  if="build-style=cmake" >local.cmake</property>
    <property name="mainfile" if="build-style=cmake" >CMakeLists.txt</property>
    <property name="lib-prefix" if="build-style=boost" >lib</property>
    <property name="deploy-base" >%(base-dir)s/%(project)s/trunk/test/%(project)s</property>
    <property name="local-base" >%(deploy-base)s/output</property>
    <stage>Test generating source and build system from a single level project with 2 targets
      <verb-list category="setup" >
        Initialise the test location with latest copy of test.
        <verb type="file-list" >
          <property name="base" >%(base-dir)s</property>
          <property name="file-type" >directory</property>
          <property name="verify" >recreate</property>
          <property name="location" >%(project)s</property>
        </verb>
        <verb type="check-out" >
          <property name="base" >%(base-dir)s/%(project)s</property>
          <property name="type" >%(checkout-tool)s</property>
          <property name="branch" >%(project)s%(checkout-suf)s</property>
          <property name="location" >%(checkout-url)s/%(branch)s</property>
        </verb>
        <verb type="patch" >
          <property name="base">%(base-dir)s/%(project)s/trunk/test/%(project)s</property>
          <property name="location" >%(patch-file)s</property>
        </verb>

      </verb-list>
      <verb-list category="execute">Generate the build system and the source code
        <!--verb type="system" >%(bouml)s PATH{%(deploy-base)s/%(project)s.prj} -exec %(plug-out1)s -exit</verb -->
        <verb type="system" >%(bouml)s PATH{%(deploy-base)s/%(project)s.prj} -exec %(plug-out1)s -test:ok -exit</verb>
        <verb type="system" >%(bouml)s PATH{%(deploy-base)s/%(project)s.prj} -exec %(plug-out2)s -exit</verb>
      </verb-list>
      <verb-list category="verify" >
        Verify that the correct files have been produced
        <property name="test-phrase">3.9.1 style-dependent build files exist</property>
        <verb type="file-list" >
          <property name="base" >%(local-base)s/src</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >%(mainfile)s</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(local-base)s/src</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >fortran.f</property>
          <property name="test-phrase">2.3.2 Document as non-C++ (is Fortran) source file</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(local-base)s/doc</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >%(mainfile)s</property>
          <property name="test-phrase">X.X.X Library (other) build file</property>
        </verb> 
        <verb type="file-list" >
          <property name="base" >%(local-base)s/doc</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >program.t2t</property>
          <property name="test-phrase">2.3.2 Document as non-C++ (t2t) source file</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(local-base)s</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >%(basefile)s %(sysfile)s</property>
        </verb>
      </verb-list>
    </stage>
    <stage>
      Perform compilation and test compilation success
      <verb-list category="execute" >
       <property name="compile-command"  if="build-style=cmake" >/bin/bash -c "{ pushd PATH{%(local-base)s} %(cmdsep)s
           { PATH{%(build-tool)s} %(build-arg)s &gt; build.log %(cmdsep)s
           PATH{%(build-tool)s} %(build-arg)s &gt;&gt; build.log %(cmdsep)s
           PATH{%(make)s} -k VERBOSE=1 %(make-arg)s install &gt;&gt; build.log %(cmdsep)s
           %(cat)s build.log %(cmdsep)s } %(cmdsep)s popd %(cmdsep)s }" </property>
       <property name="compile-command">/bin/bash -c "{ pushd PATH{%(local-base)s} %(cmdsep)s
           { PATH{%(build-tool)s} %(build-arg)s &gt; build.log %(cmdsep)s
           %(cat)s build.log %(cmdsep)s } %(cmdsep)s popd %(cmdsep)s }" </property>
        <verb type="system" >%(compile-command)s</verb>
      </verb-list>
      <verb-list category="verify" >
        Verify that the correct files have been produced
        <verb type="file-list" >
          <property name="base" >%(local-base)s/%(stage-bin-dir)s</property>
          <property name="file-type" >executable</property>
          <property name="verify" >exist</property>
          <property name="location" >source_test%(exe-suf)s shared_sqr%(exe-suf)s static_sqr%(exe-suf)s</property>
          <property name="test-phrase">2.1.1 Built executables using build system</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(local-base)s/%(stage-bin-dir)s</property>
          <property name="file-type" >executable</property>
          <property name="verify" >exist</property>
          <property name="location" >fortprog%(exe-suf)s</property>
          <property name="test-phrase">X.X.X Built executable with Fortran source</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(local-base)s/%(stage-lib-dir)s</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="error" >nonfatal</property>
          <property name="location">%(lib-prefix)ssquareshare%(shr-suf)s</property>
           <property name="test-phrase">2.1.2 built shared library using build system</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(local-base)s/src/Library</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="error" >nonfatal</property>
          <property name="location" >%(lib-prefix)ssquarestatic%(ark-suf)s</property>
          <property name="test-phrase">2.1.2 built static library using build system</property>
        </verb>
         <verb type="file-list" >
          <property name="base" >%(local-base)s/%(stage-man-dir)s</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="error" >nonfatal</property>
          <property name="location" >program.man</property>
          <property name="test-phrase">2.3.1 Non-standard target</property>
        </verb>
         <verb type="file-list" >
          <property name="base" >%(local-base)s/%(stage-html-dir)s</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="error" >nonfatal</property>
          <property name="location" >program.html</property>
          <property name="test-phrase">2.3.1 Non-standard target</property>
        </verb>
      </verb-list>
    </stage>
    <stage>Test run the first executable.
      <verb-list category="execute" >Run &quot;program&quot;
	<verb type="system" >/bin/bash -c "{ pushd PATH{%(local-base)s} %(cmdsep)s PATH{%(stage-bin-dir)s/source_test%(exe-suf)s} > output1 %(cmdsep)s %(cat)s output1 %(cmdsep)s popd %(cmdsep)s }" </verb>
      </verb-list>
      <verb-list category="verify" >
      Verify that the correct files have been produced
        <verb type="file-list" >
          <property name="base" >%(local-base)s</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >output1</property>
        </verb>
        <verb type="compare" >
          <property name="base" >%(local-base)s</property>
          <property name="location" >output1</property>
          <property name="error" >nonfatal</property>
          <property name="test-phrase">1.2.1 Output of compiled program verified</property>
        </verb>
      </verb-list>
    </stage>
     <stage>Test run the fortran executable.
      <verb-list category="execute" >Run &quot;program&quot;
	<verb type="system" >/bin/bash -c "{ pushd PATH{%(local-base)s} %(cmdsep)s PATH{%(stage-bin-dir)s/fortprog%(exe-suf)s} > output2 %(cmdsep)s %(cat)s output2 %(cmdsep)s popd %(cmdsep)s }" </verb>
      </verb-list>
      <verb-list category="verify" >
      Verify that the correct files have been produced
      <property name="base" >%(local-base)s</property>
        <verb type="file-list" >
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >output2</property>
        </verb>
        <verb type="compare" >
          <property name="location" >output2</property>
	      <property name="type" >search</property>
          <property name="search-regex" >Precision is  *16</property>
          <property name="test-phrase">1.2.1 Output of compiled program verified</property>
        </verb>
      </verb-list>
    </stage>
     <stage>Test run the library-linked executables.
      <verb-list category="execute" >Run &quot;program&quot;
	<verb type="system" >/bin/bash -c "{ pushd PATH{%(local-base)s} %(cmdsep)s PATH{%(stage-bin-dir)s/static_sqr%(exe-suf)s} 12.0 1 > output3 %(cmdsep)s %(cat)s output3 %(cmdsep)s  popd %(cmdsep)s }" </verb>
      </verb-list>
      <verb-list category="execute" >Run &quot;program&quot;
	<property name="library-path">%(local-base)s/%(stage-lib-dir)s</property>
	<verb type="system" >/bin/bash -c "{ pushd PATH{%(local-base)s} %(cmdsep)s export %(set-library-path)s PATH{%(stage-bin-dir)s/shared_sqr%(exe-suf)s} 12.0 1 > output4 %(cmdsep)s %(cat)s output4 %(cmdsep)s popd %(cmdsep)s }" </verb>
      </verb-list>
       <verb-list category="verify" >
      Verify that the correct files have been produced
      <property name="base" >%(local-base)s</property>
        <verb type="file-list" >
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >output3 output4</property>
        </verb>
        <verb type="compare" >
	  <property name="type" >search</property>
          <property name="search-regex" >Halley algorithm</property>
          <property name="location" >output3 output4</property>
          <property name="test-phrase">1.2.1 Output of compiled program verified</property>
        </verb>
      </verb-list>
    </stage>
    <stage>
      Clean-up stage
      <verb-list category="cleanup">
        Clean up operations
        <verb type="file-list" >
          <property name="base" >%(base-dir)s</property>
          <property name="file-type" >directory</property>
          <property name="verify" >remove</property>
          <property name="location" >%(project)s</property>
        </verb>
      </verb-list>
    </stage>
</job>
