<?xml version = '1.0'?>
<job>
    <property name="base" >%(base-dir)s/%(project)s</property>
    <property name="patch-dir" >patch</property>
    <stage>Test generating source and build system from a single level project with 2 targets
      <verb-list category="setup" >
        Initialise the test location with latest copy of test.
        <verb type="file-list" >
          <property name="file-type" >directory</property>
          <property name="verify" >recreate</property>
          <property name="location" >.</property>
        </verb>
        <verb type="check-out" >
          <property name="type" >%(checkout-tool)s</property>
          <property name="branch" >%(project)s%(checkout-suf)s</property>
          <property name="location" >%(checkout-url)s/%(branch)s</property>
        </verb>
        <verb type="patch" >
          <property name="location" >%(patch-file)s</property>
        </verb>

      </verb-list>
      <verb-list category="execute" >
        Generate the build system and the source code
        <verb type="system" >%(bouml)s PATH{%(base-dir)s/%(project)s/%(project)s.prj} -exec cpp_generator -exit</verb>
        <verb type="system" >%(bouml)s PATH{%(base-dir)s/%(project)s/%(project)s.prj} -exec butter -exit</verb>
      </verb-list>
      <verb-list category="verify" >
        Verify that the correct files have been produced
        <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/include/Executable</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >example_exe.hpp</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/src/Executable</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >example_exe.cpp %(mainfile)s</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/src/Executable</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >fortran.f</property>
          <property name="test-phrase">2.3.2 Document as non-C++ source file</property>
        </verb>
        <verb type="compare" >
          <property name="error" >nonfatal</property>
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s</property>
          <property name="compare-base" >%(base-dir)s/%(project)s/canon.%(build-tool)s</property>
          <property name="location" >src/Executable/%(mainfile)s</property>
          <property name="test-phrase">1.1.3 build file in subdirectory matches canon</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/include/Library</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >example_lib.hpp</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/src/Library</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >example_lib.cpp %(mainfile)s</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/src/Library</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >example_c.c</property>
          <property name="test-phrase">2.3.2 Document as non-C++ source file</property>
        </verb>
        <verb type="compare" >
          <property name="error" >nonfatal</property>
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s</property>
          <property name="compare-base" >%(base-dir)s/%(project)s/canon.%(build-tool)s</property>
          <property name="location" >src/Library/%(mainfile)s</property>
          <property name="test-phrase">1.1.3 build file in subdirectory matches canon</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >%(basefile)s %(sysfile)s</property>
          <property name="test-phrase">3.9.1 style-dependent build files in top directory exist</property>
        </verb>
        <verb type="compare" >
          <property name="error" >nonfatal</property>
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s</property>
          <property name="compare-base" >%(base-dir)s/%(project)s/canon.%(build-tool)s</property>
          <property name="location" >%(basefile)s %(sysfile)s</property>
          <property name="test-phrase">1.1.3 build files in top directory match canon</property>
        </verb>
      </verb-list>
    </stage>
    <stage>
      Perform compilation and test compilation success
      <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s</property>
      <verb-list category="execute" >
        <verb type="system" >pushd PATH{%(base)s} %(cmdsep)s PATH{%(build-tool)s} %(build-arg)s | tee build.log; popd</verb>
      </verb-list>
      <verb-list category="verify" >
        Verify that the correct files have been produced
        <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/%(build-dir)s/src/Executable%(build-var)s</property>
          <property name="file-type" >executable</property>
          <property name="verify" >exist</property>
          <property name="location" >%(exe-name)s</property>
          <property name="test-phrase">2.1.1 Built executable using build system</property>
        </verb>
        <property name="compare-command" >grep</property>
        <property name="error" >nonfatal</property>
        <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s</property>
        <property name="compare-base" ># </property>
        <property name="location" >build.log</property>
        <!-- Check butter flags -->
        <verb type="compare" >
          <property name="compare-args" >'PROJ_FLAG.*example_lib.cpp'</property>
          <property name="test-phrase">3.4.1a 'butter flags' on project</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'PROJ_FLAG.*example_exe.cpp'</property>
          <property name="test-phrase">3.4.1b 'butter flags' on project</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'PROJ_FLAG.*example_c.c'</property>
          <property name="test-phrase">3.4.1c 'butter flags' on project with non-C++ source</property>
        </verb>
         <verb type="compare" >
          <property name="compare-args" >'EXE_FLAG.*example_exe.cpp'</property>
          <property name="test-phrase">3.4.2 'butter flags' on executable</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'LIB_FLAG.*example_lib.cpp'</property>
          <property name="test-phrase">3.4.3 'butter flags' on library</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'LIB_FLAG.*example_c.c'</property>
          <property name="test-phrase">3.4.3 'butter flags' on library with non-C++ source</property>
        </verb>
         <verb type="compare" >
          <property name="compare-args" >'FOR_C_FLAG.*example_c.c'</property>
          <property name="test-phrase">3.4.5 'butter flags' on document</property>
        </verb>
        <!-- Check butter include -->

        <verb type="compare" >
          <property name="compare-args" >'proj_include.*example_lib.cpp'</property>
          <property name="test-phrase">3.5.1a 'butter include' on project</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'proj_include.*example_exe.cpp'</property>
          <property name="test-phrase">3.5.1b 'butter include' on project</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'proj_include.*example_c.c'</property>
          <property name="test-phrase">3.5.1c 'butter include' on project with non-C++ source</property>
        </verb>
         <verb type="compare" >
          <property name="compare-args" >'exe_include.*example_exe.cpp'</property>
          <property name="test-phrase">3.5.2 'butter include' on executable</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'lib_include.*example_lib.cpp'</property>
          <property name="test-phrase">3.5.3 'butter include' on library</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'lib_include.*example_c.c'</property>
          <property name="test-phrase">3.5.3 'butter include' on library with non-C++ source</property>
        </verb>
         <verb type="compare" >
          <property name="compare-args" >'doc_include.*example_c.c'</property>
          <property name="test-phrase">3.5.5 'butter include' on document</property>
        </verb>
        <!-- Check butter ldflags -->

        <verb type="compare" >
          <property name="compare-args" >'proj_ldflags.*liblibrary'</property>
          <property name="test-phrase">3.7.1a 'butter ldflags' on project</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'proj_ldflags.*program'</property>
          <property name="test-phrase">3.7.1b 'butter ldflags' on project</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >-E '(exe_ldflags.*program|program.*exe_ldflags)'</property>
          <property name="test-phrase">3.7.2 'butter ldflags' on executable</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >-E '(lib_ldflags.*liblibrary|liblibrary.*lib_ldflags)'</property>
          <property name="test-phrase">3.7.3 'butter ldflags' on library (shared only)</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >-E '(exe_f_ldflags.*fortprog|fortprog.*exe_f_ldflags)'</property>
          <property name="test-phrase">3.7.3 'butter ldflags' on non-C++ executable</property>
        </verb>
         <verb type="compare" >
          <property name="compare-args" >-E '(doc_ldflags.*liblibrary|liblibrary.*doc_ldflags)'</property>
          <property name="test-phrase">3.7.5 'butter ldflags' on document (shared only)</property>
        </verb>

        <!-- Check flags for non-C++ sources -->

        <verb type="compare" >
          <property name="compare-args" >'run_t2t'</property>
          <property name="test-phrase">3.2.1 'butter buildfile' on library(other)</property>
        </verb>
         <verb type="compare" >
          <property name="compare-args" >'run_t2t.*program.man'</property>
          <property name="test-phrase">3.8.2 'butter other' on document</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'txt2tags.*program.t2t'</property>
          <property name="test-phrase">3.3.1 'butter compiler' on document</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'gfortran.*fortran.f'</property>
          <property name="test-phrase">3.3.1 'butter compiler' on document</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'gfortran.*fortprog'</property>
          <property name="test-phrase">3.3.2 'butter compiler' on executable</property>
        </verb>
  



      </verb-list>
      <verb-list category="verify" >
        Verify that the correct files have been produced
        <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/%(build-dir)s/src/Executable%(build-var)s</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >%(exe-name)s</property>
          <property name="test-phrase">3.1.1 Compilation with 'butter build-dir'</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/%(build-dir)s/src/Library%(build-var)s</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >%(library-name)s</property>
          <property name="test-phrase">2.1.2 built library using build system</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/%(build-dir)s/src/Executable%(build-var)s</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >program.man</property>
          <property name="test-phrase">2.3.1 Non-standard target</property>
        </verb>
       <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/%(build-dir)s/src/Library%(build-var)s</property>
          <property name="file-type" >file</property>
          <property name="verify" >nonexist</property>
          <property name="error" >nonfatal</property>
          <property name="location" >example_lib.o example_c.o</property>
        </verb>
       </verb-list>
    </stage>
    <stage>Test run the executable.
      <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/%(build-dir)s</property>
      <verb-list category="execute" >Run &quot;program&quot;
        <verb type="system" >pushd PATH{%(base)s} %(cmdsep)s LD_LIBRARY_PATH=src/Library%(build-var)s %(cmdsep)s src/Executable%(build-var)s/%(exe-name)s %(base-dir)s/%(project)s/%(test-dir)s/lorem.txt > output %(cmdsep)s popd</verb>
      </verb-list>%(exe-name)s
      <verb-list category="verify" >
      Verify that the correct files have been produced
        <verb type="file-list" >
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >output</property>
        </verb>
        <verb type="compare" >
          <property name="location" >output</property>
          <property name="compare-base" >%(base-dir)s/%(project)s/%(test-dir)s</property>
          <property name="test-phrase">1.2.1 Output of compiled program verified</property>
        </verb>
      </verb-list>
    </stage>
    <stage>Test install target.
      <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s</property>
     <verb-list category="execute" >
        <verb type="system" >pushd PATH{%(base)s} %(cmdsep)s PATH{%(build-tool)s} %(build-install)s | tee install.log; popd</verb>
      </verb-list>
       <verb-list category="verify" >
      Verify that the correct files have been removed
       <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/%(install-dir)s/libexec</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >%(library-name)s</property>
          <property name="test-phrase">1.2.3 Successful library install</property>
        </verb>
        <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/%(install-dir)s/sbin</property>
          <property name="file-type" >file</property>
          <property name="verify" >exist</property>
          <property name="location" >%(exe-name)s</property>
          <property name="test-phrase">1.2.3 Successful executable install</property>
        </verb>
        <property name="compare-command" >grep</property>
        <property name="error" >nonfatal</property>
        <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s</property>
        <property name="compare-base" ># </property>
        <property name="location" >install.log</property>
        <!-- Check butter install -->
        <verb type="compare" >
          <property name="compare-args" >'%(install-dir)s/sbin/%(exe-name)s'</property>
          <property name="test-phrase">3.6.1 'butter install' on executable</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'%(install-dir)s/libexec/%(library-name)s'</property>
          <property name="test-phrase">3.6.1 'butter install' on library</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'%(install-dir)s/share/man/program.man'</property>
          <property name="test-phrase">3.6.1 'butter install' on library (other)</property>
        </verb>
        <verb type="compare" >
          <property name="compare-args" >'%(install-dir)s/share/man/program.t2t'</property>
          <property name="test-phrase">3.6.2 'butter install' on docuemnt</property>
        </verb>

         </verb-list>
    </stage>

    <stage>Test clean target.
      <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s</property>
     <verb-list category="execute" >
        <verb type="system" >pushd PATH{%(base)s} %(cmdsep)s PATH{%(build-tool)s} %(build-clean)s %(cmdsep)s popd</verb>
      </verb-list>
       <verb-list category="verify" >
      Verify that the correct files have been removed
       <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/src/Library</property>
          <property name="file-type" >file</property>
          <property name="verify" >nonexist</property>
          <property name="location" >%(library-name)s</property>
          <property name="test-phrase">1.2.4 Library has gone, successful clean</property>
        </verb>
	<!--
        <verb type="file-list" >
          <property name="base" >%(base-dir)s/%(project)s/%(test-dir)s/src/Executable</property>
          <property name="file-type" >file</property>
          <property name="verify" >nonexist</property>
          <property name="location" >example_exe.o %(exe-name)s Jamfile</property>
          <property name="test-phrase">Dummy test to stop job clean</property>
        </verb>
        -->
        </verb-list>
    </stage>
    <stage>
      Clean-up stage
      <verb-list category="cleanup">
        Clean up operations
       <verb type="file-list" >
      <property name="base" >%(base-dir)s/%(project)s</property>
          <property name="file-type" >directory</property>
          <property name="verify" >remove</property>
          <property name="location" >.</property>

      </verb>
      </verb-list>
    </stage>
</job>
