<?xml version = '1.0'?>
<!DOCTYPE style-definitions PUBLIC "-//PURPLETREE//DTD STYLE TEMPLATE//EN"
"style.dtd">
<style-definitions>
<style label="make">
 <file label="GNU.mk">####################################
##  Definitions for GNU g++ compiler
####################################
ifndef M_GCC_MK
M_GCC_MK:=1
##
## Define compiler variables once only.
## 
CXX?=g++
STDCXXFLAGS:=-Wall -std=c++11 -Weffc++
STDDEBUGFLAGS:=-O0 -DDEBUG=1
STDOPTFLAGS:=-O2 -march=native -DDEBUG=0
STDLDFLAGS:=
STDSHRFLAGS:=-fpic
STDOPENMP:=-fopenmp

## Support for non C++ source files
CC?=gcc
FC?=gfortran
STDCFLAGS:=-Wall -std=c11
STDFCFLAGS:=-Wall -std=f2008

endif
# END ONCE-ONLY
</file>
 <file label="system.mk">## system.mk
#
# System Makefile
#
##################################
# Defaults for current environment
##################################

-include $(ROOTDIR)/local.mk
OS ?= LINUX
VARIANT ?= DEBUG
COMP ?= GNU
-include $(ROOTDIR)/$(COMP).mk

SHELL=/bin/bash
.SUFFIXES:

############################
## Default install locations
############################

PREFIX?=$(ROOTDIR)/stage
BINDIR=$(PREFIX)/bin
LIBDIR=$(PREFIX)/lib
DATADIR=$(PREFIX)/share

# Flags for the install targets.
INSTALL:=install
BINIFLAGS:=-m 755
LIBIFLAGS:=-m 644
FILEIFLAGS:=-m 644

####################
## OS SPECIFIC STUFF
####################

SUFSRC?=.cc
SUFHDR?=.hh
SUFDEP?=.dep
SUFMAK?=.mk

# Assume unix-like 
SUFOBJ:=.o
SUFEXE:=
SUFLIB:=.a
SUFSHR:=.so.0
ifeq ($(OS),WIN32)
SUFOBJ:=.obj
SUFEXE:=.exe
SUFLIB:=.lib
SUFSHR:=.dll
endif

######################
##  Combine flags sets
######################

ifeq ($(VARIANT),DEBUG)
VARIANTFLAGS=$(STDDEBUGFLAGS)
else
VARIANTFLAGS=$(STDOPTFLAGS)
endif

CXXFLAGS=$(VARIANTFLAGS) $(STDCXXFLAGS) $(DEFINES)
LDFLAGS=$(STDLDFLAGS)

###################################
## Dependency and other Build rules
###################################

%$(SUFDEP): %.cc
	set -e; $(CXX) -MM $(CXXFLAGS) $&lt; \
	| sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' > $@; \
	[ -s $@ ] || rm -f $@
	
%$(SUFDEP): %.cpp
	set -e; $(CXX) -MM $(CXXFLAGS) $&lt; \
	| sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' > $@; \
	[ -s $@ ] || rm -f $@

%$(SUFDEP): $(SUFSRC)
	set -e; $(CXX) -MM $(CXXFLAGS) $&lt; \
	| sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' > $@; \
	[ -s $@ ] || rm -f $@
	
%$(SUFOBJ): %$(SUFSRC)
	$(CXX) $(CXXFLAGS) -c -o $@ $&lt;


## Support for non C++ source files
CFLAGS=$(VARIANTFLAGS) $(STDCFLAGS) $(DEFINES)
FCFLAGS=$(VARIANTFLAGS) $(STDFFLAGS) $(DEFINES)

%$(SUFOBJ): %.c
	$(CC) $(CFLAGS) -c -o $@ $&lt;

%$(SUFOBJ): %.f %.f90  %.f95  %.f03  %.f08
	$(FC) $(FCFLAGS) -c -o $@ $&lt;

#############################################
##  Define standard directory descent targets
##  (required for proper functioning)
#############################################

all:: dopart

install:: all doinstall

doit:
	for WORKDIR in $(DIRS); do \
	echo Working on $$WORKDIR; \
	pushd $$WORKDIR;\
	OS="$(OS)" ROOTDIR="$(ROOTDIR)" VARIANT="$(VARIANT)" make $(WHAT); \
	popd;\
	done

dopart:
	WHAT="all" make doit

doinstall:
	WHAT="install" make doit

distclean: clean
	rm -f $(CLEAN_TARGETS)
	WHAT="distclean" make doit

clean: 
	rm -f $(CLEAN_TEMP)
	WHAT="clean" make doit
</file>
 <file label="local.mk">## local.mk.tmpl

OS ?= LINUX
COMP ?= GNU
VARIANT ?= DEBUG
</file>
 <!-- name of the top-most generated buildfile -->
 <property label="root-file">makefile</property>

 <!-- name of build file in any sub-directories -->
 <property label="build-file">makefile</property>
 <!-- default for install flags -->
 <property label="binary_install_location">$(BINDIR)</property>
 <property label="binary_install_mode">$(BINIFLAGS)</property>
 <property label="library_install_location">$(LIBDIR)</property>
 <property label="library_install_mode">$(LIBIFLAGS)</property>
 <property label="other_install_location">$(DATADIR)</property>
 <property label="other_install_mode">$(FILEIFLAGS)</property>
 <property label="start-phrase">## START:</property>
 <property label="end-phrase">## END:</property>

  <!-- how to make comments -->
 <template label="comment">## <replace label="text"/></template>

 <!-- link to subdirectories -->
 <template label="descendent-link">DIRS:=$(DIRS) $(ROOTDIR)/<replace label="path"/>
</template>

 <!-- Actual content for external libraries -->
 <template label="extern-library"><replace label="NAME"/>FLAGS:=<replace label="flags"/>
<replace label="NAME"/>LDFLAGS:=<replace label="ldflags"/>
<replace label="NAME"/>INC:=<replace label="includes"/>
</template>

 <!-- how to include an additional buildfile -->
 <template label="include-buildfile">-include $(ROOTDIR)/<replace label="build-file"/>.$(SUFMAK)
</template>

 <!-- how to build an object file -->
 <template label="object">
<replace label="name"/>$(SUFOBJ) :: <option label="flags">CXXFLAGS:=$(CXXFLAGS) <replace label="flags"/></option><option label="inc">$(patsubst %,-I%,<replace label="includes"/>)</option>
</template>

 <!-- Other target type -->
 <template label="object-other">
<replace label="basename"/>$(SUFOBJ) :: <replace label="name"/>
<replace label="basename"/>$(SUFOBJ) :: <option label="flags">CXXFLAGS:=$(CXXFLAGS) <replace label="flags"/></option><option label="inc">$(patsubst %,-I%,<replace label="includes"/>)</option>
</template>

 <!-- template for start of (internal) package -->
 <template label="package">
<option label="includes" target="includes"><replace label="PACKAGE"/>INCLUDE:= $(SYSINCLUDE) $(ROOTDIR)/<replace label="includes"/>
</option><option label="CFLAGS" target="flags"><replace label="PACKAGE"/>CXXFLAGS:= $(SYSCXXFLAGS) <replace label="flags"/>
</option><option label="LDFLAGS" target="ldflags"><replace label="PACKAGE"/>LDFLAGS:= $(SYSLDFLAGS) <replace label="ldflags"/>
</option>
</template>

 <!-- template for start of root makefile -->
 <template label="preamble-root"><option label="root-dir">export ROOTDIR:=<replace label="root-dir"/></option>
<option label="sufsrc">export SUFSRC:=.<replace label="source-extension"/></option>
<option label="sufhdr">export SUFHDR:=.<replace label="header-extension"/></option>
<option label="SYSINCLUDE">export SYSINCLUDE:= $(ROOTDIR)/<replace label="includes"/>
</option><option label="SYSCFLAGS">export SYSCXXFLAGS:= <replace label="flags"/>
</option><option label="SYSLDFLAGS">export SYSLDFLAGS:= <replace label="ldflags"/>
</option>
include $(ROOTDIR)/system.mk
</template>

 <!-- template for start of subdirectory makefiles -->
 <template label="preamble">
include $(ROOTDIR)/system.mk
</template>

 <!-- template for a target static library -->
 <template label="target-library">
<replace label="NAME"/>SRC:=<replace label="source"/>
<replace label="NAME"/>CXXFLAGS:=$(CXXFLAGS) $(<replace label="PACKAGE"/>CXXFLAGS) $(patsubst %,-I%,<replace label="includes"/> $(<replace label="PACKAGE"/>INCLUDE)) <replace label="flags"/>
<replace label="NAME"/>DINC:=$(filter %$(SUFDEP), $(<replace label="NAME"/>SRC:$(SUFSRC)=$(SUFDEP)))
$(<replace label="NAME"/>DINC) :: CXXFLAGS:=$(<replace label="NAME"/>CXXFLAGS)
include $(<replace label="NAME"/>DINC)

<replace label="NAME"/>OBJ:=$(filter %$(SUFOBJ), $(<replace label="NAME"/>SRC:$(SUFSRC)=$(SUFOBJ))) <option label="depends"><replace label="dependency"/></option>
CLEAN_TEMP:= $(CLEAN_TEMP) $(<replace label="NAME"/>OBJ) $(<replace label="NAME"/>DINC)

<replace label="name"/>$(SUFLIB) :: CXXFLAGS:=$(<replace label="NAME"/>CXXFLAGS)
<replace label="name"/>$(SUFLIB) :: $(<replace label="NAME"/>OBJ) | $(<replace label="NAME"/>DINC) 
	$(AR) $(ARFLAGS) -o <replace label="name"/>$(SUFLIB) $(<replace label="NAME"/>OBJ)

all :: <replace label="name"/>$(SUFLIB)

CLEAN_TARGETS:=$(CLEAN_TARGETS) <replace label="name"/>$(SUFLIB)  $(<replace label="NAME"/>DINC)
</template>

 <!-- template for a target DLL/shared library -->
 <template label="target-dso">
<replace label="NAME"/>SRC:=<replace label="source"/>
<replace label="NAME"/>CXXFLAGS:=$(STDSHRFLAGS) $(CXXFLAGS) $(patsubst %,-I%,<replace label="includes"/> $(<replace label="PACKAGE"/>INCLUDE)) <replace label="flags"/>
<replace label="NAME"/>LDFLAGS:=$(LDFLAGS) <replace label="ldflags"/>
<replace label="NAME"/>DINC:=$(filter %$(SUFDEP), $(<replace label="NAME"/>SRC:$(SUFSRC)=$(SUFDEP)))
$(<replace label="NAME"/>DINC) :: CXXFLAGS:=$(<replace label="NAME"/>CXXFLAGS)
include $(<replace label="NAME"/>DINC)

<replace label="NAME"/>OBJ:=$(filter %$(SUFOBJ), $(<replace label="NAME"/>SRC:$(SUFSRC)=$(SUFOBJ)))
CLEAN_TEMP:= $(CLEAN_TEMP) $(<replace label="NAME"/>OBJ) $(<replace label="NAME"/>DINC)

<replace label="name"/>$(SUFSHR) :: CXXFLAGS:=$(<replace label="NAME"/>CXXFLAGS)
<replace label="name"/>$(SUFSHR) :: $(<replace label="NAME"/>OBJ) | $(<replace label="NAME"/>DINC) 
	$(CXX) $(CXXFLAGS) -shared -o <replace label="name"/>$(SUFSHR) $(<replace label="NAME"/>OBJ) $(<replace label="NAME"/>LDFLAGS)

all :: <replace label="name"/>$(SUFSHR) 

CLEAN_TARGETS:=$(CLEAN_TARGETS) <replace label="name"/>$(SUFSHR)
</template>
 <!-- template for a target -->
 <template label="target">
<replace label="NAME"/>SRC:=<replace label="source"/>
<replace label="NAME"/>CXXFLAGS:=$(CXXFLAGS) $(patsubst %,-I%,<replace label="includes"/> $(<replace label="PACKAGE"/>INCLUDE)) <replace label="flags"/>
<replace label="NAME"/>LDFLAGS:=$(LDFLAGS) <replace label="ldflags"/>
<replace label="NAME"/>DINC:=$(filter %$(SUFDEP), $(<replace label="NAME"/>SRC:$(SUFSRC)=$(SUFDEP)))
$(<replace label="NAME"/>DINC) :: CXXFLAGS:=$(<replace label="NAME"/>CXXFLAGS)
include $(<replace label="NAME"/>DINC)

<replace label="NAME"/>OBJ:=$(filter %$(SUFOBJ), $(<replace label="NAME"/>SRC:$(SUFSRC)=$(SUFOBJ)))
CLEAN_TEMP:= $(CLEAN_TEMP) $(<replace label="NAME"/>OBJ) $(<replace label="NAME"/>DINC)

<replace label="name"/>$(SUFEXE) :: CXXFLAGS:=$(<replace label="NAME"/>CXXFLAGS)
<replace label="name"/>$(SUFEXE) :: $(<replace label="NAME"/>OBJ) <option label="depends"><replace label="dependency"/></option> | $(<replace label="NAME"/>DINC) 
	$(CXX) $(CXXFLAGS) -o <replace label="name"/>$(SUFEXE) $(<replace label="NAME"/>OBJ) $(<replace label="NAME"/>LDFLAGS) <option label="depends"><replace label="dependency"/></option>

all :: <replace label="name"/>$(SUFEXE) 

CLEAN_TARGETS:=$(CLEAN_TARGETS) <replace label="name"/>$(SUFEXE)
</template>

 <!-- template for a target source -->
 <template label="dependency-source"> <replace label="name"/>$(SUFSRC)</template>
 <template label="dependency-object"> <replace label="basename"/>$(SUFOBJ)</template>
 <template label="dependency-static-library"> $(ROOTDIR)/<replace label="path"/>/<replace label="name"/>${SUFLIB}</template>
 <template label="link-shared-library"> -L$(ROOTDIR)/<replace label="path"/> <replace label="name"/></template>
 <template label="dependency-shared-library"> $(ROOTDIR)/<replace label="path"/>/<replace label="name"/>$(SUFSHR)</template>

 <!-- template for a target -->
 <template label="target-install">
install:: <replace label="name"/>$(SUFEXE)
<option label="where">	$(INSTALL) -d <replace label="install"/>
</option><option label="install">	$(INSTALL) <replace label="install-mode"/> $&lt; <replace label="install"/>/$&lt;
</option>
</template>
 <!-- template name="buildfile">content</template>
 <template name="internal-project">content</template>
 <template name="external-project">content</template>
 <template name="object">content</template>
 <template name="executable">content</template>
 <template name="library">content</template>
 <template name="shared">content</template -->
</style>
<!---





 CMAKE STYLE







-->
<style label="cmake">
 <file label="local.cmake">#
# local.cmake
#
if( NOT DEFINED SUFSRC)
  set (SUFSRC .cc)
endif()
if( NOT DEFINED SUFHDR)
  set (SUFHDR .hh)
endif()
if( NOT DEFINED SUFOBJ)
  set (SUFOBJ .hh)
endif()
if( NOT DEFINED SUFEXE)
  set (SUFEXE "")
endif()
if( NOT DEFINED SUFLIB)
  set (SUFLIB .a)
endif()
if( NOT DEFINED SUFSHR)
  set (SUFSHR .so)
endif()
add_compile_options($&lt;$&lt;CONFIG:Debug&gt;:-DDEBUG=1&gt; $&lt;$&lt;CONFIG:Release&gt;:-DDEBUG=0&gt;)
#############################
##  Default install locations
#############################
set (CMAKE_INSTALL_PREFIX stage)
set (BINDIR bin)
set (LIBDIR bin)
set (DATADIR share)
set (BINIFLAGS 0755)
set (LIBIFLAGS 0644)
set (FILEIFLAGS 0644)
</file>
 <!-- name of the top-most generated buildfile -->
 <property label="root-file">CMakeLists.txt</property>

 <!-- name of build file in any sub-directories -->
 <property label="build-file">CMakeLists.txt</property>
 <!-- default for install flags -->
 <property label="binary_install_location">${BINDIR}</property>
 <property label="binary_install_mode">${BINIFLAGS}</property>
 <property label="library_install_location">${LIBDIR}</property>
 <property label="library_install_mode">${LIBIFLAGS}</property>
 <property label="other_install_location">${DATADIR}</property>
 <property label="other_install_mode">${FILEIFLAGS}</property>
 <property label="start-phrase">## START:</property>
 <property label="end-phrase">## END:</property>

  <!-- how to make comments -->
 <template label="comment">## <replace label="text"/></template>

 <!-- link to subdirectories -->
 <template label="descendent-link">include (<replace label="path"/>/CMakeLists.txt)
</template>

 <!-- Actual content for external libraries -->
 <template label="extern-library">set (<replace label="NAME"/>FLAGS <replace label="flags"/>)
set (<replace label="NAME"/>LDFLAGS <replace label="ldflags"/>)
set (<replace label="NAME"/>INC <replace label="includes"/>)
</template>

 <!-- how to include an additional buildfile -->
 <template label="include-buildfile">-include (${CMAKE_SOURCE_DIR}/<replace label="build-file"/>.${SUFMAK}
</template>

 <!-- how to build an object file -->
 <template label="object"><option label="flags" target="flags">
 set_property( SOURCE <replace label="name"/>${SUFSRC} PROPERTY APPEND CMAKE_C++_FLAGS <replace label="flags"/> )</option><option label="includes" target="includes">
 set_property( SOURCE <replace label="name"/>${SUFSRC} PROPERTY APPEND INCLUDE_DIRECTORIES <replace label="includes"/>)</option>
</template>

 <!-- Other target type -->
 <template label="object-other"><option label="flags" target="flags">
 set_property( SOURCE <replace label="name"/> PROPERTY APPEND CMAKE_C_FLAGS <replace label="flags"/> )
 set_property( SOURCE <replace label="name"/> PROPERTY APPEND CMAKE_FORTRAN_FLAGS <replace label="flags"/> )</option><option label="includes" target="includes">
 set_property( SOURCE <replace label="name"/> PROPERTY APPEND INCLUDE_DIRECTORIES <replace label="includes"/>)</option>
</template>

 <!-- template for start of (internal) package -->
 <template label="package">
 project (<replace label="PACKAGE"/>)
<option label="SYSINCLUDE">include_directories(<replace label="includes"/>)
</option><option label="SYSCXXFLAGS">set (SYSCFLAGS <replace label="flags"/>)
</option><option label="SYSLDFLAGS">set (SYSLDFLAGS <replace label="ldflags"/>)
</option>
</template>

 <!-- template for start of root makefile -->
 <template label="preamble-root">
cmake_minimum_required(VERSION 2.6)
<option label="sufsrc">set (SUFSRC  .<replace label="source-extension"/>)
</option><option label="sufhdr">set (SUFHDR  .<replace label="header-extension"/>)
</option>include (${CMAKE_SOURCE_DIR}/local.cmake)
</template>

 <!-- template for start of subdirectory makefiles -->
 <template label="preamble">
include (${CMAKE_SOURCE_DIR}/local.cmake)
</template>

 <!-- template for a target -->
 <template label="target-library">
 # STATIC
 set ( <replace label="PACKAGE"/>_<replace label="NAME"/> <replace label="name"/>)
 
 set ( <replace label="PACKAGE"/>_<replace label="NAME"/>_SRC
  <replace label="source"/> )
 add_library ( ${<replace label="PACKAGE"/>_<replace label="NAME"/>} STATIC
    ${<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC} )
</template>

 <!-- template for a target -->
 <template label="target-dso">
 ## DSO
 set ( <replace label="PACKAGE"/>_<replace label="NAME"/>  <replace label="name"/>)
 
 set ( <replace label="PACKAGE"/>_<replace label="NAME"/>_SRC
  <replace label="source"/> )
 add_library ( ${<replace label="PACKAGE"/>_<replace label="NAME"/>} SHARED
    ${<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC} )
</template>

 <!-- template for a target -->
 <template label="target">
 # EXE
 set ( <replace label="PACKAGE"/>_<replace label="NAME"/>  <replace label="name"/>)
 
 set ( <replace label="PACKAGE"/>_<replace label="NAME"/>_SRC
  <replace label="source"/> )
 add_executable ( ${<replace label="PACKAGE"/>_<replace label="NAME"/>}
    ${<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC} )
<option label="depends"> target_link_libraries( ${<replace label="PACKAGE"/>_<replace label="NAME"/>} <replace label="dependency"/> )
</option></template>

 <!-- template for a target source -->
 <template label="dependency-source"> ${CMAKE_CURRENT_LIST_DIR}/<replace label="name"/>${SUFSRC}</template>
 <template label="dependency-object"> ${CMAKE_CURRENT_LIST_DIR}/<replace label="name"/></template>
 <template label="dependency-static-library"> <replace label="name"/></template>
 <template label="link-shared-library"> -l<replace label="name"/></template>
 <template label="dependency-shared-library"> <replace label="name"/></template>

 <!-- template for a target -->
 <template label="target-install">
<option label="where">
install (TARGETS ${<replace label="PACKAGE"/>_<replace label="NAME"/>}
  RUNTIME DESTINATION <replace label="install"/>
  CONFIGURATIONS Release Debug )</option>
</template>
 <!-- template name="buildfile">content</template>
 <template name="internal-project">content</template>
 <template name="external-project">content</template>
 <template name="object">content</template>
 <template name="executable">content</template>
 <template name="library">content</template>
 <template name="shared">content</template -->
</style>
<!---





 JAM STYLE







-->
<style label="jam">
 <file label="GNU.jam">####################################
##  Definitions for GNU g++ compiler
####################################
##
## Define compiler variables once only.
## 
FC = gfortran ;
CC = gcc ;
C++ = g++ ;
LINK = $(C++) ;
FFLAGS += -Wall -std=c08 ;
CCFLAGS += -Wall -std=c11 ;
C++FLAGS += -Wall -std=c++11 ;
SHRFLAGS = -fpic ;
switch $(VARIANT)
{
case RELEASE :
  OPTIM += -O2 -march=native -DDEBUG=0 ;
case * :
  OPTIM = -O0 -ggdb -DDEBUG=1 ;
  CCFLAGS += -pedantic ;
  C++FLAGS += -Weffc++ ;
}
LINKFLAGS += $(OPTIM) ;
CCFLAGS += $(OPTIM) ;
C++FLAGS += $(OPTIM) ;
OPENMP = -fopenmp ;
</file>
 <file label="Jamrules">#
# Default Jamrules
#

SUFSRC ?= .cc ;
SUFHDR ?= .hh ;
if $(UNIX)  {
SUFOBJ ?= .o ; 
SUFLIB ?= .a ; 
SUFSHR ?= .so ;
}
else if $(NT)
{
SUFOBJ ?= .obj ; 
SUFLIB ?= .lib ; 
SUFSHR ?= .dll ;
}

if $(JAM_TOOLSET) { TOOLSET ?= $(JAM_TOOLSET) ; }
TOOLSET ?= GNU ;
VARIANT ?= DEBUG ;

#############################
##
##  Default install locations
##
#############################
PREFIX = stage ;
BINDIR = $(PREFIX)/bin ;
LIBDIR = $(PREFIX)/lib64 ;
DATADIR = $(PREFIX)/share ;
BINIFLAGS = 0755 ;
LIBIFLAGS = 0644 ;
FILEIFLAGS = 0644 ;

######################################################
##
##  Example definitions for compiler suite (TOOLSETS)
##  It is possible to add definitions here or in a
##  separate file "$(TOOLSET).jam", the NOCARE rule
##  tells jam not to worry if file does not exist.
## 
######################################################
NOCARE $(TOOLSET).jam ;
include $(TOOLSET).jam ;

# Set variable for variant-specific build-dir handling
BASE_LOCATE_TARGET = $(BUILDDIR)$(SLASH)$(VARIANT) ;
ALL_LOCATE_TARGET = $(BASE_LOCATE_TARGET) ;
</file>
 <!-- name of the top-most generated buildfile -->
 <property label="root-file">Jamfile</property>

 <!-- name of build file in any sub-directories -->
 <property label="build-file">Jamfile</property>
 <!-- default for install flags -->
 <property label="binary_install_location">$(BINDIR)</property>
 <property label="binary_install_mode">$(BINIFLAGS)</property>
 <property label="library_install_location">$(LIBDIR)</property>
 <property label="library_install_mode">$(LIBIFLAGS)</property>
 <property label="other_install_location">$(DATADIR)</property>
 <property label="other_install_mode">$(FILEIFLAGS)</property>
 <property label="start-phrase">## START:</property>
 <property label="end-phrase">## END:</property>

  <!-- how to make comments -->
 <template label="comment">## <replace label="text"/></template>

 <!-- link to subdirectories -->
 <template label="descendent-link">SubInclude TOP  <replace label="path" split="/" join =" " /> ;
</template>

 <!-- Actual content for external libraries -->
 <template label="extern-library"><replace label="NAME"/>_FLAGS = <replace label="flags"/> ;
<replace label="NAME"/>_LDFLAGS = <replace label="ldflags"/> ;
<replace label="NAME"/>_INC = <replace label="includes"/> ;
</template>


 <template label="dependency-source"> <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFSRC)</template>
 <template label="dependency-object"> <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/></template>
 <template label="dependency-static-library"> <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFLIB)</template>
 <template label="link-shared-library"> -l<replace label="name"/></template>
 <template label="dependency-shared-library"> <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFSHR)</template>
 
 <!-- how to include an additional buildfile -->
 <template label="include-buildfile">include $(ROOTDIR)/<replace label="build-file"/>$(SUFMAK) ;
</template>

 <!-- how to build an object file -->
 <template label="object">
<option label="flags">ObjectC++Flags <replace label="name"/>$(SUFSRC) : $(CXXFLAGS) <replace label="flags"/></option>
Object <replace label="name"/>$(SUFOBJ) : <option label="flags">CXXFLAGS:=$(CXXFLAGS) <replace label="flags"/></option>\
                                    <option label="inc">CXXFLAGS:=$(CXXFLAGS) -I"<replace label="includes"/>" $(SYSINCLUDES) $(INC)</option>
</template>

 <!-- Other target type -->
 <template label="object-other">
<replace label="PROJECT"/>_<replace label="BASENAME"/>_INC = <replace label="includes"/> $(<replace label="PROJECT"/>_INC) ;
ObjectCcFlags <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="basename"/>$(SUFOBJ) : $(CFLAGS) <replace label="flags"/> -I$(<replace label="PROJECT"/>_<replace label="BASENAME"/>_INC) ; 
FORTRANFLAGS on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="basename"/>$(SUFOBJ) = $(FFLAGS) <replace label="flags"/> -I$(<replace label="PROJECT"/>_<replace label="BASENAME"/>_INC) ;
</template>

 <!-- template for start of (internal) package -->
 <template label="package">
# Package data
<option label="SYSINC" target="includes"><replace label="PACKAGE"/>_INC = <replace label="includes"/> $(SYSINC) ;
</option><option label="SYSCFLAGS" target="flags"><replace label="PACKAGE"/>_C++FLAGS = <replace label="flags"/> ;
</option><option label="SYSLDFLAGS" target="ldflags"><replace label="PACKAGE"/>_LDFLAGS = <replace label="ldflags"/> ;
</option>
</template>

 <!-- template for start of root makefile -->
 <template label="preamble-root">
<option label="sufsrc">SUFSRC = .<replace label="source-extension"/> ;</option>
<option label="sufhdr">SUFHDR = .<replace label="header-extension"/> ;</option>
<option label="root-dir">BUILDDIR = <replace label="root-dir"/> ;</option>
SubDir TOP ;
<option label="SYSINC" target="includes">SYSINC = <replace label="includes"/> ;
</option></template>

 <!-- template for start of subdirectory makefiles -->
 <template label="preamble">
ALL_LOCAL_TARGET = $(BASE_LOCAL_TARGET)<replace label="path"/> ;
SubDir TOP <replace label="path" split="/" join =" " /> ;
</template>

 <!-- template for a target static library-->
 <template label="target-library"><replace label="PACKAGE"/>_<replace label="NAME"/>_SRC =
     <replace label="source"/> ;
<replace label="PACKAGE"/>_<replace label="NAME"/>_INC = <replace label="includes"/> $(<replace label="PACKAGE"/>_INC) ;
ObjectC++Flags $(<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC) : 
     $(C++FLAGS) <replace label="flags"/> -I$(<replace label="PACKAGE"/>_<replace label="NAME"/>_INC) ;

Library <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFLIB) :
  $(<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC) ;
</template>
	
 <!-- template for a target -->
 <template label="target-dso"><replace label="PACKAGE"/>_<replace label="NAME"/>_SRC =
     <replace label="source"/> $(<replace label="PACKAGE"/>INC) ;
<replace label="NAME"/>INC on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFSHR) =
    <replace label="includes" split=" " join=" -I"/> -I$(<replace label="NAME"/>INC) ;
C++FLAGS on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFSHR) = 
     $(C++FLAGS) <replace label="flags"/> ;
<option label="libs" target="ldflags"> LINKLIBS on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFSHR) = 
  $(LINKLIBS) <replace label="ldflags"/> ;
</option>
Main <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFSHR) :
  $(<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC) ;
<option label="libs" target="dependency">LinkLibraries <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFSHR) :
	 <replace label="dependency"/>
	; </option></template>
	
 <!-- template for a target -->
 <template label="target"><replace label="PACKAGE"/>_<replace label="NAME"/>_SRC =
     <replace label="source"/> ;
<replace label="PACKAGE"/>_<replace label="NAME"/>_INC = <replace label="includes"/> $(<replace label="PACKAGE"/>_INC) ;
ObjectC++Flags $(<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC) :
     $(C++FLAGS) <replace label="flags"/> -I$(<replace label="PACKAGE"/>_<replace label="NAME"/>_INC) ;
<option label="libs" target="ldflags">LINKLIBS on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFEXE) = 
  $(LINKLIBS) <replace label="ldflags"/> ;
</option>
Main <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFEXE) :
  $(<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC) ;
<option label="libs" target="dependency">LinkLibraries <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFEXE) :
	 <replace label="dependency"/>
	; </option></template>

 <!-- template for a target -->
 <template label="target-install"><option label="where" target="install">InstallBin <replace label="install"/> : <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFEXE) ;
</option><option label="install" target="install-mode">IFLAGS on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFEXE) = <replace label="install-mode"/> ;
</option>
</template>
 <!-- template name="buildfile">content</template>
 <template name="internal-project">content</template>
 <template name="external-project">content</template>
 <template name="object">content</template>
 <template name="executable">content</template>
 <template name="library">content</template>
 <template name="shared">content</template -->
</style>
<!---





 BOOST JAM STYLE







-->
<style label="boost">

 <file label="local.jam">#
# local.jam
#

using gcc : : : &lt;cflags&gt;"-ansi -std=c11" ;
# using msvc : : : &lt;cflags&gt;"/std:c11 /Za /DWIN32" ; # /Wall 

# Set constants for installation paths
import path ;
path-constant INSTALL_PREFIX : stage ;
constant BINDIR : bin ; # User programs
constant DATADIR : share ; # Private libraries and static data
constant LIBDIR : lib64 ; # Shared libraries
constant BINIFLAGS : 0755 ;
constant LIBIFLAGS : 0644 ;
constant FILEIFLAGS : 0644 ;
if ! $(SUFSRC) {
constant SUFSRC : .cc ;
}
if ! $(SUFHDR)
{
constant SUFHDR : .hh ;
}
if $(UNIX)  {
constant SUFOBJ : .o ; 
constant SUFLIB : .a ; 
constant SUFSHR : .so ;
}
else if $(NT)
{
constant SUFOBJ : .obj ; 
constant SUFLIB : .lib ; 
constant SUFSHR : .dll ;
}
</file>
 <!-- name of the top-most generated buildfile -->
 <property label="root-file">Jamroot</property>

 <!-- name of build file in any sub-directories -->
 <property label="build-file">Jamfile</property>
 <!-- default for install flags -->
 <property label="binary_install_location">$(BINDIR)</property>
 <property label="binary_install_mode">$(BINIFLAGS)</property>
 <property label="library_install_location">$(LIBDIR)</property>
 <property label="library_install_mode">$(LIBIFLAGS)</property>
 <property label="other_install_location">$(DATADIR)</property>
 <property label="other_install_mode">$(FILEIFLAGS)</property>
<property label="start-phrase">## START:</property>
 <property label="end-phrase">## END:</property>

 <template label="dependency-source"> <replace label="name"/>$(SUFSRC)</template>
 <template label="dependency-object"> <replace label="name"/></template>
 <template label="dependency-static-library"> <option label="path">/<replace label="project"/>//</option><replace label="name"/></template>
 <template label="link-shared-library"> -l<replace label="name"/></template>
 <template label="dependency-shared-library"> <option label="path">/<replace label="project"/>//</option><replace label="name"/></template>
  
 <!-- template for a static library target -->
 <template label="target-library">
lib <replace label="name"/> :
                     <replace label="source"/>
                     : &lt;link&gt;static
                     ;
</template>

 <!-- template for a shared library target -->
 <template label="target-dso">
lib <replace label="name"/> :
                     <replace label="source"/>
                     : &lt;link&gt;share
                     ;
</template> 

 <!-- template for a executable target -->
 <template label="target">
exe <replace label="name"/> :
                     <replace label="source"/> <replace label="dependency"/>
                     :
                     ;
</template>
  <!-- how to make comments -->
 <template label="comment">## <replace label="text"/></template>

 <!-- link to subdirectories -->
 <template label="descendent-link">build-project "<replace label="path"/>" ;
</template>

 <!-- Actual content for external libraries -->
 <template label="extern-library">constant <replace label="NAME"/>FLAGS : <replace label="flags"/> ;
constant <replace label="NAME"/>LDFLAGS : <replace label="ldflags"/> ;
constant <replace label="NAME"/>INC : <replace label="includes"/> ;
</template>

 <!-- how to include an additional buildfile -->
 <template label="include-buildfile">-include $(topdir)/<replace label="build-file"/> ;
</template>

 <!-- how to build an object file -->
 <template label="object">
<option label="flags">C++FLAGS on <replace label="name"/>$(SUFOBJ) = $(CXXFLAGS) <replace label="flags"/> ;</option>
<!-- obj <replace label="name"/>$(SUFOBJ) : <replace label="name"/>$(SUFSRC) 
            : <option label="flags">&lt;CXXFLAGS&gt;"<replace label="flags"/>"</option><option label="inc" target="includes">
            &lt;include&gt;"<replace label="includes"/>"</option>
            ; -->
</template>

 <!-- Other target type -->
 <template label="object-other">
<option label="flags">CFLAGS on <replace label="name"/>$(SUFOBJ) += <replace label="flags"/> ;
FORTRANFLAGS on <replace label="name"/>$(SUFOBJ) += <replace label="flags"/> ;</option>
<!-- obj <replace label="name"/>$(SUFOBJ) : <replace label="name"/>$(SUFSRC) 
            : <option label="flags">&lt;CXXFLAGS&gt;"<replace label="flags"/>"</option><option label="inc" target="includes">
            &lt;include&gt;"<replace label="includes"/>"</option>
            ; -->
</template>

 <!-- template for start of (internal) package -->
 <template label="package">
project <replace label="package"/>
  : requirements &lt;debug-symbols&gt;on:&lt;define&gt;"DEBUG=1"
    &lt;debug-symbols&gt;off:&lt;define&gt;"DEBUG=0"<option label="includes" target="includes"> &lt;include&gt;"<replace label="includes"/>"
</option><option label="CFLAGS"> &lt;flags&gt;"<replace label="flags"/>"
</option><option label="LDFLAGS"> &lt;linkflags&gt;"<replace label="ldflags"/>"</option>
  : build-dir build ;
</template>

 <!-- template for start of root makefile -->
 <template label="preamble-root">
<option label="sufsrc">constant SUFSRC : .<replace label="source-extension"/> ;</option>
<option label="sufhdr">constant SUFHDR : .<replace label="header-extension"/> ;</option>
path-constant topdir : <replace label="path"/> ;
include local.jam ;
</template>

 <!-- template for start of subdirectory makefiles -->
 <template label="preamble"></template>

 <!-- template for a target -->
 <template label="target-install">
<option label="where" target="install">install $(INSTALL_PREFIX) : <replace label="name"/> : &lt;location&gt;$(INSTALL_PREFIX)/<replace label="install"/> ;
</option></template>
 <!-- template name="buildfile">content</template>
 <template name="internal-project">content</template>
 <template name="external-project">content</template>
 <template name="object">content</template>
 <template name="executable">content</template>
 <template name="library">content</template>
 <template name="shared">content</template -->
 </style>
</style-definitions>
