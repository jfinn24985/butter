<?xml version = '1.0'?>
<!DOCTYPE style-definitions PUBLIC "-//PURPLETREE//DTD STYLE TEMPLATE//EN"
"style.dtd">
<style-definitions>
<style label="make">
 <file label="GNU.mk">####################################
##  Definitions for GNU g++ compiler
####################################
ifndef M_GCC_MK
M_GCC_MK:=1
##
## Define compiler variables once only.
## 
CXX:=g++
STD_CXXFLAGS:=-Wall -std=c++11 -Weffc++
STD_DEBUGFLAGS:=-O0 -DDEBUG=1
STD_OPTFLAGS:=-O2 -march=native -DDEBUG=0
STD_LDFLAGS:=
STD_SHRFLAGS:=-fpic
OPENMP:=-fopenmp
CFLAG:=-c
OFLAG:=-o
AR_OFLAG:=-o
SHRFLAG:=-shared

## Support for non C++ source files
CC:=gcc
FC:=gfortran
STD_CFLAGS:=-Wall -std=c11
STD_FFLAGS:=-Wall -std=f2008
FORTRANLIBS:=-lgfortran

###################################
## Dependency and other Build rules
###################################

%$(SUFDEP): %.cc
	set -e; $(CXX) -MM $(CXXFLAGS) $&lt; \
	| sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' > $@; \
	[ -s $@ ] || rm -f $@
	
%$(SUFDEP): %.cpp
	set -e; $(CXX) -MM $(CXXFLAGS) $&lt; \
	| sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' > $@; \
	[ -s $@ ] || rm -f $@

%$(SUFDEP): $(SUFSRC)
	set -e; $(CXX) -MM $(CXXFLAGS) $&lt; \
	| sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' > $@; \
	[ -s $@ ] || rm -f $@
	
%$(SUFOBJ): %$(SUFSRC)
	$(CXX) $(CXXFLAGS) -c -o $@ $&lt;


## Support for non C++ source files
CFLAGS=$(VARIANT_FLAGS) $(STD_CFLAGS) $(DEFINES)
FFLAGS=$(VARIANT_FLAGS) $(STD_FFLAGS) $(DEFINES)

%$(SUFOBJ): %.c
	$(CC) $(CFLAGS) -c -o $@ $&lt;

%$(SUFOBJ): %.f %.f90 %.f95 %.f03 %.f08
	$(FC) $(FFLAGS) -c -o $@ $&lt;
endif
# END ONCE-ONLY
</file>
 <file label="system.mk">## system.mk
#
# System Makefile
#
##################################
# Defaults for current environment
##################################

-include $(ROOTDIR)/local.mk
OS ?= LINUX
VARIANT ?= DEBUG
COMP ?= GNU

SHELL=/bin/bash
.SUFFIXES:

############################
## Default install locations
############################

PREFIX?=$(ROOTDIR)/stage
BINDIR=$(PREFIX)/bin
LIBDIR=$(PREFIX)/lib
DATADIR=$(PREFIX)/share

# Flags for the install targets.
INSTALL:=install
BINIFLAGS:=-m 755
LIBIFLAGS:=-m 644
FILEIFLAGS:=-m 644

####################
## OS SPECIFIC STUFF
####################

SUFSRC?=.cc
SUFHDR?=.hh
SUFDEP?=.dep
SUFMAK?=.mk

# Assume unix-like 
SUFOBJ:=.o
SUFEXE:=
SUFLIB:=.a
SUFSHR:=.so
ifeq ($(OS),WIN32)
SUFOBJ:=.obj
SUFEXE:=.exe
SUFLIB:=.lib
SUFSHR:=.dll
endif

-include $(ROOTDIR)/$(COMP).mk

######################
##  Combine flags sets
######################

ifeq ($(VARIANT),DEBUG)
VARIANT_FLAGS=$(STD_DEBUGFLAGS)
else
VARIANT_FLAGS=$(STD_OPTFLAGS)
endif

CXXFLAGS=$(VARIANT_FLAGS) $(STD_CXXFLAGS) $(DEFINES)
LDFLAGS=$(STD_LDFLAGS)

#############################################
##  Define standard directory descent targets
##  (required for proper functioning)
#############################################

all:: dopart

install:: all doinstall

doit:
	for WORKDIR in $(DIRS); do \
	echo Working on $$WORKDIR; \
	pushd $$WORKDIR;\
	OS="$(OS)" ROOTDIR="$(ROOTDIR)" VARIANT="$(VARIANT)" make $(WHAT); \
	popd;\
	done

dopart:
	WHAT="all" make doit

doinstall:
	WHAT="install" make doit

distclean: clean
	rm -f $(CLEAN_TARGETS)
	WHAT="distclean" make doit

clean: 
	rm -f $(CLEAN_TEMP)
	WHAT="clean" make doit
</file>
 <file label="local.mk">## local.mk.tmpl

OS ?= LINUX
COMP ?= GNU
VARIANT ?= DEBUG
</file>
 <!-- name of the top-most generated buildfile -->
 <property label="root-file">makefile</property>
 <!-- name of build file in any sub-directories -->
 <property label="run-file">makefile</property>
 
 <property label="start-phrase">## START:</property>
 <property label="end-phrase">## END:</property>

  <!-- how to make comments -->
 <template label="comment">## <replace label="text"/></template>
 
 <!-- link to subdirectories -->
 <template label="descendent-link">DIRS:=$(DIRS) $(ROOTDIR)/<replace label="path"/>
</template>

 <!-- how to include an additional buildfile -->
 <template label="include-build-file">-include $(ROOTDIR)/<replace label="build-file"/>$(SUFMAK)
</template>

 <!-- template for start of root makefile -->
 <template label="preamble-root"><option label="root-dir">export ROOTDIR:=<replace label="root-dir"/></option>
<option label="sufsrc">export SUFSRC:=.<replace label="source-extension"/></option>
<option label="sufhdr">export SUFHDR:=.<replace label="header-extension"/></option>
<option label="includes">export SYS_INCLUDE:= <replace label="includes"/>
</option><option label="flags">export SYS_CXXFLAGS:= <replace label="flags"/>
</option><option label="link">export SYS_LDFLAGS:= <replace label="ldflags"/>
</option>
include $(ROOTDIR)/system.mk
</template>

 <!-- template for start of subdirectory makefiles -->
 <template label="preamble">
include $(ROOTDIR)/system.mk
</template>

 <!-- template for a target source -->
 <template label="make-variable">$(<replace label="text"/>)</template>
 <template label="includes-relative">$(ROOTDIR)/<replace label="text"/></template>
 <template label="dependency-source"> <replace label="name"/>$(SUFSRC)</template>
 <template label="dependency-object"> <replace label="name"/>$(SUFOBJ)</template>
 <template label="dependency-object-other"> <replace label="basename"/>$(SUFOBJ)</template>
 <template label="dependency-static-library"> $(ROOTDIR)/<replace label="path"/>/<replace label="name"/>${SUFLIB}</template>
 <template label="link-shared-library"> -L$(ROOTDIR)/<replace label="path"/> -l<replace label="name"/></template>
 <template label="dependency-shared-library"> $(ROOTDIR)/<replace label="path"/>/lib<replace label="name"/>$(SUFSHR)</template>

 <!-- template for start of (internal) package -->
 <template label="package">
<replace label="NAME"/>_INCLUDE := <replace label="includes"/> $(SYS_INCLUDE)
<replace label="NAME"/>_CXXFLAGS := <replace label="flags"/> $(SYS_CXXFLAGS)
<replace label="NAME"/>_LDFLAGS := <replace label="ldflags"/> $(SYS_LDFLAGS)
</template>

 <!-- Actual content for external libraries -->
 <template label="extern-library"><replace label="NAME"/>_FLAGS:=<replace label="flags"/>
<replace label="NAME"/>_LDFLAGS:=<replace label="ldflags"/>
<replace label="NAME"/>_INC:=<replace label="includes"/>
</template>

 <!-- how to build an object file -->
 <template label="object">
<option label="build-file" target="build-file">-include $(ROOTDIR)/<replace label="build-file"/>$(SUFMAK)
</option><replace label="NAME"/>_FLAGS = $(<replace label="TARGET"/>_CXXFLAGS)<option label="inc" target="includes"> $(patsubst %,-I%,<replace label="includes"/>)</option><option label="flags" target="flags"> <replace label="flags"/></option>
<replace label="name"/>$(SUFOBJ) :: CXXFLAGS=$(<replace label="NAME"/>_FLAGS)
<replace label="name"/>$(SUFOBJ) :: <replace label="name"/>$(SUFSRC)
<option label="build" target="compiler">	<replace label="compiler"/> $(<replace label="NAME"/>_FLAGS) $(CFLAG) $(OFLAG) <replace label="name"/>$(SUFOBJ) <replace label="name"/>$(SUFSRC)</option>
</template>

 <!-- Other target type -->
 <template label="object-other">
<option label="build-file" target="build-file">-include $(ROOTDIR)/<replace label="build-file"/>$(SUFMAK)
</option><option label="inc" target="includes"><replace label="BASENAME"/>_FLAGS := $(patsubst %,-I%,<replace label="includes"/>) <replace label="flags"/>
</option><option label="flags" target="flags"><replace label="BASENAME"/>_FLAGS := $(<replace label="BASENAME"/>_FLAGS) <replace label="flags"/>
</option><replace label="basename"/>$(SUFOBJ) :: CFLAGS=$(<replace label="BASENAME"/>_FLAGS) $(STD_CFLAGS)
<replace label="basename"/>$(SUFOBJ) :: FFLAGS=$(<replace label="BASENAME"/>_FLAGS) $(STD_FFLAGS)
<replace label="basename"/>$(SUFOBJ) :: <replace label="name"/>
<option label="build" target="compiler">	<replace label="compiler"/> $(<replace label="BASENAME"/>_FLAGS) $(CFLAG) $(OFLAG) <replace label="basename"/>$(SUFOBJ) <replace label="name"/></option>
</template>

 <!-- template for a target static library -->
 <template label="target-library">
<replace label="NAME"/>_SRC:=<replace label="source"/>
<replace label="NAME"/>_CXXFLAGS:=$(CXXFLAGS) $(<replace label="PACKAGE"/>_CXXFLAGS) $(patsubst %,-I%,<replace label="includes"/> $(<replace label="PACKAGE"/>_INCLUDE)) <replace label="flags"/> $(<replace label="PACKAGE"/>_CXXFLAGS)
<replace label="NAME"/>_DINC:=$(filter %$(SUFDEP), $(<replace label="NAME"/>_SRC:$(SUFSRC)=$(SUFDEP)))
$(<replace label="NAME"/>_DINC) :: CXXFLAGS:=$(<replace label="NAME"/>_CXXFLAGS)
include $(<replace label="NAME"/>_DINC)

<replace label="NAME"/>_OBJ:=$(filter %$(SUFOBJ), $(<replace label="NAME"/>_SRC:$(SUFSRC)=$(SUFOBJ))) <option label="depends"><replace label="dependency"/></option>
CLEAN_TEMP:= $(CLEAN_TEMP) $(<replace label="NAME"/>_OBJ) $(<replace label="NAME"/>_DINC)

<replace label="name"/>$(SUFLIB) :: CXXFLAGS:=$(<replace label="NAME"/>_CXXFLAGS)
<replace label="name"/>$(SUFLIB) :: $(<replace label="NAME"/>_OBJ) | $(<replace label="NAME"/>_DINC) 
	$(AR) $(ARFLAGS) $(AR_OFLAG) <replace label="name"/>$(SUFLIB) $(<replace label="NAME"/>_OBJ)

all :: <replace label="name"/>$(SUFLIB)

CLEAN_TARGETS:=$(CLEAN_TARGETS) <replace label="name"/>$(SUFLIB)  $(<replace label="NAME"/>_DINC)
</template>

 <!-- template for a target DLL/shared library -->
 <template label="target-shared">
<replace label="NAME"/>_SRC:=<replace label="source"/>
<replace label="NAME"/>_CXXFLAGS:=$(STD_SHRFLAGS) $(CXXFLAGS) $(patsubst %,-I%,<replace label="includes"/> $(<replace label="PACKAGE"/>_INCLUDE)) <replace label="flags"/> $(<replace label="PACKAGE"/>_CXXFLAGS)
<replace label="NAME"/>_LDFLAGS:=$(LDFLAGS) <replace label="ldflags"/> $(<replace label="PACKAGE"/>_LDFLAGS)
<replace label="NAME"/>_DINC:=$(filter %$(SUFDEP), $(<replace label="NAME"/>_SRC:$(SUFSRC)=$(SUFDEP)))
$(<replace label="NAME"/>_DINC) :: CXXFLAGS:=$(<replace label="NAME"/>_CXXFLAGS)
include $(<replace label="NAME"/>_DINC)

<replace label="NAME"/>_OBJ:=$(filter %$(SUFOBJ), $(<replace label="NAME"/>_SRC:$(SUFSRC)=$(SUFOBJ)))
$(<replace label="NAME"/>_OBJ) :: CXXFLAGS:=$(<replace label="NAME"/>_CXXFLAGS)
CLEAN_TEMP:= $(CLEAN_TEMP) $(<replace label="NAME"/>_OBJ) $(<replace label="NAME"/>_DINC)

<replace label="name"/>$(SUFSHR) :: CXXFLAGS:=$(<replace label="NAME"/>_CXXFLAGS)
<replace label="name"/>$(SUFSHR) :: $(<replace label="NAME"/>_OBJ) | $(<replace label="NAME"/>_DINC) 
	$(CXX) $(CXXFLAGS) $(SHRFLAG) $(OFLAG) lib<replace label="name"/>$(SUFSHR) $(<replace label="NAME"/>_OBJ) $(<replace label="NAME"/>_LDFLAGS)

all :: <replace label="name"/>$(SUFSHR) 

CLEAN_TARGETS:=$(CLEAN_TARGETS) lib<replace label="name"/>$(SUFSHR)
</template>
 <!-- template for a target -->
 <template label="target-executable">
<replace label="NAME"/>_SRC:=<replace label="source"/>
<replace label="NAME"/>_CXXFLAGS:=$(CXXFLAGS) $(patsubst %,-I%,<replace label="includes"/> $(<replace label="PACKAGE"/>_INCLUDE)) <replace label="flags"/> $(<replace label="PACKAGE"/>_CXXFLAGS)
<replace label="NAME"/>_LDFLAGS:=$(LDFLAGS) $(<replace label="PACKAGE"/>_LDFLAGS) <replace label="ldflags"/> $(<replace label="PACKAGE"/>_LDFLAGS)
<replace label="NAME"/>_DINC:=$(filter %$(SUFDEP), $(<replace label="NAME"/>_SRC:$(SUFSRC)=$(SUFDEP)))
$(<replace label="NAME"/>_DINC) :: CXXFLAGS:=$(<replace label="NAME"/>_CXXFLAGS)
include $(<replace label="NAME"/>DINC)

<replace label="NAME"/>_OBJ:=$(filter %$(SUFOBJ), $(<replace label="NAME"/>_SRC:$(SUFSRC)=$(SUFOBJ)))
CLEAN_TEMP:= $(CLEAN_TEMP) $(<replace label="NAME"/>_OBJ) $(<replace label="NAME"/>_DINC)

<replace label="name"/>$(SUFEXE) :: CXXFLAGS:=$(<replace label="NAME"/>_CXXFLAGS)
<replace label="name"/>$(SUFEXE) :: $(<replace label="NAME"/>_OBJ) <replace label="dependency"/> | $(<replace label="NAME"/>_DINC) <replace label="build-dependency"/>
	$(CXX) $(CXXFLAGS) $(OFLAG) <replace label="name"/>$(SUFEXE) $(<replace label="NAME"/>_OBJ) $(<replace label="NAME"/>_LDFLAGS) <replace label="dependency"/>

all :: <replace label="name"/>$(SUFEXE) 

CLEAN_TARGETS:=$(CLEAN_TARGETS) <replace label="name"/>$(SUFEXE)
</template>

 <!-- template for a target other -->
 <template label="target-other">
<replace label="BASENAME"/>_SRC:=<replace label="source"/>
<option label="flags" target="flags"><replace label="BASENAME"/>_<replace label="OTHER"/>_FLAGS=<replace label="flags"/></option><option label="ldflags" target="ldflags"> <replace label="ldflags"/>
</option>
<replace label="name"/> :: <replace label="OTHER"/>_FLAGS+=$(<replace label="BASENAME"/>_<replace label="OTHER"/>_FLAGS)
<replace label="name"/> :: $(<replace label="BASENAME"/>_SRC) <option label="depends"><replace label="dependency"/></option> 
<option label="build" target="compiler">	<replace label="compiler"/> $(<replace label="OTHER"/>_FLAGS) $(<replace label="OTHER"/>_OFLAG) <replace label="name"/> $(<replace label="BASENAME"/>_SRC) <option label="depends"><replace label="dependency"/></option></option>

all :: <replace label="name"/> 

CLEAN_TARGETS:=$(CLEAN_TARGETS) <replace label="name"/>
</template>

 <!-- default for install flags -->
 <property label="executable-install-location">$(BINDIR)</property>
 <property label="executable-install-mode">$(BINIFLAGS)</property>
 <property label="shared-install-location">$(LIBDIR)</property>
 <property label="shared-install-mode">$(LIBIFLAGS)</property>
 <property label="library-install-location">$(DATADIR)</property>
 <property label="library-install-mode">$(FILEIFLAGS)</property>
 <property label="other-install-location">$(DATADIR)</property>
 <property label="other-install-mode">$(FILEIFLAGS)</property>

 <!-- template for a installing targets -->
 <template label="install-library">
install :: <replace label="name"/>$(SUFLIB)
<option label="where">	$(INSTALL) -d <replace label="install"/>
</option><option label="install">	$(INSTALL) <replace label="install-mode"/> $&lt; <replace label="install"/>/$&lt;
</option>
</template>

 <template label="install-shared">
install :: lib<replace label="name"/>$(SUFSHR)
<option label="where">	$(INSTALL) -d <replace label="install"/>
</option><option label="install">	$(INSTALL) <replace label="install-mode"/> $&lt; <replace label="install"/>/$&lt;
</option>
</template>

 <template label="install-executable">
install :: <replace label="name"/>$(SUFEXE)
<option label="where">	$(INSTALL) -d <replace label="install"/>
</option><option label="install">	$(INSTALL) <replace label="install-mode"/> $&lt; <replace label="install"/>/$&lt;
</option>
</template>

 <template label="install-other">
install :: <replace label="name"/>
<option label="where">	$(INSTALL) -d <replace label="install"/>
</option><option label="install">	$(INSTALL) <replace label="install-mode"/> $&lt; <replace label="install"/>/$&lt;
</option>
</template>
 <!-- template name="buildfile">content</template>
 <template name="internal-project">content</template>
 <template name="external-project">content</template>
 <template name="object">content</template>
 <template name="executable">content</template>
 <template name="library">content</template>
 <template name="shared">content</template -->
</style>
<!---





 CMAKE STYLE







-->
<style label="cmake">
 <file label="local.cmake">#
# local.cmake
#
if( NOT DEFINED SUFSRC)
  set (SUFSRC .cc)
endif()
if( NOT DEFINED SUFHDR)
  set (SUFHDR .hh)
endif()
if( NOT DEFINED SUFOBJ)
  set (SUFOBJ .o)
endif()
if( NOT DEFINED SUFEXE)
  set (SUFEXE "")
endif()
if( NOT DEFINED SUFLIB)
  set (SUFLIB .a)
endif()
if( NOT DEFINED SUFSHR)
  set (SUFSHR .so)
endif()
if( NOT DEFINED SUFMAK)
  set (SUFMAK .cmake)
endif()
add_compile_options( $&lt;$&lt;CONFIG:Debug&gt;:-DDEBUG=1&gt; $&lt;$&lt;CONFIG:Release&gt;:-DDEBUG=0&gt; )
#############################
##  Default install locations
#############################
set ( LOCAL_INSTALL_PREFIX stage )
set ( BINDIR bin )
set ( LIBDIR lib )
set ( DATADIR share )
set ( BINIFLAGS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_WRITE WORLD_EXECUTE )
set ( LIBIFLAGS OWNER_READ OWNER_WRITE GROUP_READ GROUP_WRITE WORLD_READ WORLD_WRITE )
set ( FILEIFLAGS OWNER_READ OWNER_WRITE GROUP_READ GROUP_WRITE WORLD_READ WORLD_WRITE )
</file>
 <!-- name of the top-most generated buildfile -->
 <property label="root-file">CMakeLists.txt</property>

 <!-- name of build file in any sub-directories -->
 <property label="run-file">CMakeLists.txt</property>
 <property label="start-phrase">## START:</property>
 <property label="end-phrase">## END:</property>
  <!-- how to make comments -->
 <template label="comment">## <replace label="text"/></template>

 <!-- link to subdirectories -->
 <template label="descendent-link">include (<replace label="path"/>/CMakeLists.txt)
</template>

 <!-- how to include an additional buildfile -->
 <template label="include-build-file">include ( ${CMAKE_SOURCE_DIR}/<replace label="build-file"/>${SUFMAK} )
</template>

 <!-- template for start of root makefile -->
 <template label="preamble-root">
cmake_minimum_required(VERSION 2.6)
enable_language(Fortran)
<option label="sufsrc">set (SUFSRC  .<replace label="source-extension"/>)
</option><option label="sufhdr">set (SUFHDR  .<replace label="header-extension"/>)
</option>include (${CMAKE_SOURCE_DIR}/local.cmake)
</template>

 <!-- template for start of subdirectory makefiles -->
 <template label="preamble">
include (${CMAKE_SOURCE_DIR}/local.cmake)
</template>

 <!-- template for a sub components -->
 <template label="make-variable">${<replace label="text"/>}</template>
 <template label="includes-relative">${CMAKE_SOURCE_DIR}/<replace label="text"/></template>
 <template label="dependency-source"> ${CMAKE_CURRENT_LIST_DIR}/<replace label="name"/>${SUFSRC}</template>
 <template label="dependency-object"> ${CMAKE_CURRENT_LIST_DIR}/<replace label="name"/>${SUFSRC}</template>
 <template label="dependency-object-other"> ${CMAKE_CURRENT_LIST_DIR}/<replace label="name"/></template>
 <template label="dependency-static-library"> <replace label="name"/></template>
 <template label="link-shared-library"></template>
 <template label="dependency-shared-library"> ${<replace label="PROJECT"/>_<replace label="NAME"/>}</template>

 <!-- template for start of (internal) package -->
 <template label="package">
project ( <replace label="NAME"/> )
IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  SET(CMAKE_INSTALL_PREFIX ${LOCAL_INSTALL_PREFIX} CACHE PATH "Where to install the software" FORCE)
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
<option label="include" target="includes">include_directories( <replace label="includes"/> )
</option><option label="flags" target="flags">set ( <replace label="NAME"/>_CXXFLAGS <replace label="flags"/> )
</option><option label="ldflags" target="ldflags">set ( <replace label="NAME"/>_LDFLAGS <replace label="ldflags"/> )
</option>
</template>

 <!-- Actual content for external libraries -->
 <template label="extern-library">set (<replace label="NAME"/>_CXXFLAGS <replace label="flags"/>)
set (<replace label="NAME"/>_LDFLAGS <replace label="ldflags"/>)
set (<replace label="NAME"/>_INC <replace label="includes"/>)
</template>

 <!-- how to build an object file -->
 <template label="object"><option label="flags" target="flags">add_compile_options( <replace label="flags"/> )
 </option><option label="includes" target="includes">include_directories( <replace label="includes"/> )
 </option>
</template>

 <!-- Other target type -->
 <template label="object-other"><option label="flags" target="flags">add_compile_options( <replace label="flags"/> )
 </option><option label="includes" target="includes">include_directories( <replace label="includes"/> )
 </option>
</template>

 <!-- template for a target -->
 <template label="target-library">
 # STATIC
 set ( <replace label="PACKAGE"/>_<replace label="NAME"/> <replace label="name"/> )
 set ( <replace label="PACKAGE"/>_<replace label="NAME"/>_SRC
  <replace label="source"/> )
 add_library ( ${<replace label="PACKAGE"/>_<replace label="NAME"/>} STATIC
    ${<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC} )
 target_compile_options( ${<replace label="PACKAGE"/>_<replace label="NAME"/>} PUBLIC <replace label="flags"/> ${<replace label="PACKAGE"/>_CXXFLAGS} )
 set_property( TARGET ${<replace label="PACKAGE"/>_<replace label="NAME"/>} APPEND_STRING PROPERTY STATIC_LIBRARY_OPTIONS <replace label="ldflags"/>  ${<replace label="PACKAGE"/>_LDFLAGS} )
 <option label="includes" target="includes"> set_property( TARGET ${<replace label="PACKAGE"/>_<replace label="NAME"/>} PROPERTY APPEND INCLUDE_DIRECTORIES <replace label="includes"/>)
 </option></template>

 <!-- template for a target -->
 <template label="target-shared">
## DSO
set ( <replace label="PACKAGE"/>_<replace label="NAME"/>  <replace label="name"/>)
set ( <replace label="PACKAGE"/>_<replace label="NAME"/>_SRC
  <replace label="source"/> )
add_library ( ${<replace label="PACKAGE"/>_<replace label="NAME"/>} SHARED
    ${<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC} )
target_compile_options( ${<replace label="PACKAGE"/>_<replace label="NAME"/>} PUBLIC <replace label="flags"/> ${<replace label="PACKAGE"/>_CXXFLAGS} )
set_property( TARGET ${<replace label="PACKAGE"/>_<replace label="NAME"/>} APPEND_STRING PROPERTY LIBRARY_OPTIONS <replace label="ldflags"/> ${<replace label="PACKAGE"/>_LDFLAGS} )
<option label="includes" target="includes">set_target_properties( ${<replace label="PACKAGE"/>_<replace label="NAME"/>} PROPERTIES INCLUDE_DIRECTORIES <replace label="includes"/>)
</option></template>

 <!-- template for a target -->
 <template label="target-executable">
set( <replace label="PACKAGE"/>_<replace label="NAME"/>  <replace label="name"/>)
set( <replace label="PACKAGE"/>_<replace label="NAME"/>_SRC
  <replace label="source"/> )
add_executable ( ${<replace label="PACKAGE"/>_<replace label="NAME"/>}
    ${<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC} )
target_compile_options( ${<replace label="PACKAGE"/>_<replace label="NAME"/>} PUBLIC <replace label="flags"/> ${<replace label="PACKAGE"/>_CXXFLAGS} )
set_property( TARGET ${<replace label="PACKAGE"/>_<replace label="NAME"/>} APPEND_STRING PROPERTY LINK_OPTIONS <replace label="ldflags"/> ${<replace label="PACKAGE"/>_LDFLAGS} )
 <option label="includes" target="includes">set_target_properties( ${<replace label="PACKAGE"/>_<replace label="NAME"/>} PROPERTIES INCLUDE_DIRECTORIES <replace label="includes"/>)
</option>target_link_libraries( ${<replace label="PACKAGE"/>_<replace label="NAME"/>} <replace label="dependency"/><replace label="build-dependency"/> )
</template>

 <template label="target-other">
set( <replace label="PACKAGE"/>_<replace label="NAME"/> <replace label="name"/>)
set( <replace label="PACKAGE"/>_<replace label="NAME"/>_SRC <replace label="source"/> )
add_custom_command ( OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/<replace label="name"/>
  COMMAND ${<replace label="OTHER"/>} <replace label="flags"/> ${<replace label="OTHER"/>_FLAGS} ${CMAKE_CURRENT_BINARY_DIR}/<replace label="name"/> ${<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC}
  DEPENDS ${<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC}
  VERBATIM )
add_custom_target( ${<replace label="PACKAGE"/>_<replace label="NAME"/>} ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${<replace label="PACKAGE"/>_<replace label="NAME"/>} )
</template>

 <!-- default for install flags -->
 <property label="executable-install-location">${BINDIR}</property>
 <property label="executable-install-mode">${BINIFLAGS}</property>
 <property label="shared-install-location">${LIBDIR}</property>
 <property label="shared-install-mode">${LIBIFLAGS}</property>
 <property label="library-install-location">${DATADIR}</property>
 <property label="library-install-mode">${FILEIFLAGS}</property>
 <property label="other-install-location">${DATADIR}</property>
 <property label="other-install-mode">${FILEIFLAGS}</property>

 <!-- template for a target -->
 <template label="install-library">
install (TARGETS ${<replace label="PACKAGE"/>_<replace label="NAME"/>}
  <option label="where">ARCHIVE DESTINATION <replace label="install"/>
  </option><option label="mode" target="install-mode">PERMISSIONS  <replace label="install-mode"/>
  </option>CONFIGURATIONS Release Debug )
</template>

 <template label="install-executable">
install (TARGETS ${<replace label="PACKAGE"/>_<replace label="NAME"/>}
  <option label="where">RUNTIME DESTINATION <replace label="install"/>
  </option><option label="mode" target="install-mode">PERMISSIONS  <replace label="install-mode"/>
  </option>CONFIGURATIONS Release Debug )
</template>
 <template label="install-shared">
install (TARGETS ${<replace label="PACKAGE"/>_<replace label="NAME"/>}
  <option label="where">LIBRARY DESTINATION <replace label="install"/>
  </option><option label="mode" target="install-mode">PERMISSIONS  <replace label="install-mode"/>
  </option>CONFIGURATIONS Release Debug )
</template>
 <template label="install-other">
install (FILES ${CMAKE_CURRENT_BINARY_DIR}/<replace label="name"/>
  <option label="where">DESTINATION <replace label="install"/>
  </option><option label="mode" target="install-mode">PERMISSIONS <replace label="install-mode"/>
  </option>CONFIGURATIONS Release Debug )
</template>
 <!-- template name="buildfile">content</template>
 <template name="internal-project">content</template>
 <template name="external-project">content</template>
 <template name="object">content</template>
 <template name="executable">content</template>
 <template name="library">content</template>
 <template name="shared">content</template -->
</style>
<!---





 JAM STYLE







-->
<style label="jam">
 <file label="GNU.jam">####################################
##  Definitions for GNU g++ compiler
####################################
##
## Define compiler variables once only.
## 
FC = gfortran ;
CC = gcc ;
C++ = g++ ;
LINK = $(C++) ;
FORTRANFLAGS += -Wall -std=f2008 -c ;
CCFLAGS += -Wall -std=c11 ;
C++FLAGS += -Wall -std=c++11 ;
SHRFLAGS = -fpic ;
SHRLINK = -shared ;
switch $(VARIANT)
{
case RELEASE :
  OPTIM += -O2 -march=native -DDEBUG=0 ;
case * :
  OPTIM = -O0 -ggdb -DDEBUG=1 ;
  CCFLAGS += -pedantic ;
  C++FLAGS += -Weffc++ ;
}
LINKFLAGS += $(OPTIM) ;
CCFLAGS += $(OPTIM) ;
C++FLAGS += $(OPTIM) ;
FORTRANFLAGS += $(OPTIM) ;
OPENMP = -fopenmp ;
</file>
 <file label="Jamrules">#
# Default Jamrules
#

SUFSRC ?= .cc ;
SUFHDR ?= .hh ;
SUFMAK ?= .jam ;
if $(UNIX)  {
SUFOBJ ?= .o ; 
SUFLIB ?= .a ; 
SUFSHR ?= .so ;
}
else if $(NT)
{
SUFOBJ ?= .obj ; 
SUFLIB ?= .lib ; 
SUFSHR ?= .dll ;
}

if $(JAM_TOOLSET) { TOOLSET ?= $(JAM_TOOLSET) ; }
TOOLSET ?= GNU ;
VARIANT ?= DEBUG ;

#############################
##
##  Default install locations
##
#############################
PREFIX = stage ;
BINDIR = $(PREFIX)/bin ;
LIBDIR = $(PREFIX)/lib ;
DATADIR = $(PREFIX)/share ;
BINIFLAGS = $(EXEMODE) ;
LIBIFLAGS = $(FILEMODE) ;
FILEIFLAGS = $(FILEMODE) ;

######################################################
##
##  Example definitions for compiler suite (TOOLSETS)
##  It is possible to add definitions here or in a
##  separate file "$(TOOLSET).jam", the NOCARE rule
##  tells jam not to worry if file does not exist.
## 
######################################################
NOCARE $(TOOLSET).jam ;
include $(TOOLSET).jam ;

# Set variable for variant-specific build-dir handling
BASE_LOCATE_TARGET = $(BUILDDIR)$(SLASH)$(VARIANT) ;
ALL_LOCATE_TARGET = $(BASE_LOCATE_TARGET) ;
</file>
 <!-- name of the top-most generated buildfile -->
 <property label="root-file">Jamfile</property>

 <!-- name of build file in any sub-directories -->
 <property label="run-file">Jamfile</property>
 <property label="start-phrase">## START:</property>
 <property label="end-phrase">## END:</property>

  <!-- how to make comments -->
 <template label="comment">## <replace label="text"/></template>

 <!-- link to subdirectories -->
 <template label="descendent-link">SubInclude TOP  <replace label="path" split="/" join =" " /> ;
</template>

 <!-- how to include an additional buildfile -->
 <template label="include-build-file">include $(TOP)/<replace label="build-file"/>$(SUFMAK) ;
</template>

 <!-- template for start of root makefile -->
 <template label="preamble-root"><option label="sufsrc">SUFSRC = .<replace label="source-extension"/> ;
</option><option label="sufhdr">SUFHDR = .<replace label="header-extension"/> ;
</option>SubDir TOP ;
<option label="build-dir">BUILDDIR = <replace label="build-dir"/> ;
OUTPUTDIR = $(BUILDDIR)$(SLASH)$(VARIANT) ;
</option><option label="includes" target="includes">HDRS += <replace label="includes"/> ;
</option><option label="flags" target="flags">CXXFLAGS += <replace label="flags"/> ;
</option><option label="link" target="ldflags">LINKFLAGS += <replace label="ldflags"/> ;
</option></template>

 <!-- template for start of subdirectory makefiles -->
 <template label="preamble">
ALL_LOCAL_TARGET = $(BASE_LOCAL_TARGET)/<replace label="path"/> ;
SubDir TOP <replace label="path" split="/" join =" " /> ;
</template>

  <!-- how to reference a variable -->
 <template label="make-variable">$(<replace label="text"/>)</template>
  <!-- how to make relative include into absolute -->
 <template label="includes-relative">$(TOP)/<replace label="text"/></template>
 <template label="dependency-source"> <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFSRC)</template>
 <template label="dependency-object"> <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFSRC)</template>
 <template label="dependency-object-other"> <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/></template>
 <template label="dependency-static-library"> <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFLIB)</template>
 <template label="link-shared-library"> <option label="path">-L$(TOP)/<replace label="path"/></option> -l<replace label="name"/></template>
 <template label="dependency-shared-library"> <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFSHR)</template>
 
 <!-- template for start of (internal) package -->
 <template label="package"># Package data
<replace label="NAME"/>_CXXFLAGS = $(CXXFLAGS) ;
<replace label="NAME"/>_LINKFLAGS = $(LINKFLAGS) ;
<option label="INC" target="includes"><replace label="NAME"/>_INCLUDES = <replace label="includes"/> ;
</option><option label="FLAGS" target="flags"><replace label="NAME"/>_CXXFLAGS += <replace label="flags"/> ;
</option><option label="LDFLAGS" target="ldflags"><replace label="NAME"/>_LINKFLAGS += <replace label="ldflags"/> ;
</option>
</template>

 <!-- Actual content for external libraries -->
 <template label="extern-library"><replace label="NAME"/>_FLAGS = <replace label="flags"/> ;
<replace label="NAME"/>_LINKFLAGS = <replace label="ldflags"/> ;
<replace label="NAME"/>_INCLUDE = <replace label="includes"/> ;
</template>


 <!-- how to build an object file -->
 <template label="object">
<option label="build-file" target="build-file">include $(TOP)/<replace label="build-file"/>$(SUFMAK) ;
</option><replace label="PROJECT"/>_<replace label="NAME"/>_INCLUDES = <replace label="includes"/> ;
C++FLAGS on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFOBJ) += <replace label="flags"/> -I$(<replace label="PROJECT"/>_<replace label="NAME"/>_INCLUDES) ;
</template>

 <!-- Other target type -->
 <template label="object-other">
<option label="build-file" target="build-file">include $(TOP)/<replace label="build-file"/>$(SUFMAK) ;
</option><replace label="PROJECT"/>_<replace label="BASENAME"/>_INCLUDES = <replace label="includes"/> ;
CCFLAGS on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="basename"/>$(SUFOBJ) += $(CCFLAGS) <replace label="flags"/> -I$(<replace label="PROJECT"/>_<replace label="BASENAME"/>_INCLUDES) ;
FORTRANFLAGS on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="basename"/>$(SUFOBJ) += $(FORTRANFLAGS) <replace label="flags"/> -I$(<replace label="PROJECT"/>_<replace label="BASENAME"/>_INCLUDES) ;
</template>

 <!-- template for a target static library-->
 <template label="target-library">
<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC =
     <replace label="source"/> ;
<replace label="PACKAGE"/>_<replace label="NAME"/>_INCLUDES = $(<replace label="PACKAGE"/>_INCLUDES) <replace label="includes"/> ;
<replace label="PACKAGE"/>_<replace label="NAME"/>_CXXFLAGS = $(<replace label="PACKAGE"/>_CXXFLAGS) <replace label="flags"/> ;
ObjectC++Flags $(<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC) : $(<replace label="PACKAGE"/>_<replace label="NAME"/>_CXXFLAGS) -I$(<replace label="PACKAGE"/>_<replace label="NAME"/>_INCLUDE) ;
 
Library <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFLIB) :
     $(<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC) ;
</template>
	
 <!-- template for a target -->
 <template label="target-shared">
<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC =
     <replace label="source"/> ;
<replace label="PACKAGE"/>_<replace label="NAME"/>_INCLUDES = $(<replace label="PACKAGE"/>_INCLUDES) <replace label="includes"/> ;
<replace label="PACKAGE"/>_<replace label="NAME"/>_CXXFLAGS = $(<replace label="PACKAGE"/>_CXXFLAGS) <replace label="flags"/> ;
ObjectC++Flags $(<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC) : $(SHRFLAGS) $(<replace label="PACKAGE"/>_<replace label="NAME"/>_CXXFLAGS) -I$(<replace label="PACKAGE"/>_<replace label="NAME"/>_INCLUDE) ;
LINKFLAGS on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" />lib<replace label="name"/>$(SUFSHR) += $(<replace label="PACKAGE"/>_LINKFLAGS) <replace label="ldflags"/> $(SHRLINK) ;
LINKLIBS on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFSHR) += $(<replace label="PACKAGE"/>_LINKFLAGS) <replace label="ldflags"/> ;

Main <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" />lib<replace label="name"/>$(SUFSHR) :
  $(<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC) ;
<option label="libs" target="dependency">LinkLibraries <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFSHR) :
	 <replace label="dependency"/>
	; </option>
</template>
	
 <!-- template for a target -->
 <template label="target-executable">
<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC =
     <replace label="source"/> ;
<replace label="PACKAGE"/>_<replace label="NAME"/>_INCLUDES = $(<replace label="PACKAGE"/>_INCLUDES) <replace label="includes"/> ;
<replace label="PACKAGE"/>_<replace label="NAME"/>_CXXFLAGS = $(<replace label="PACKAGE"/>_CXXFLAGS) <replace label="flags"/> ;
ObjectC++Flags $(<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC) : $(<replace label="PACKAGE"/>_<replace label="NAME"/>_CXXFLAGS) -I$(<replace label="PACKAGE"/>_<replace label="NAME"/>_INCLUDES) ;
LINKFLAGS on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFEXE) += $(<replace label="PACKAGE"/>_LINKFLAGS) <replace label="ldflags"/> ;
LINKLIBS on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFEXE) += $(<replace label="PACKAGE"/>_LINKFLAGS) <replace label="ldflags"/> ;

Main <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFEXE) :
  $(<replace label="PACKAGE"/>_<replace label="NAME"/>_SRC) ;
<option label="libs" target="dependency">LinkLibraries <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFEXE) :
	 <replace label="dependency"/>
	; </option>
</template>

 <template label="target-other"/>
 
 <!-- default for install flags -->
 <property label="executable-install-location">$(BINDIR)</property>
 <property label="executable-install-mode">$(BINIFLAGS)</property>
 <property label="shared-install-location">$(LIBDIR)</property>
 <property label="shared-install-mode">$(LIBIFLAGS)</property>
 <property label="library-install-location">$(DATADIR)</property>
 <property label="library-install-mode">$(FILEIFLAGS)</property>
 <property label="other-install-location">$(DATADIR)</property>
 <property label="other-install-mode">$(FILEIFLAGS)</property>
 <!-- templates for installing targets -->
 <template label="install-library">
<option label="install" target="install-mode">MODE on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFLIB) = <replace label="install-mode"/> ;
</option><option label="where" target="install">InstallLib <replace label="install"/> : <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFLIB) ;
</option>
</template>

 <template label="install-shared">
<option label="install" target="install-mode">MODE on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" />lib<replace label="name"/>$(SUFSHR) = <replace label="install-mode"/> ;
</option><option label="where" target="install">InstallLib <replace label="install"/> : <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" />lib<replace label="name"/>$(SUFSHR) ;
</option>
</template>

 <template label="install-executable">
<option label="install" target="install-mode">MODE on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFEXE) = <replace label="install-mode"/> ;
</option><option label="where" target="install">InstallBin <replace label="install"/> : <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/>$(SUFEXE) ;
</option>
</template>

 <template label="install-other">
<option label="install" target="install-mode">MODE on <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/> = <replace label="install-mode"/> ;
</option><option label="where" target="install">InstallFile <replace label="install"/> : <replace label="path" split="/" join ="!" prefix="&lt;" suffix="&gt;" /><replace label="name"/> ;
</option>
</template>
 <!-- template name="buildfile">content</template>
 <template name="internal-project">content</template>
 <template name="external-project">content</template>
 <template name="object">content</template>
 <template name="executable">content</template>
 <template name="library">content</template>
 <template name="shared">content</template -->
</style>
<!---





 BOOST JAM STYLE







-->
<style label="boost">

 <file label="local.jam">#
# local.bjam
#

using gcc : : : &lt;cflags&gt;"-ansi -std=c11" ;
# using msvc : : : &lt;cflags&gt;"/std:c11 /Za /DWIN32" ; # /Wall 

# Set constants for installation paths
import path ;
path-constant INSTALL_PREFIX : stage ;
constant BINDIR : bin ; # User programs
constant DATADIR : share ; # Private libraries and static data
constant LIBDIR : lib64 ; # Shared libraries
constant BINIFLAGS : 0755 ;
constant LIBIFLAGS : 0644 ;
constant FILEIFLAGS : 0644 ;
if ! $(SUFSRC) {
constant SUFSRC : .cc ;
}
if ! $(SUFHDR)
{
constant SUFHDR : .hh ;
}
if ! $(SUFMAK)
{
constant SUFMAK : .bjam ;
}
if $(UNIX)  {
constant SUFOBJ : .o ; 
constant SUFLIB : .a ; 
constant SUFSHR : .so ;
}
else if $(NT)
{
constant SUFOBJ : .obj ; 
constant SUFLIB : .lib ; 
constant SUFSHR : .dll ;
}
</file>
 <!-- name of the top-most generated buildfile -->
 <property label="root-file">Jamroot</property>
 <!-- name of build file in any sub-directories -->
 <property label="run-file">Jamfile</property>
<property label="start-phrase">## START:</property>
 <property label="end-phrase">## END:</property>
 
  <!-- how to make comments -->
 <template label="comment">## <replace label="text"/></template>

 <!-- link to subdirectories -->
 <template label="descendent-link">build-project "<replace label="path"/>" ;
</template>

 <!-- add a build file -->
 <template label="include-build-file">include <replace label="build-file"/>$(SUFMAK) ;
</template>

 <!-- template for start of root makefile -->
 <template label="preamble-root">
<option label="sufsrc">constant SUFSRC : .<replace label="source-extension"/> ;</option>
<option label="sufhdr">constant SUFHDR : .<replace label="header-extension"/> ;</option>
path-constant topdir : <replace label="path"/> ;
include local.jam ;
</template>

 <!-- template for start of subdirectory makefiles -->
 <template label="preamble"></template>
 
 <template label="make-variable">$(<replace label="text"/>)</template>
 <template label="includes-relative">$(topdir)/<replace label="text"/></template>
 <template label="dependency-source"> <replace label="name"/>$(SUFSRC)</template>
 <template label="dependency-object"> <replace label="name"/></template>
 <template label="dependency-object-other"> <replace label="name"/></template>
 <template label="dependency-static-library"> <option label="path">/<replace label="PROJECT"/>//</option><replace label="name"/></template>
 <template label="link-shared-library"></template>
 <template label="dependency-shared-library"> <option label="path">/<replace label="PROJECT"/>//</option><replace label="name"/></template>

 <!-- template for start of (internal) package -->
 <template label="package">
project <replace label="NAME"/>
  : requirements &lt;debug-symbols&gt;on:&lt;define&gt;"DEBUG=1"
    &lt;debug-symbols&gt;off:&lt;define&gt;"DEBUG=0"<option label="includes" target="includes"> <replace label="includes" split=" " join=" &lt;include&gt;" prefix="&lt;include&gt;"/>
</option><option label="FLAGS"> &lt;cxxflags&gt;"<replace label="flags"/>"
</option><option label="LDFLAGS"> &lt;linkflags&gt;"<replace label="ldflags"/>"
</option> <option label="build-dir"> : build-dir <replace label="build-dir"/></option> ;
</template>

 <!-- how to build an object file -->
 <template label="object">
<option label="build-file" target="build-file">include $(ROOTDIR)/<replace label="build-file"/>$(SUFMAK) ;
</option><!-- option label="flags"><replace label="PROJECT"/>_<replace label="NAME"/>_INCLUDES = <replace label="includes"/> ;
C++FLAGS on /<replace label="PROJECT"/>//<replace label="name"/>$(SUFOBJ) += <replace label="flags"/> -I$(<replace label="PROJECT"/>_<replace label="NAME"/>_INCLUDES) ;
</option>
<option label="flags"> <replace label="name"/>$(SUFOBJ) : <replace label="name"/>$(SUFSRC) :  <replace label="includes" split=" " join=" &lt;include&gt;" prefix="&lt;include&gt;"/> ;
</option -->
obj <replace label="name"/> : <replace label="name"/>$(SUFSRC) 
            : &lt;cflags&gt;"<replace label="flags"/> $(<replace label="PROJECT"/>_<replace label="TARGET"/>_FLAGS)<option label="inc" target="includes">"
              <replace label="includes" split=" " join=" &lt;include&gt;" prefix="&lt;include&gt;"/></option>
            ;
</template>

 <!-- Other target type -->
 <template label="object-other">
<option label="build-file" target="build-file">include $(ROOTDIR)/<replace label="build-file"/>$(SUFMAK) ;
</option><option label="flags" target="flags">CFLAGS on <replace label="basename"/>$(SUFOBJ) += <replace label="flags"/> ;
FORTRANFLAGS on <replace label="basename"/>$(SUFOBJ) += <replace label="flags"/> ;
</option>
<!-- obj <replace label="name"/>$(SUFOBJ) : <replace label="name"/>$(SUFSRC) 
            : <option label="flags">&lt;CXXFLAGS&gt;"<replace label="flags"/>"</option><option label="inc" target="includes">
            &lt;include&gt;"<replace label="includes"/>"</option>
            ; -->
</template>

 <!-- Actual content for external libraries -->
 <template label="extern-library"><option label="flags" target="flags">constant <replace label="NAME"/>_FLAGS : <replace label="flags"/> ;
</option><option label="linkflags" target="ldflags">constant <replace label="NAME"/>LDFLAGS : <replace label="ldflags"/> ;
</option><option label="includes" target="includes">constant <replace label="NAME"/>INC : <replace label="includes"/> ;
</option></template>
  
<template label="target-start"><option label="includes" target="includes">constant <replace label="PACKAGE"/>_<replace label="NAME"/>_INC : <replace label="includes"/> ;
</option><option label="flags" target="flags">constant <replace label="PACKAGE"/>_<replace label="NAME"/>_FLAGS : <replace label="flags"/> -I$(<replace label="PACKAGE"/>_<replace label="NAME"/>_INC)  ;
</option></template>

 <!-- template for a static library target -->
 <template label="target-library">
lib <replace label="name"/> :
                     <replace label="source"/>
                     : &lt;link&gt;static <option label="includes" target="includes"> <replace label="includes" split=" " join=" &lt;include&gt;" prefix="&lt;include&gt;"/></option><option label="FLAGS"> &lt;<replace label="other"/>flags&gt;"<replace label="flags"/>"</option><option label="LDFLAGS"> &lt;linkflags&gt;"<replace label="ldflags"/>"
</option>
                     ;
</template>

 <!-- template for a shared library target -->
 <template label="target-shared">
lib <replace label="name"/> :
                     <replace label="source"/> <replace label="dependency"/> <replace label="build-dependency"/>
                     : &lt;link&gt;shared <option label="includes" target="includes"> <replace label="includes" split=" " join=" &lt;include&gt;" prefix="&lt;include&gt;"/></option><option label="FLAGS"> &lt;<replace label="other"/>flags&gt;"<replace label="flags"/>"</option><option label="LDFLAGS"> &lt;linkflags&gt;"<replace label="ldflags"/>"
</option>
                     ;
</template> 

 <!-- template for a executable target -->
 <template label="target-executable">
exe <replace label="name"/> :
                     <replace label="source"/> <replace label="dependency"/> <replace label="build-dependency"/>
                     :<option label="includes" target="includes"> <replace label="includes" split=" " join=" &lt;include&gt;" prefix="&lt;include&gt;"/></option><option label="FLAGS"> &lt;<replace label="other"/>flags&gt;"<replace label="flags"/>"</option><option label="LDFLAGS"> &lt;linkflags&gt;"<replace label="ldflags"/>"
</option>
                     ;
</template>

 <!-- template for a other target -->
 <template label="target-other">
<replace label="other"/> <replace label="name"/> :
                     <replace label="source"/> <replace label="dependency"/> <replace label="build-dependency"/>
                     :<option label="includes" target="includes"> <replace label="includes" split=" " join=" &lt;include&gt;" prefix="&lt;include&gt;"/></option><option label="FLAGS"> &lt;<replace label="other"/>flags&gt;"<replace label="flags"/>"</option><option label="LDFLAGS"> &lt;linkflags&gt;"<replace label="ldflags"/>"
</option>                ;
</template>

 <!-- Actual content for external libraries -->
 <template label="extern-library">constant <replace label="NAME"/>FLAGS : <replace label="flags"/> ;
constant <replace label="NAME"/>LDFLAGS : <replace label="ldflags"/> ;
constant <replace label="NAME"/>INC : <replace label="includes"/> ;
</template>

 <!-- default for install flags -->
 <property label="executable-install-location">$(BINDIR)</property>
 <property label="executable-install-mode">$(BINIFLAGS)</property>
 <property label="shared-install-location">$(LIBDIR)</property>
 <property label="shared-install-mode">$(LIBIFLAGS)</property>
 <property label="library-install-location">$(DATADIR)</property>
 <property label="library-install-mode">$(FILEIFLAGS)</property>
 <property label="other-install-location">$(DATADIR)</property>
 <property label="other-install-mode">$(FILEIFLAGS)</property>
 
 <!-- template for a target -->
 <template label="install-library">
<option label="where" target="install">install $(INSTALL_PREFIX)/<replace label="name"/> : <replace label="name"/>
 : &lt;variant&gt;debug:&lt;location&gt;$(INSTALL_PREFIX)/<replace label="install"/> &lt;variant&gt;release:&lt;location&gt;$(INSTALL_PREFIX)/<replace label="install"/> ;
</option></template>

 <template label="install-shared">
<option label="where" target="install">install $(INSTALL_PREFIX)/<replace label="name"/> : <replace label="name"/>
 : &lt;variant&gt;debug:&lt;location&gt;$(INSTALL_PREFIX)/<replace label="install"/> &lt;variant&gt;release:&lt;location&gt;$(INSTALL_PREFIX)/<replace label="install"/> ;
</option></template>

 <template label="install-executable">
<option label="where" target="install">install $(INSTALL_PREFIX)/<replace label="name"/> : <replace label="name"/>
 : &lt;variant&gt;debug:&lt;location&gt;$(INSTALL_PREFIX)/<replace label="install"/> &lt;variant&gt;release:&lt;location&gt;$(INSTALL_PREFIX)/<replace label="install"/> ;
</option></template>

 <template label="install-other">
<option label="where" target="install">install $(INSTALL_PREFIX)/<replace label="name"/> : <replace label="name"/>
 : &lt;variant&gt;debug:&lt;location&gt;$(INSTALL_PREFIX)/<replace label="install"/> &lt;variant&gt;release:&lt;location&gt;$(INSTALL_PREFIX)/<replace label="install"/> ;
</option></template>
 <!-- template name="buildfile">content</template>
 <template name="internal-project">content</template>
 <template name="external-project">content</template>
 <template name="object">content</template>
 <template name="executable">content</template>
 <template name="library">content</template>
 <template name="shared">content</template -->
 </style>
</style-definitions>
