class gmake_generator
!!!145072.cpp!!!	create() : std::unique_ptr< base_generator >
  std::unique_ptr< base_generator > Result (new gmake_generator);
  return Result;
!!!145456.cpp!!!	descendent_link(inout a_art : compound_artifact, inout a_sys : compound_artifact, in a_loc : location) : void
// Need to write the "M_sys" include line.
{
  QString tmp_;
  QTextOStream desc_os_( &tmp_ );
  {
    const int e_ = rules_name.find( ' ' );
    QString name_ ( e_ < 0 ? rules_name : rules_name.left( e_ ) );
    desc_os_ << "include " << ( pathcmp( "$(ROOTDIR)" ) / name_ ).path_localised() << "\n\n";
  }
  a_art.document().append_preamble_value( tmp_ );
}
// Keep parent dir definitions.
if ( NULL != a_loc.parent() )
{
  // Add us to base makefile
  QString link( "dirs += " );
  link.append( pathcmp( root_dir().create_relative( a_loc.full_path() ) ).path_localised() );
  link.append( "\n" );
  const QString label( a_loc.path().path() );
  if( ! a_sys.document().has_target( label ) )
  {
    a_sys.document().add_target( label, "", link );
  }
  else
  {
    a_sys.document().append_target_value( label, link );
  }
}


!!!146096.cpp!!!	process_flags(in a_inc_list : unistr, in a_flag_list : unistr, inout a_cppflags : unistr, inout a_cflags : unistr) : void
QTextOStream cppos_ (&a_cppflags);
QTextOStream flagos_ (&a_cflags);
if (! a_inc_list.isEmpty())
{
  for (const_token_iterator e1_, b1_(a_inc_list.simplifyWhiteSpace (), ' '); b1_ != e1_; ++b1_)
  {
    const QString item_(b1_->c_str ());
    BUTTER_CHECK (! item_.isEmpty ()
                  , "<p><em>Programming error:</em> token iterator returned an empty string</p>");
    if ('$' != item_[0] && QDir::isRelativePath (item_))
    {
      cppos_ << "-I" << (pathcmp("$(ROOTDIR)") / item_).path_localised () << " ";
    }
    else
    {
      cppos_ << "-I" << pathcmp(item_).path_localised () << " ";
    }
  }
}
if (! a_flag_list.isEmpty())
{
  for (const_token_iterator e1_, b1_(a_flag_list.simplifyWhiteSpace (), ' '); b1_ != e1_; ++b1_)
  {
    const QString item_(b1_->c_str ());
    BUTTER_CHECK (! item_.isEmpty ()
                  , "<p><em>Programming error:</em> token iterator returned an empty string</p>");
    if (item_.length() <= 2)
    {
      flagos_ << item_ << " ";
    }
    else if ('-' == item_[0])
    {
      if ('I' == item_[1])
      {
        cppos_ << "-I" << pathcmp(item_.mid(2)).path_localised () << " ";
      }
      else if ('D' == item_[1])
      {
        cppos_ << item_ << " ";
      }
      else
      {
        flagos_ << item_ << " ";
      }
    }
    else
    {
      if ('$' == item_[0] && (item_.contains("INC") || item_.contains("CPP") || item_.contains("HDR")))
      {
        cppos_ << item_ << " ";
      }
      else
      {
        flagos_ << item_ << " ";
      }
    }
  }
}

!!!146224.cpp!!!	process_hdrs(in a_inc_list : unistr) : unistr
QString Result;
{
  QTextOStream os_ (&Result);
  for (const_token_iterator e1_, b1_(a_inc_list.simplifyWhiteSpace (), ' '); b1_ != e1_; ++b1_)
  {
    const QString item_(b1_->c_str ());
    if ('$' != item_[0] && QDir::isRelativePath (item_))
    {
      os_ << "-I$(ROOTDIR)/" << item_ << " ";
    }
    else
    {
      os_ << "-I" << item_ << " ";
    }
  }
}
return Result;
