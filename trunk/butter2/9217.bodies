class UmlPackage
!!!259248.cpp!!!	find_uml_document(in name : unistr, out result : QVector< UmlItem* >) : void
BUTTER_REQUIRE(! name.isEmpty (), "Cannot look for a document without a name");  
// Only check our deployment views.
for(unsigned int i = 0; i != this->children().size(); ++i )
{
  UmlItem * deploy_cursor_{ this->children().at(i) };
  if( aDeploymentView == deploy_cursor_->kind() )
  {
    for(unsigned int j = 0; j !=  deploy_cursor_->children().size(); ++j)
    {
      UmlItem * artifact_cursor_{ deploy_cursor_->children().at(j) };
      if (anArtifact == artifact_cursor_->kind()
          && name == artifact_cursor_->name().data()
          && document_stereotype() == artifact_cursor_->stereotype())
      {
        result.push_back( artifact_cursor_ );
      }
    }
  }
}
!!!426032.cpp!!!	write_documents(in path : enumerate_path, inout log : base_log) : void
auto pack_kids_ = this->children();
for( unsigned int i_ = 0; i_ != pack_kids_.count(); ++i_ )
{
  UmlItem *const kid_ = pack_kids_.at(i_);
  if (aDeploymentView == kid_->kind())
  {
    auto dep_kids_ = kid_->children();
    for( unsigned int k_ = 0; k_ < dep_kids_.count(); ++k_)
    {
      UmlItem *const art_ = dep_kids_.at(k_);
      if(anArtifact == art_->kind())
      {
        UmlArtifact *const doc_ = dynamic_cast< UmlArtifact * >(art_);
        BUTTER_CHECK(nullptr != doc_, "<p><b>Program error:</b> Item kind (Artifact) did not match class type.</p>");
        doc_->write_out(path, log);
      }
    }
  }
}
!!!479536.cpp!!!	hdr_path() : QDir
if( ! base_ )
{
  set_base();
}
return QDir(base_->path() + QDir::separator() + const_cast< UmlPackage & >(*this).cppHDir());
!!!479664.cpp!!!	src_path() : QDir
if( ! base_ )
{
  set_base();
}
return QDir(base_->path() + QDir::separator() + const_cast< UmlPackage & >(*this).cppHDir());
!!!479792.cpp!!!	set_base() : void
if( ! base_ )
{
  base_.reset(new QDir(CppSettings::rootDir()));
  if( base_->isRelative() )
  {
    UmlItem *p_ = const_cast< UmlPackage* >(this);
    while( p_->parent() != NULL )
    {
      p_ = p_->parent();
    }
    QFileInfo f_(dynamic_cast< UmlPackage* >(p_)->supportFile());
    base_->setPath(f_.dir().filePath(base_->path()));
  }
}
