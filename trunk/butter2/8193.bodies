class UmlArtifact
!!!273328.cpp!!!	~UmlArtifact()
using namespace butter;
// Only check if the document has been read.
if( nullptr != this->doc_.get() )
{
  // Compare to existing document
  QString desc_;
  const QString orig_desc_( this->description () );
  {
    QTextOStream os_( &desc_ );
    // Output using original date
    this->doc_->write( os_, true );
  }
  if( 0 != orig_desc_.compare( desc_ ) )
  {
    QString desc2_;
    {
      QTextOStream os_( &desc2_ );
      this->doc_->write( os_, false );
    }
    this->set_Description( desc2_.utf8() );
  }
}

!!!259760.cpp!!!	write_out(in full_path : enumerate_path, inout log : base_log) : void
using namespace butter;
if (document_stereotype() == this->stereotype().data())
{
  // Only write non-empty docs.
  if (! this->description().isEmpty())
  {
    QByteArray document_prop_value_;
    this->propertyValue(butter_output_name(), document_prop_value_);
    if (document_prop_value_.isEmpty() || (document_prop_value_ != nowrite_value()))
    {
      QString document_filepath_{ (full_path / this->name()).path() };
      if (! document_prop_value_.isEmpty())
      {
        document_filepath_ += "." + document_prop_value_;
      }
      bool result{ false };
      if(QFile::exists(document_filepath_))
      {
        QFile iofile(document_filepath_);
        if (! iofile.open(IO_ReadOnly))
        {
          QString msg("<b>Fatal Error:</b> Unable to open file for reading: " + document_filepath_);
          throw std::runtime_error(msg.toStdString());
        }
        QByteArray contents_{ iofile.readAll() };
        result = (contents_.size() == this->description().size()
                  && 0 == strncmp(contents_.constData(), this->description().constData(), contents_.size()));
      }
      if (! result)
      {
        log.trace(log.warn, "<p>Writing changed document : " + document_filepath_ + "</p>");
        QFile iofile(document_filepath_);
        if (! iofile.open(IO_ReadOnly))
        {
          QString msg("<b>Fatal Error:</b> Unable to open file for writing: " + document_filepath_);
          throw std::runtime_error(msg.toStdString());
        }
        iofile.writeBlock(this->description(), this->description().size());
      }
      else
      {
        log.trace(log.info, "<p>Skipping unchanged document : " + document_filepath_ + "</p>");
      }
    }
  }
}
!!!273200.cpp!!!	merge(inout art : UmlArtifact) : void
// check we have local doc or generate
if( nullptr == this->doc_.get() )
{
  BUTTER_REQUIRE( nullptr != art.doc_.get(), "Get document before merging." );
  this->document( art.doc_->start_phrase(), art.doc_->end_phrase() );
}
// check we have other doc or generate
if( nullptr == art.doc_.get() )
{
  art.document( this->doc_->start_phrase(), this->doc_->end_phrase() );
}
BUTTER_REQUIRE( nullptr != this->doc_.get() && nullptr != art.doc_.get(), "Unable to create compound documents from UmlArtifact object." );
// merge
this->doc_->merge( *art.doc_ );
!!!273072.cpp!!!	document(in start_phrase : unistr, in end_phrase : unistr) : compound_document
if( ! this->doc_ )
{
  this->doc_.reset( new butter::compound_document );
  QByteArray tmp_( this->description() );
  QTextIStream is_( &tmp_ );
  this->doc_->start_phrase( start_phrase );
  this->doc_->end_phrase( end_phrase );
  this->doc_->parse( is_ );
}
return *(this->doc_);
