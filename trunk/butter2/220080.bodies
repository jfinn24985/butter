class build_style
!!!280496.cpp!!!	comment_text(in a_text : unistr, in newline_at_end : bool = true) : unistr
QString Result;
{
  QTextOStream os_ (&Result);
  int s_ = 0; // start position
  for (int e_ = a_text.find('\n', s_); e_ > 0; e_ = a_text.find ('\n', s_))
  {
    os_ << begin_comment() << ' ';
    os_ << a_text.mid(s_, e_ - s_);
    os_ << end_comment() << "\n";
    s_ = e_ + 1;
  }
  if (a_text.at(a_text.length() - 1) != '\n')
  {
    os_ << begin_comment() << ' ';
    os_ << a_text.mid(s_);
    os_ << end_comment() << "\n";
  }
}
if( ! newline_at_end && Result.endsWith('\n'))
{
  Result.chop(1);
}
return Result;

!!!304560.cpp!!!	read_style(in style : unistr, inout xml : QXmlStreamReader) : void
BUTTER_REQUIRE(xml.isStartElement() && (xml.name() == style_xmlname()),
               ("XML reader not at a "+style_xmlname()+" element in call to build_style::read_style.").toStdString());
if(! this->properties_.empty())
{
  this->properties_.clear();
}
if(! this->special_files_.empty())
{
  this->special_files_.clear();
}
if(! this->templates_.empty())
{
  this->templates_.clear();
}
{
  QVector< QString > phrases;
  bool found_style = false;
  while (!xml.atEnd())
  {
    switch(xml.readNext())
    {
    case QXmlStreamReader::StartElement:
    {
      // name = style | file | property | template
      if(xml.name() == style_xmlname())
      {
        BUTTER_REQUIRE(xml.attributes().hasAttribute(text_template::label_xmlname()),
                       QString("Style XML element does not have required attribute at line %1").arg(xml.lineNumber()).toStdString() );
        if(style != xml.attributes().value(text_template::label_xmlname()) )
        {
          // skip to next style
          bool in_style = true;
          while (in_style && !xml.atEnd())
          {
            switch(xml.readNext())
            {
            case QXmlStreamReader::EndElement:
            {
              if(xml.name() == style_xmlname())
              {
                in_style = false;
              }
            }
            break;
            default:
              break;
            }
          }
        }
        else
        {
          found_style = true;
        }
      }
      else if(xml.name() == text_template::text_template_xmlname())
      {
        BUTTER_REQUIRE(xml.attributes().hasAttribute(text_template::label_xmlname()),
                       QString("Text template XML element does not have required attribute at line %1").arg(xml.lineNumber()).toStdString() );
        this->templates_[ xml.attributes().value(text_template::label_xmlname()).toString() ].read( xml );
      }
      else if(xml.name() == file_xmlname())
      {
        BUTTER_REQUIRE(xml.attributes().hasAttribute(text_template::label_xmlname()),
                       QString("File XML element does not have required attribute at line %1").arg(xml.lineNumber()).toStdString() );
        QString & content = this->special_files_[ xml.attributes().value(text_template::label_xmlname()).toString() ];
        bool in_file = true;
        while(in_file && !xml.atEnd())
        {
          switch(xml.readNext())
          {
          case QXmlStreamReader::StartElement:
          {
            BUTTER_REQUIRE(false,
                           QString("Start element not expected in property XML element at line %1").arg(xml.lineNumber()).toStdString());
          }
          break;
          case QXmlStreamReader::EndElement:
          {
            BUTTER_REQUIRE(xml.name() == file_xmlname(),
                           QString("Mismatched end element at line %1").arg(xml.lineNumber()).toStdString());
            in_file = false;
          }
          break;
          case QXmlStreamReader::Characters:
          {
            content += xml.text();
          }
          break;
          default:
          break;
          }
        }
      }
      else if(xml.name() == property_xmlname())
      {
        BUTTER_REQUIRE(xml.attributes().hasAttribute(text_template::label_xmlname()),
                       QString("Property XML element does not have required attribute at line %1").arg(xml.lineNumber()).toStdString() );
        QString & content = this->properties_[ xml.attributes().value(text_template::label_xmlname()).toString() ];
        bool in_property = true;
        while(in_property && !xml.atEnd())
        {
          switch(xml.readNext())
          {
          case QXmlStreamReader::StartElement:
          {
            BUTTER_REQUIRE(false,
                           QString("Start element not expected in property XML element at line %1").arg(xml.lineNumber()).toStdString());
          }
          break;
          case QXmlStreamReader::EndElement:
          {
            BUTTER_REQUIRE(xml.name() == property_xmlname(),
                           QString("Mismatched end element at line %1").arg(xml.lineNumber()).toStdString());
            in_property = false;
          }
          break;
          case QXmlStreamReader::Characters:
          {
            content += xml.text();
          }
          break;
          default:
          break;
          }
        }
      }
      else
      {
        BUTTER_REQUIRE(false, QString("Unexpected XML start element "+xml.name().toString()+" at line %1").arg(xml.lineNumber()).toStdString() );
      }
    }
    break;
    case QXmlStreamReader::EndElement:
    {
      if(xml.name() == style_xmlname())
      {
        return;
      }
      else
      {
        BUTTER_REQUIRE(false, QString("Unexpected XML end element "+xml.name().toString()+" at line %1").arg(xml.lineNumber()).toStdString() );
      }
    }
    break;
    case QXmlStreamReader::Characters:
      // ignore text outside expected elements
      break;
    case QXmlStreamReader::Comment:
      // Ignore
      break;
    case QXmlStreamReader::ProcessingInstruction:
      // Ignore
      break;
    default:
      // All others are errors!
      throw std::runtime_error( QString("Unexpected XML element '%1' in stream at line %2").arg(xml.name().toString(), QString("%1").arg(xml.lineNumber())).toStdString() );
      break;
    }
  }
  BUTTER_REQUIRE( found_style,  QString("Unknown style '%1'.").arg(style).toStdString() );
}
!!!359600.cpp!!!	read_style(in style : unistr, in path : unistr) : void
//if( ! QDir(QDir(path).absolutePath()).exists() )
//{
//  throw std::runtime_error(("File "+QDir(path).absolutePath()+" not found.").toStdString());
//}

QFile xmlfile{ QDir(path).absolutePath() };
xmlfile.open(QIODevice::ReadOnly);
BUTTER_REQUIRE(xmlfile.isOpen(), ("Unable to open file "+QDir(path).absolutePath()+".").toStdString());

QXmlStreamReader xml{ &xmlfile };
for( ; xml.readNext() && ! xml.atEnd()
  && (! xml.isStartElement() || xml.name() != style_xmlname())
   ; );

if( xml.atEnd() )
{
  throw std::runtime_error(("No style definition found in file "+path).toStdString());
}
this->read_style( style, xml );
!!!331312.cpp!!!	extend_properties(in other : build_style::map_type) : build_style::map_type
map_type p{ this->properties_ };
for(auto itr = other.begin(); itr != other.end(); ++itr)
{
  p.insert(itr.key(), itr.value());
}
return std::move(p);
!!!306096.cpp!!!	get_build_file_name() : unistr
auto itr = this->properties_.find( build_file_label() );
return (itr == this->properties_.end() ? QString() : itr.value());
!!!412720.cpp!!!	get_end_phrase() : unistr
auto itr = this->properties_.find( end_phrase_label() );
return (itr == this->properties_.end() ? make_comment_text("END:", false) : itr.value());
!!!305968.cpp!!!	get_root_file_name() : unistr
auto itr = this->properties_.find( root_build_file_label() );
return (itr == this->properties_.end() ? QString() : itr.value());
!!!412592.cpp!!!	get_start_phrase() : unistr
auto itr = this->properties_.find( start_phrase_label() );
return (itr == this->properties_.end() ? make_comment_text("START:", false) : itr.value());
!!!314160.cpp!!!	make_close(in properties : build_style::map_type) : unistr
auto itr = this->templates_.find( close_xmllabel() );
if( itr != this->templates_.end() )
{
  return itr.value().instantiate( this->extend_properties( properties ) );
}
return QString();
!!!315056.cpp!!!	make_comment_text(in text : unistr, in newline_at_end : bool = true) : unistr
auto itr = this->templates_.find( "comment" );
if( itr != this->templates_.end() )
{
  QString Result;
  {
    QTextOStream os_(&Result);
    int s_ = 0; // start position
    for (int e_ = text.find('\n', s_); e_ > 0; e_ = text.find('\n', s_))
    { 
      map_type p;
      p[ "text" ] = text.mid(s_, e_ - s_);
      os_ << itr.value().instantiate( p );
      os_ << "\n";
      s_ = e_ + 1;
    }
    if(s_ < text.length())
    {
      map_type p;
      p[ "text" ] = text.mid(s_);
      os_ << itr.value().instantiate( p );
      os_ << "\n";
    }
  }
  if( ! newline_at_end && Result.endsWith('\n'))
  {
    Result.chop(1);
  }
  return Result;
}
else
{
  return comment_text(text, newline_at_end);
}
!!!314416.cpp!!!	make_date(in properties : build_style::map_type) : unistr
auto itr = this->templates_.find( date_xmllabel() );
map_type p{ this->extend_properties( properties ) };
if(p.find("date") == p.end())
{
  p.insert( QString("date"), QDateTime::currentDateTime().toString() );
}
if( itr != this->templates_.end() )
{
  return itr.value().instantiate( p );
}
else
{
  return make_comment_text( p["date"] );
}
!!!305200.cpp!!!	make_element(in tmpl : unistr, in properties : build_style::map_type) : unistr
auto itr = this->templates_.find( tmpl );
if( itr != this->templates_.end() )
{
  return itr.value().instantiate( this->extend_properties( properties ) );
}
return QString();
!!!304688.cpp!!!	make_preamble(in properties : build_style::map_type) : unistr
auto itr = this->templates_.find( preamble_xmllabel() );
if( itr != this->templates_.end() )
{
  return itr.value().instantiate( this->extend_properties( properties ) );
}
return QString();
!!!314288.cpp!!!	make_version(in properties : build_style::map_type) : unistr
auto itr = this->templates_.find( version_xmllabel() );
if( itr != this->templates_.end() )
{
  return itr.value().instantiate( this->extend_properties( properties ) );
}
return QString();
