format 224
"butter" // API USER::butter
  revision 50
  modified_by 48 "finnerty"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_namespace "butter"
  classview 128065 "butter"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    associated_deployment_view deploymentview_ref 128065 // butter
    classdiagram 187312 "Over view"
      classdiagramsettings member_max_width 0 end
      size A4-Landscape
    end

    classdiagram 128048 "compound_document"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 128176 "location"
      classdiagramsettings draw_all_relations yes member_max_width 0 end
      size A4
    end

    classdiagram 141488 "enumerate_path"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 148016 "logging"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 167728 "text templates"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 174256 "generate a build file"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 128065 "Transcribe"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 180784 "Application"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    class 179120 "base_log"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 131632 "log_level"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 141104 "warn"
	  public type class_ref 131632 // log_level
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 141232 "info"
	  public type class_ref 131632 // log_level
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 141360 "debug"
	  public type class_ref 131632 // log_level
	  init_value " 2//include debugging messages

    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 266288 "trace"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "level" type class_ref 131632 // log_level
	  param in name "msg" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 368304 "trace"
	public explicit_return_type "void"
	nparams 2
	  param in name "level" type class_ref 131632 // log_level
	  param in name "msg" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   this->trace(level, QByteArray(msg));
}
"
	
	
	
	
      end

      operation 368176 "trace"
	public explicit_return_type "void"
	nparams 2
	  param in name "level" type class_ref 131632 // log_level
	  param in name "msg" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  this->trace(level, msg.utf8());
}
"
	
	
	
	
      end

      operation 351152 "level"
	abstract const cpp_virtual public return_type class_ref 131632 // log_level
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "The minimum log level to forward"
      end

      operation 359088 "set_level"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "lvl" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "Set minimum log level to forward"
      end

      operation 359216 "debug_log"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "fname" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "Add an additional file log for messages, mainly for debugging"
      end

      operation 359344 "stream"
	abstract cpp_virtual public explicit_return_type "stream"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 382000 "have_stream"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "Is it possible to use stream()?"
      end
    end

    class 220080 "build_style"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      extra_member 190000 "XML LABELS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 313776 "build_file_label"
	class_operation public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} label(\"build-file\"); return label;
}
"
	
	
	
	
      end

      operation 314032 "binary_target_xmllabel"
	class_operation constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static QString label(\"binary-target\");
  return label;
}
"
	
	
	
	
      end

      operation 323888 "close_xmllabel"
	class_operation constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static QString label(\"close\");
  return label;
}
"
	
	
	
	
      end

      operation 331440 "date_xmllabel"
	class_operation constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static QString label(\"date\");
  return label;
}
"
	
	
	
	
      end

      operation 324016 "end_phrase_label"
	class_operation constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static QString label(\"end-phrase\");
  return label;
}
"
	
	
	
	
      end

      operation 321712 "file_xmlname"
	class_operation constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static QString label(\"file\");
  return label;
}
"
	
	
	
	
      end

      operation 324272 "preamble_xmllabel"
	class_operation constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static QString label(\"preamble\");
  return label;
}
"
	
	
	
	
      end

      operation 321840 "property_xmlname"
	class_operation constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static QString label(\"property\");
  return label;
}
"
	
	
	
	
      end

      operation 313904 "root_build_file_label"
	class_operation public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} label(\"root-file\"); return label;
}
"
	
	
	
	
      end

      operation 324144 "start_phrase_label"
	class_operation constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static QString label(\"start-phrase\");
  return label;
}
"
	
	
	
	
      end

      operation 321584 "style_xmlname"
	class_operation constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static QString label(\"style\");
  return label;
}
"
	
	
	
	
      end

      operation 324400 "version_xmllabel"
	class_operation constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static QString label(\"version\");
  return label;
}
"
	
	
	
	
      end

      extra_member 190128 "DOCUMENT TEXT"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 358320 "begin_comment"
	class_operation constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static QString label(\"#\");
  return label;
}
"
	
	
	
	
      end

      operation 358448 "end_comment"
	class_operation constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static QString label{};
  return label;
}
"
	
	
	
	
      end

      operation 280496 "comment_text"
	class_operation preserve_cpp_body_indent public explicit_return_type "unistr"
	nparams 2
	  param in name "a_text" explicit_type "unistr"
	  param in name "newline_at_end" explicit_type "bool"
	    defaultvalue "true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Transcribe the given text into a comment in the current
build system.  In general this prepends comment indicators
to each line of a_text and adds a terminal newline if
a_text does not end in a newline."
      end

      extra_member 190256 "ATTRIBUTES"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      class 220208 "map_type"
	visibility package stereotype "typedef" explicit_base_type "unistr"
	cpp_decl "${comment}typedef QMap< ${type}, ${type} > ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	mysql_decl ""
	
      end

      classrelation 208176 // templates_ (<directional composition>)
	relation 207792 *-->
	  stereotype "map"
	  a role_name "templates_" multiplicity "*" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${association}, ${type}> ${name}${value};
"
	    classrelation_ref 208176 // templates_ (<directional composition>)
	  b parent class_ref 206256 // text_template
	  association_explicit_type "unistr"
      end

      attribute 186928 "properties_"
	private type class_ref 220208 // map_type
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 187056 "special_files_"
	private type class_ref 220208 // map_type
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Map of filenames and content for special/auxilliary build files to create in the root location."
      end

      extra_member 169904 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 306608 "build_style"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: templates_()
, properties_()
, special_files_() {}
"
	
	
	
	
      end

      operation 306736 "~build_style"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end

      operation 306864 "build_style"
	stereotype "copy"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 220080 // build_style
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	
	
      end

      operation 306992 "operator="
	private return_type class_ref 220080 // build_style
	nparams 1
	  param in name "source" type class_ref 220080 // build_style
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	
	
      end

      extra_member 170288 "SERIALIZATION"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 304560 "read_style"
	public explicit_return_type "void"
	nparams 2
	  param in name "style" explicit_type "unistr"
	  param inout name "xml" explicit_type "QXmlStreamReader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 359600 "read_style"
	public explicit_return_type "void"
	nparams 2
	  param in name "style" explicit_type "unistr"
	  param in name "path" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      extra_member 170032 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 331312 "extend_properties"
	const public return_type class_ref 220208 // map_type
	nparams 1
	  param in name "other" type class_ref 220208 // map_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Add the contents of other to the style property map, with any
existing keys being overwritten by the values in other."
      end

      operation 306096 "get_build_file_name"
	public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Name of all non-root build files."
      end

      operation 412720 "get_end_phrase"
	public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Name of all non-root build files."
      end

      operation 323760 "get_properties"
	const public return_type class_ref 220208 // map_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type}& ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return this->properties_; }
"
	
	
	
	
	comment "A map of filenames and content of any special build files to create in the root location"
      end

      operation 305968 "get_root_file_name"
	public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Name of the root build file."
      end

      operation 305712 "get_special_files"
	const public return_type class_ref 220208 // map_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type}& ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return this->special_files_; }
"
	
	
	
	
	comment "A map of filenames and content of any special build files to create in the root location"
      end

      operation 412592 "get_start_phrase"
	public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Name of all non-root build files."
      end

      operation 307248 "get_templates"
	stereotype "map"
	const public return_type class_ref 206256 // text_template
	multiplicity "*"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}QMap< QString, ${type} > const& ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}QMap< QString, ${type} > const& ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return this->templates_; }
"
	
	
	
	
	comment "A map of filenames and content of any special build files to create in the root location"
      end

      extra_member 170416 "GENERATE"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 314160 "make_close"
	const constvalue public explicit_return_type "unistr"
	nparams 1
	  param in name "properties" type class_ref 220208 // map_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Adds/Checks the close section.

* Using this method instead of directly accessing the templates is
recommended as it combines the passed properties to the build
style properties before instantiating the template."
      end

      operation 315056 "make_comment_text"
	const public explicit_return_type "unistr"
	nparams 2
	  param in name "text" explicit_type "unistr"
	  param in name "newline_at_end" explicit_type "bool"
	    defaultvalue "true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Generate a comment suitable for putting in the buildfile.

This uses a template labelled \"comment\", splitting text into
separate lines and feeding the template a line at a time. If
no template exists, then the fall-back is to use 
constants::comment_text

\\param text : text to comment
"
      end

      operation 314416 "make_date"
	const public explicit_return_type "unistr"
	nparams 1
	  param in name "properties" type class_ref 220208 // map_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Adds/Checks the date section

* Using this method instead of directly accessing the templates is
recommended as it combines the passed properties to the build
style properties before instantiating the template."
      end

      operation 305200 "make_element"
	const public explicit_return_type "unistr"
	nparams 2
	  param in name "tmpl" explicit_type "unistr"
	  param in name "properties" type class_ref 220208 // map_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Instantiate the named template with the given properties and build
properties.  Returns an empty string if the template
does not exist.

\\param properties : map of replacement properties for the template
\\param tmpl : the name of the template to use

* Using this method instead of directly accessing the templates is
recommended as it combines the passed properties to the build
style properties before instantiating the template.
"
      end

      operation 304688 "make_preamble"
	const public explicit_return_type "unistr"
	nparams 1
	  param in name "properties" type class_ref 220208 // map_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Adds/Checks the preamble section

* Using this method instead of directly accessing the templates is
recommended as it combines the passed properties to the build
style properties before instantiating the template."
      end

      operation 314288 "make_version"
	const public explicit_return_type "unistr"
	nparams 1
	  param in name "properties" type class_ref 220208 // map_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Adds/Checks the version section

* Using this method instead of directly accessing the templates is
recommended as it combines the passed properties to the build
style properties before instantiating the template."
      end

      extra_member 170160 "MODIFY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 129328 "constants"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Static strings for the butter project."
      attribute 131376 "bindir_value"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"BINDIR\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The label of the install target binary directory.
"
      end

      attribute 131504 "buildfile_value"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"buildfile\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Artifacts with the document stereotype that contain this
string are considered to be templates
"
      end

      attribute 131632 "BUTTER_VERSION"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "= \"Butter version 0.2beta.\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The current program version string
"
      end

      attribute 133936 "generic_section"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"generic\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The label of a 'generic' section of an artifact description.
"
      end

      attribute 134192 "libdir_value"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"LIBDIR\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The label of the install target library directory var.
"
      end

      attribute 134576 "no_install_value"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"NONE\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Value of he \"butter install\" property to indicate that the target 
should not be installed.
"
      end

      attribute 134832 "shared_value"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"shared\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Property value for \"butter_lib_type\" property. Indicates that
library targets will be shared.
"
      end

      attribute 134960 "source_stereotype"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"source\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The stereotype name for source artifacts.
"
      end

      attribute 135088 "static_value"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"static\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Property value for \"butter_lib_type\" property. Indicates that
library targets will be static.
"
      end

      attribute 135216 "version_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"version\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Generic property name for the project version.
"
      end

      attribute 135984 "app_data_env_var"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "= 
#ifdef _WIN32
\"APPDATA\"
#else
\"HOME\"
#endif
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Build file section label for a target section.
"
      end

      attribute 136112 "app_data_subdir_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "= 
#ifdef _WIN32
\"Butter\"
#else
\".butter\"
#endif
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Build file section label for a target section.
"
      end
    end

    class 129840 "compound_document"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A compound document is used to manage documents that
contain user and auto-generated content. The auto-generated
content contains information about a build target, the
user content is something manually added by the user,
possibly build information for subsequent targets. When
initially generated the targets will have the following
order: (\"version\", \"date\", \"preamble\", [build targets]*,
\"close\" {end}). The {end} target is a special unnamed
pseudo-target that contains any user text added after the
generated text. The user can manually reorder the build
target sequence, though the order of \"version\", \"date\",
\"preamble\" and \"close\" are fixed. The object maintains the
information as a list of string pairs. The first element
is any text manually added by the user and the second
element is the auto generated text.

NOTES:

  * If the user supplies an artifact with the appropriate
  name before a build generator is run, any text in the
  document will be added between the \"date\" and \"preamble\"
  sections.

  * (auto-generted) parts are enclosed in \"start_phrase_\" /
  \"end_phrase_\" markers that are used to parse the document
  back into a compound document.

  * (user) parts are any non-whitespace outside the
  markers. This information is stored with the following
  auto-generated part, except when there is no following
  target in which case it is the {end} text.

Standard build-file form is a compound_document with the
following initial order

[version] generator version information
[date] generation date
[preamble] ... (optional)
[target:....]* ...
[close] ...  (optional)
{end}  (optional)

"
      operation 351280 "close_label"
	class_operation public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} t{ \"close\" };
  return t;
}
"
	
	
	
	
	comment "Build file section name for the closing section.
"
      end

      operation 351536 "date_label"
	class_operation public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} t{ \"date\" };
  return t;
}
"
	
	
	
	
	comment "Build file section name for the date of generation

"
      end

      operation 351408 "preamble_label"
	class_operation public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} t{ \"preamble\" };
  return t;
}
"
	
	
	
	
	comment "Build file section name for the preamble.

"
      end

      operation 351792 "target_label"
	class_operation public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} t{ \"target\" };
  return t;
}
"
	
	
	
	
	comment "Build file section name for the preamble.

"
      end

      operation 351664 "version_label"
	class_operation public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} t{ \"version\" };
  return t;
}
"
	
	
	
	
	comment "Build file section name for the generator version

"
      end

      class 129968 "document_element"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 137648 "label"
	  public explicit_type "unistr"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The element's label
"
	end

	attribute 137776 "user"
	  public explicit_type "unistr"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The element's user-added text
"
	end

	attribute 137904 "value"
	  public explicit_type "unistr"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The element's generated text
"
	end

	operation 136368 "document_element"
	  cpp_defaulted public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${abstract};"
	  
	  
	  
	  
	end

	operation 136496 "document_element"
	  public explicit_return_type ""
	  nparams 3
	    param in name "a_label" explicit_type "unistr"
	    param in name "a_user" explicit_type "unistr"
	    param in name "a_value" explicit_type "unistr"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${abstract} : label( a_label )
        , user( a_user )
        , value( a_value )
        {};"
	  
	  
	  
	  
	end

	operation 136624 "~document_element"
	  cpp_defaulted public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${abstract};"
	  
	  
	  
	  
	end

	operation 136752 "document_element"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "source" type class_ref 129968 // document_element
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${abstract} : label( std::move( source.label ) )
        , user( std::move( source.user ) )
        , value( std::move( source.value ) )
        {};"
	  
	  
	  
	  
	end

	operation 136880 "document_element"
	  public explicit_return_type ""
	  nparams 1
	    param in name "source" type class_ref 129968 // document_element
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract} : label( source.label )
        , user( source.user )
        , value( source.value )
        {};"
	  
	  
	  
	  
	end

	operation 137008 "operator ="
	  public return_type class_ref 129968 // document_element
	  nparams 1
	    param in name "source" type class_ref 129968 // document_element
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract} {
          this->swap( source );
          return *this;
        };"
	  
	  
	  
	  
	end

	operation 137136 "swap"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "other" type class_ref 129968 // document_element
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${abstract} {
          std::swap( label, other.label );
          std::swap( user, other.user );
          std::swap( value, other.value );
        };"
	  
	  
	  
	  
	end

	operation 273968 "isEmpty"
	  const public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return this->user.isEmpty() && this->value.isEmpty(); }
"
	  
	  
	  
	  
	  comment "Is there no user or value string set."
	end
      end

      attribute 166704 "end_phrase_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Text that ends a delineated section"
      end

      attribute 166576 "start_phrase_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Text that starts a delineated section"
      end

      classrelation 129712 // close_ (<directional composition>)
	relation 129712 *-->
	  a role_name "close_" private
	    comment "The close texts (optional)
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129712 // close_ (<directional composition>)
	  b parent class_ref 129968 // document_element
      end

      classrelation 129840 // date_ (<directional composition>)
	relation 129840 *-->
	  a role_name "date_" private
	    comment "The date texts
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129840 // date_ (<directional composition>)
	  b parent class_ref 129968 // document_element
      end

      classrelation 234544 // date_orig_ (<directional composition>)
	relation 234160 *-->
	  a role_name "date_orig_" private
	    comment "The date texts
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 234544 // date_orig_ (<directional composition>)
	  b parent class_ref 129968 // document_element
      end

      attribute 138032 "postscript_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Any user text at the end of the document.
"
      end

      classrelation 129968 // preamble_ (<directional composition>)
	relation 129968 *-->
	  a role_name "preamble_" private
	    comment "The preamble texts
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129968 // preamble_ (<directional composition>)
	  b parent class_ref 129968 // document_element
      end

      classrelation 130096 // targets_ (<directional composition>)
	relation 130096 *-->
	  stereotype "qvector"
	  a role_name "targets_" private
	    comment "The artifact's target parts.  

The order these are read in and written out is meaningful, therefore we use a vector instead of a map.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 130096 // targets_ (<directional composition>)
	  b parent class_ref 129968 // document_element
      end

      classrelation 130224 // version_ (<directional composition>)
	relation 130224 *-->
	  a role_name "version_" private
	    comment "The version texts.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130224 // version_ (<directional composition>)
	  b parent class_ref 129968 // document_element
      end

      extra_member 128432 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 137264 "compound_document"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${abstract};"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}${)} 
: end_phrase_(), start_phrase_()
, close_( close_label(), {}, {} )
, date_( date_label(), {}, {} )
, date_orig_( date_label(), {}, {} )
, postscript_()
, preamble_( preamble_label(), {}, {} )
, targets_()
, version_( version_label(), {}, {} )
{}
"
	
	
	
	
	comment "Construct and initialise object from a_art"
      end

      operation 137392 "~compound_document"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${abstract} = default;"
	
	
	
	
      end

      operation 137520 "compound_document"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 129840 // compound_document
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract}
    : end_phrase_( source.end_phrase_ ), start_phrase_( source.start_phrase_ )
    , close_( source.close_ )
    , date_( source.date_ )
    , date_orig_( source.date_orig_ )
    , postscript_( source.postscript_ )
    , preamble_( source.preamble_ )
    , targets_( source.targets_ )
    , version_( source.version_ )
    {};"
	
	
	
	
      end

      operation 137648 "compound_document"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 129840 // compound_document
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${abstract}
    : end_phrase_( std::move( source.end_phrase_ ) )
    , start_phrase_( std::move( source.start_phrase_ ) )
    , close_( std::move( source.close_ ) )
    , date_( std::move( source.date_ ) )
    , date_orig_( std::move( source.date_orig_ ) )
    , postscript_( std::move( source.postscript_ ) )
    , preamble_( std::move( source.preamble_ ) )
    , targets_( std::move( source.targets_ ) )
    , version_( std::move( source.version_ ) )
    {};"
	
	
	
	
      end

      operation 137776 "swap"
	cpp_noexcept public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 129840 // compound_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${abstract} noexcept {
      std::swap( end_phrase_, source.end_phrase_ );
      std::swap( start_phrase_, source.start_phrase_ );
      std::swap( close_, source.close_ );
      std::swap( date_, source.date_ );
      std::swap( date_orig_, source.date_orig_ );
      std::swap( postscript_, source.postscript_ );
      std::swap( preamble_, source.preamble_ );
      std::swap( targets_, source.targets_ );
      std::swap( version_, source.version_ );
    };"
	
	
	
	
	comment "no copy"
      end

      operation 137904 "operator ="
	public return_type class_ref 129840 // compound_document
	nparams 1
	  param in name "source" type class_ref 129840 // compound_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract} {
      this->swap( source );
      return *this;
    };"
	
	
	
	
      end

      extra_member 128560 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 141104 "at"
	stereotype "const"
	preserve_cpp_body_indent const constvalue public return_type class_ref 129968 // document_element
	nparams 1
	  param in name "idx" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${typeprefix}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Get target at a given index.

\\pre idx < size"
      end

      operation 155696 "at"
	stereotype "const"
	preserve_cpp_body_indent const constvalue public return_type class_ref 129968 // document_element
	nparams 1
	  param in name "a_label" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${typeprefix}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Get target element with a_label.

\\pre has_target( a_label )"
      end

      operation 155440 "operator[]"
	stereotype "const"
	const public return_type class_ref 129968 // document_element
	nparams 1
	  param in name "idx" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
   return this->targets_[ idx ];
}

"
	
	
	
	
	comment "Get target at position idx"
      end

      operation 138672 "close"
	stereotype "const"
	const constvalue public return_type class_ref 129968 // document_element
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
   return this->close_;
}"
	
	
	
	
	comment "Get the document close element (precedes end_text)."
      end

      operation 138800 "date"
	stereotype "const"
	const constvalue public return_type class_ref 129968 // document_element
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
   return this->date_;
}"
	
	
	
	
	comment "Get the date element."
      end

      operation 375472 "date_original"
	stereotype "const"
	const constvalue public return_type class_ref 129968 // document_element
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
   return this->date_orig_;
}"
	
	
	
	
	comment "Get the date element as read in during parse"
      end

      operation 138928 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract} {
   return this->targets_.isEmpty();
}"
	
	
	
	
      end

      operation 273584 "end_phrase"
	stereotype "const"
	const constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return this->${name}_; }
"
	
	
	
	
      end

      operation 139056 "postscript"
	stereotype "const"
	const constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
  return this->postscript_;
}"
	
	
	
	
	comment "Get any user supplied information at the end of the document"
      end

      operation 139312 "has_target"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "a_label" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Check for the existance of a target."
      end

      operation 139440 "preamble"
	stereotype "const"
	const constvalue public return_type class_ref 129968 // document_element
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
   return this->preamble_;
}"
	
	
	
	
	comment "Get the preamble element."
      end

      operation 141232 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract} {
      return this->targets_.size();
    };"
	
	
	
	
      end

      operation 273456 "start_phrase"
	stereotype "const"
	const constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return this->${name}_; }
"
	
	
	
	
      end

      operation 141360 "version"
	stereotype "const"
	const constvalue public return_type class_ref 129968 // document_element
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
   return this->version_;
}"
	
	
	
	
	comment "Get the version element."
      end

      extra_member 128688 "MODIFY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 139184 "operator[]"
	preserve_cpp_body_indent public return_type class_ref 129968 // document_element
	nparams 1
	  param in name "a_label" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Get target element with a_label.

If not has_target( a_label ) inserts and returns a new empty element"
      end

      operation 155568 "close"
	public return_type class_ref 129968 // document_element
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
   return this->close_;
}"
	
	
	
	
	comment "Get the document close element (precedes end_text)."
      end

      operation 155824 "date"
	public return_type class_ref 129968 // document_element
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
   return this->date_;
}"
	
	
	
	
	comment "Get the date element."
      end

      operation 273712 "end_phrase"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  this->${name}_ = ${p0}; }
"
	
	
	
	
      end

      operation 155952 "postscript"
	public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
  return this->postscript_;
}"
	
	
	
	
	comment "Get any user supplied information at the end of the document"
      end

      operation 156080 "preamble"
	public return_type class_ref 129968 // document_element
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
   return this->preamble_;
}"
	
	
	
	
	comment "Get the preamble element."
      end

      operation 273840 "start_phrase"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  this->${name}_ = ${p0}; }
"
	
	
	
	
      end

      operation 156208 "version"
	public return_type class_ref 129968 // document_element
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
   return this->version_;
}"
	
	
	
	
	comment "Get the version element."
      end

      extra_member 128816 "METHOD"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 141488 "merge"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "a_other" type class_ref 129840 // compound_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Merges the content of two compound documents.

Merge process:

* For any elements with the same label, append the other data to 
  the element in this object.

* Append any elements in the other object that are not in this
  object.

\\pre ! start_phrase.empty && ! end_phrase.empty
	&& start_phrase == other.start_phrase
	&& end_phrase == other.end_phrase"
      end

      operation 141616 "parse"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "a_is" explicit_type "QTextIStream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Reset object and read-in a new artifact.

The version, date, preamble and close are read as-is. User data preceding
targets are read and the sequence order of targets is maintained, but the 
content of the target section is left blank.

The method uses the start_phrase and end_phrase as regular expressions for
finding the beginning and ending of autogenerated and user sections.

\\pre ! start_phrase.empty && ! end_phrase.empty
"
      end

      operation 141744 "reset"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Emptys auto-generated values for all targets, preamble and close 
labelled sections, leaving any user supplied data and the version and 
date elements unchanged."
      end

      operation 141872 "write"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 2
	  param inout name "a_os" explicit_type "QTextOStream"
	  param in name "a_use_origin" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Output the parts into a_os

The start and end phrase arguments provide bracket lines for each subsection
of the input text.  These phrases are also used when parsing the text.

\\pre ! start_phrase.empty && ! end_phrase.empty
"
      end
    end

    class 128432 "enumerate_path"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Treat filesystem paths as a list of filesystem folder names.
This extends the Qt QDir class to allow paths to be manipulated.
Methods for path manipulation avoid operations that reference
the real operating system filesystem.  This means that distinct
paths are assumed to never refer to the same location, which
is generally valid unless the paths involve symlinks.
"
      extra_member 156336 "op<<(os, QString)"
	
	cpp "" "std::ostream & operator<<(std::ostream & os, const QString &s)
{
  os << s.toStdString();
  return os;
}
"
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 161072 // <generalisation>
	relation 160688 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 161072 // <generalisation>
	  b parent class_ref 166064 // QDir
      end

      attribute 140848 "default_separator_"
	class_attribute const_attribute private explicit_type "sbyte"
	multiplicity "[2]"
	init_value "= \"/\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Separator to use regardless of OS
"
      end

      attribute 140976 "other_separator_"
	class_attribute const_attribute private explicit_type "sbyte"
	multiplicity "[2]"
	init_value "= \"\\\\\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "separator used on other OS
"
      end

      extra_member 149296 "LIFETIME"
	
	cpp "
// Lifetime methods

" "
// Lifetime methods

"
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 151344 "enumerate_path"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${abstract}: QDir() {}"
	
	
	
	
	comment "Default ctor"
      end

      operation 151472 "enumerate_path"
	public explicit_return_type ""
	nparams 1
	  param in name "a_path" explicit_type "unistr"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${abstract}: QDir(normalise(a_path)) {}"
	
	
	
	
	comment "Construct from string (automatically normalizing the path)"
      end

      operation 151600 "enumerate_path"
	public explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "QDir"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract}: QDir(normalise(source.path())) {}"
	
	
	
	
	comment "Construct from base class (automatically normalizing path)"
      end

      operation 151728 "~enumerate_path"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${abstract} {}"
	
	
	
	
      end

      operation 151856 "enumerate_path"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract}: QDir(source) {}"
	
	
	
	
      end

      operation 214960 "enumerate_path"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${abstract}: QDir(std::move(source)) {}"
	
	
	
	
      end

      operation 151984 "operator ="
	public return_type class_ref 128432 // enumerate_path
	nparams 1
	  param in name "source" type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract} {
   this->setPath(source.path());
   return *this;
}"
	
	
	
	
      end

      operation 217904 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      extra_member 149424 "ACCESS"
	
	cpp "
// Access methods

" "
// Access methods

"
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 225456 "is_dos_absolute"
	const private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Test if the path starts with a drive letter as in \"?:\""
      end

      operation 152112 "depth"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "The number of steps in the path."
      end

      operation 152368 "has_subpath"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "a_rhs" type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Here subpath means that a_rhs is a subdirectory or file in this
directory.

NOTE: a is_subpath implies that this == create_common(a_rhs).
"
      end

      operation 152240 "equality"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "a_rhs" type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Compare two paths. Returns canonicalPath = a_rhs.canonicalPath 
(ignoring trailing separator)"
      end

      operation 152496 "leaf_at"
	preserve_cpp_body_indent const public explicit_return_type "unistr"
	nparams 1
	  param in name "a_count" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Get part of path at position a_count"
      end

      operation 152624 "operator =="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "a_lhs" type class_ref 128432 // enumerate_path
	  param in name "a_rhs" type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${abstract} {
  return a_lhs.equality (a_rhs);
};"
	
	
	
	
      end

      extra_member 128048 "using QDir::path"
	
	cpp "  using QDir::path;" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      extra_member 128176 "using QDir::exists"
	
	cpp "  using QDir::exists;" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      extra_member 128304 "using QDir::isRelative"
	
	cpp "  using QDir::isRelative;" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 152752 "create_common"
	preserve_cpp_body_indent const public explicit_return_type "unistr"
	nparams 1
	  param in name "a_other" type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Generate a path that has the greatest shared path between this
and a_other.

Will raise and exception when paths are on different drives.

**NOTE: This class is not intended as a general solution.
In the butter program having two paths that have no common root
is an exception as we can not create a build system without
the common root.  This is why this method throws an exception**
"
      end

      operation 152880 "create_relative"
	preserve_cpp_body_indent const public explicit_return_type "unistr"
	nparams 1
	  param in name "a_target" type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Build a relative path from here to a_target.

canonical (path_ + relative (a_target)) <==> a_target"
      end

      extra_member 149552 "MODIFY"
	
	cpp "
// Modification methods

" "
// Modification methods

"
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 153264 "normalise"
	class_operation preserve_cpp_body_indent public explicit_return_type "unistr"
	nparams 1
	  param in name "a_path" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Convert string to form with all separators as \"/\" (function part)"
      end

      operation 153392 "operator /"
	const public return_type class_ref 128432 // enumerate_path
	nparams 1
	  param in name "rhs" type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract} {
   return ${type}(path () + default_separator_ + rhs.path ());
}"
	
	
	
	
	comment "Concatenate 2 paths"
      end

      operation 153520 "operator /"
	const public return_type class_ref 128432 // enumerate_path
	nparams 1
	  param in name "rhs" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract} {
   return ${type}(path () + default_separator_ + normalise (rhs));
}"
	
	
	
	
	comment "Concatenate 2 paths"
      end

      operation 153648 "path_localised"
	const public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract} {
      return QDir::convertSeparators (path ());
    };"
	
	
	
	
	comment "Output path using the current OS'S separators.  Used when
writing paths for external visibility."
      end

      operation 153776 "path_convert"
	preserve_cpp_body_indent const public explicit_return_type "unistr"
	nparams 1
	  param in name "a_trans" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Create a copy of the path string that has all the separators replaced 
by some arbitrary string \"a_trans\"."
      end

      operation 153904 "setPath"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_path" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract} {
   QDir::setPath (normalise (a_path));
}"
	
	
	
	
	comment "Change to a new internal path (automatically normalize)"
      end

      extra_member 149680 "MODIFY FILESYSTEM"
	
	cpp "
// Modify filesystem methods

" "
// Modify filesystem methods

"
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 153008 "mkpath"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Create this and all parent directories for the current path."
      end
    end

    class 128560 "location"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Manages a build location in the project. It has a one-to-one correspondence with a filesystem 
directory and one-to-many with the set of UmlPackages for the directory. These are generated in the first
phase of the program execution.

Responsibilities:
- Property handling
 - base
 - log-level
 - style

Location objects form a tree like structure that parallels a filesystem 
directory structure, except locations may be sparse.

Axioms:

1) There is exactly one root location containing all other locations

2) A location can have children more than one level deep in the filesystem

3) A location can not have a child A that's directory is a 
  subdirectory of child B. { If child B exists when child A is added then
  it is forwarded to child B. If child A exists when child B is added then
  child A is relocated to child B }

Example 1:

.../ rootpath <*> / subpath1     / subpathA     / subpathX <*>
                  / subpath2 <*> / subpathB <*>

gives

[location:rootpath].children{ [location:subpathX], 
    [location:subpath2].children{ [location:subpathB] } }

Example 2:

.../ rootpath1 <*>
.../ rootpath2 <*>

gives

[location:common_parent(rootpath1,rootpath2)].children{ 
    [location:rootpath1], [location:rootpath2] }


"
      classrelation 140976 // <dependency>
	relation 140592 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 140976 // <dependency>
	  b parent class_ref 138416 // location_set
      end

      classrelation 132144 // children_ (<composition>)
	relation 132144 *---
	  stereotype "qvector"
	  a role_name "children_" multiplicity "*" private
	    comment "The child nodes (managed)
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 132144 // children_ (<composition>)
	  b role_name "parent_" multiplicity "1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 133424 // parent_ (<composition>)
      end

      classrelation 133424 // parent_ (<composition>)
	relation_ref 132144 // <composition>
      end

      attribute 146608 "path_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "* Relative path from parent to this location. If no parent then is the \"location_base_path\"@.
* Path may not yet exist on filesystem.

@location_base_path is defined as the relative path to the base_path location in the bouml project.
The bouml base_path location is either relative to the project working directory or absolute. We 
assume QDir::exists(base_path) or QDir::mkdir(base_path) will succeed and therefore so will
QDir::exists(location_base_path) or QDir::mkdir(location_base_path)."
      end

      attribute 153392 "state_"
	private explicit_type "any"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An opaque structure used by the butter system to manage build system creation."
      end

      extra_member 135344 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 148528 "location"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "path" explicit_type "unistr"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${abstract};"
	cpp_def "// -

${inline}${typeprefix}${class}::${name}${(}${t0} ${p0}${)}
: children_()
, parent_(nullptr)
, path_(${p0})
, state_(nullptr)
{}
"
	
	
	
	
	comment "Ctor for location tree root objects"
      end

      operation 232112 "location"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${abstract};"
	cpp_def "// -

${inline}${typeprefix}${class}::${name}${(}${)}
: children_()
, parent_(nullptr)
, path_(\".\")
, state_(nullptr)
{}
"
	
	
	
	
	comment "Ctor for location tree root objects"
      end

      operation 148784 "~location"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
	comment "Deletes all children."
      end

      operation 148656 "location"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "a_path" explicit_type "unistr"
	  param inout name "a_parent" type class_ref 128560 // location
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${volatile}${abstract};"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}
: children_()
, parent_(&a_parent)
, path_(a_path)
, state_(nullptr)
{
${body}}
"
	
	
	
	
	comment " Ctor for child location objects (a_path is relative to the parent
 location.) Not to be called directly, use \"create_as_child\"."
      end

      operation 148912 "location"
	stereotype "deleted"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 128560 // location
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
	comment "no copy"
      end

      operation 149040 "operator="
	stereotype "deleted"
	cpp_deleted private return_type class_ref 128560 // location
	nparams 1
	  param in name "source" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	
	
	
	
	comment "no assign"
      end

      extra_member 135472 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 149168 "children"
	stereotype "const"
	const constvalue public explicit_return_type "QVector< location * >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
   return children_;
}"
	
	
	
	
	comment "Get the children!"
      end

      operation 149424 "full_path"
	stereotype "const"
	preserve_cpp_body_indent const public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "The path from the parent location, this is an empty string for the top-level location

(\\see location_set::offset_path and \\see location::full_path)"
      end

      operation 149680 "parent"
	stereotype "const"
	const constvalue public return_type class_ref 128560 // location
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} * ${name}${(}${)}${const}${volatile}${abstract} {
   return parent_;
}"
	
	
	
	
	comment "The parent location of this location, or nul for the top-level location."
      end

      operation 149808 "path"
	stereotype "const"
	const constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
  return path_;
}"
	
	
	
	
	comment "The path to the root location of the containing location set.

(\\see location_set::offset_path and \\see location::full_path)"
      end

      operation 185904 "value"
	stereotype "const"
	const constvalue public explicit_return_type "any"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract} {
  return state_;
}"
	
	
	
	
	comment "The value content of this location"
      end

      extra_member 135600 "METHOD"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 149552 "value"
	public explicit_return_type "void"
	nparams 1
	  param out name "val" explicit_type "any"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract} {
  state_ = ${p0};
}"
	
	
	
	
	comment "Set the value content of this location"
      end

      operation 193840 "value"
	public explicit_return_type "any"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract} {
  return state_;
}"
	
	
	
	
	comment "The value content of this location"
      end
    end

    class 138416 "location_set"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Container for the set of locations that will be used in defining the build system.


Programming notes: Paths and locations

* All paths as arguments to methods are directly from bouml

* Relative paths from the bouml project are relative to CppSrcDir.

* Each subdirectory (with content) in the source tree has a corresponding location object.

* The root location may be above the directory pointed to by CppSrcDir, so always incorporates the CppSrcDir in its path.

    * NB. If the root directory does not incorporate the CppSrcDir then path manipulation gets polluted with local paths

"
      attribute 160048 "src_dir_"
	private type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "CPP source directory defined in the project.  All paths
non-absolute paths will be relative to this location.

* All paths as arguments to methods are directly from bouml

* Relative paths from the bouml project are relative to CppSrcDir.
"
      end

      classrelation 140464 // root_ (<directional composition>)
	relation 140208 *-->
	  stereotype "unique_ptr"
	  a role_name "root_" multiplicity "0..1" private
	    comment "The root of the location set

* The root location may be above the directory pointed to by CppSrcDir, so always incorporates the CppSrcDir in its path.

    * NB. If the root directory does not incorporate the CppSrcDir then path manipulation gets polluted with local paths"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 140464 // root_ (<directional composition>)
	  b parent class_ref 128560 // location
      end

      extra_member 142128 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 206896 "location_set"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: src_dir_()
, root_()
{}
"
	
	
	
	
	comment "Default constructor (src_dir_ is set to '.')"
      end

      operation 245296 "location_set"
	public explicit_return_type ""
	nparams 1
	  param in name "src_dir" explicit_type "unistr"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${volatile}${throw}
: src_dir_(${p0})
, root_()
{}
"
	
	
	
	
	comment "Default constructor, single argument is the CppSrcDir from bouml."
      end

      operation 207024 "~location_set"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end

      operation 207152 "location_set"
	stereotype "copy"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 138416 // location_set
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	
	
      end

      operation 207408 "location_set"
	stereotype "move"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 138416 // location_set
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	
	
	
	
      end

      operation 207280 "operator="
	cpp_deleted private return_type class_ref 138416 // location_set
	nparams 1
	  param in name "source" type class_ref 138416 // location_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      extra_member 142256 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 185776 "base_path"
	const public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "The path to the root of the build system. All locations in the set are
below this point. Note this may not be the same as the src_dir which
is defined in the bouml project.

"
      end

      operation 238640 "find_closest"
	const public return_type class_ref 128560 // location
	nparams 1
	  param in name "a_path" type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Attempt to find the closest location to a_path.

\\pre root.path.fullpath.has_subpath(a_path)

\\result - return nul if location_set is empty
           - result.path.fullpath.has_subpath(a_path)
"
      end

      operation 252464 "find_closest_"
	const private return_type class_ref 128560 // location
	nparams 1
	  param in name "a_path" type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Attempt to find the closest location to a_path.

\\pre root.path.fullpath.has_subpath(a_path)

\\result - return nul if location_set is empty
           - result.path.fullpath.has_subpath(a_path)
"
      end

      operation 231984 "root"
	stereotype "const"
	const constvalue public return_type class_ref 128560 // location
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return root_.get();
}
"
	
	
	
	
	comment "Return a pointer to the root location, may be nul"
      end

      operation 366896 "root"
	public return_type class_ref 128560 // location
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return root_.get();
}
"
	
	
	
	
	comment "Return a pointer to the root location, may be nul"
      end

      operation 245424 "source_directory"
	const constvalue public return_type class_ref 128432 // enumerate_path
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
   return src_dir_;
}
"
	
	
	
	
	comment "CPPSrcDir in bouml project."
      end

      operation 183344 "topdown"
	stereotype "qvector"
	const public return_type class_ref 128560 // location
	multiplicity "*"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${stereotype}< ${type} * > ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${stereotype}< ${type} * > ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Get the sequence of locations in top-down order."
      end

      operation 150192 "serialize"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "stream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "This descends the location tree writing debug information to
a_os as it goes.

(Only if NO_LOG is undefined)"
      end

      extra_member 142384 "MODIFY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 150064 "insert"
	preserve_cpp_body_indent public explicit_return_type "location"
	nparams 1
	  param in name "a_path" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Find or create a new location object that matches the given
path.  If new locations are created, one location is created
for each level of the path that is a sub-path of offset_path.

It is not an error to provide a path with an existing matching
path.


\\post new.offset_path.equality(old.offset_path) or new.offset_path.has_subpath(old.offset_path)
\\post result.path = search_path.leaf_at(search_path.depth - 1)
"
      end
    end

    class 172592 "location_state"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl "${comment}${final}${visibility}${abstract}class ${name}${extends}${implements} {
${members}}
"
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 167728 // packages_ (<directional aggregation>)
	relation 167344 o-->
	  stereotype "qvector"
	  a role_name "packages_" multiplicity "*" private
	    comment "Any packages with content at the current location's path"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type} *> ${name}${value};
"
	    classrelation_ref 167728 // packages_ (<directional aggregation>)
	  b parent class_ref 9217 // UmlPackage
      end

      operation 366640 "add_package"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pack" type class_ref 9217 // UmlPackage
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Add to the list of packages"
      end

      operation 366768 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return this->packages_.isEmpty();
}
"
	
	
	
	
	comment "Do we have any packages"
      end

      operation 280624 "find_uml_document"
	public return_type class_ref 8833 // UmlItem
	nparams 1
	  param in name "name" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}QVector< ${type} * > ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}QVector< ${type} * > ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Find UmlArtifact objects of the given name at the current location. This
may return an empty list if none are found

\\pre not name.empty"
      end

      operation 388912 "add_uml_document"
	public return_type class_ref 8193 // UmlArtifact
	nparams 2
	  param in name "fname" explicit_type "unistr"
	  param inout name "log" type class_ref 179120 // base_log
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Create and return a \"document\" type UmlArtifact object at the current location.
Create a document at the current location with  a_name. This 
scans the package(s) for a deployment view and uses the first one 
found.  If none are found then it creates a deployment view in
the first package.  Then it creates an artifact with a_name in the
selected deployment view.

\\pre not packages.empty
\\pre not has_document(a_name)"
      end

      operation 388784 "packages"
	stereotype "qvector"
	public return_type class_ref 9217 // UmlPackage
	multiplicity "*"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}QVector< ${type} * > & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->packages_;
}
"
	
	
	
	
	comment "Get set of packages at this location, may be empty"
      end

      operation 259632 "write_documents"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "set" type class_ref 138416 // location_set
	  param inout name "log" type class_ref 179120 // base_log
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Write all UML documents for the given location set

* This calls write_documents on all packages which should call write_out on 
all document artifacts.

Notes:

* We could make write_documents recursive in the UmlPackage class, however
calculating the correct path is non-trivial and requires information outside the
package class (although accessible from there).  By putting the method here
we can pass the path information from the location objects to each package."
      end
    end

    class 252848 "log"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 228016 // <generalisation>
	relation 227632 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 228016 // <generalisation>
	  b parent class_ref 179120 // base_log
      end

      attribute 207280 "level_"
	private type class_ref 131632 // log_level
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 207024 "debug_file_"
	private explicit_type "QFile"
	multiplicity "0..1"
	stereotype "unique_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 207152 "debug_os_"
	private explicit_type "stream"
	multiplicity "0..1"
	stereotype "unique_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 196784 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 367664 "log"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: level_(warn)
, debug_file_()
, debug_os_() {}
"
	
	
	
	
      end

      operation 367792 "~log"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
      end

      operation 367920 "log"
	stereotype "copy"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 252848 // log
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	
	
      end

      operation 368048 "operator="
	private return_type class_ref 252848 // log
	nparams 1
	  param in name "source" type class_ref 252848 // log
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	
	
      end

      extra_member 196912 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 367152 "level"
	const cpp_virtual public return_type class_ref 131632 // log_level
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return this->level_; }
"
	
	
	
	
	comment "The minimum log level to forward"
      end

      operation 367536 "stream"
	cpp_virtual public explicit_return_type "stream"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  BUTTER_ALWAYS(DEBUG, \"Programming error: attempt to get debug log in release build\");
  return *debug_os_;
}
"
	
	
	
	
      end

      operation 367024 "trace"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "level" type class_ref 131632 // log_level
	  param in name "msg" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      extra_member 197040 "MODIFY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 367408 "debug_log"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "fname" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Add an additional file log for messages, mainly for debugging"
      end

      operation 367280 "set_level"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "lvl" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  level_ = (0 >= ${p0} ? warn : (2 <= ${p0} ? debug : info ));
}
"
	
	
	
	
	comment "Set minimum log level to forward"
      end

      operation 382128 "have_stream"
	const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return (nullptr != this->debug_file_);
}
"
	
	
	
	
	comment "Is it possible to use stream()?"
      end
    end

    class 206256 "text_template"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 297648 "label_xmlname"
	class_operation public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} label(\"label\"); return label; 
}
"
	
	
	
	
      end

      operation 297904 "optional_xmlname"
	class_operation public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} label(\"option\"); return label;
}
"
	
	
	
	
      end

      operation 297776 "replacement_xmlname"
	class_operation constvalue public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} label(\"replace\"); return label;
}
"
	
	
	
	
      end

      operation 297520 "text_template_xmlname"
	class_operation public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} label(\"template\"); return label; 
}
"
	
	
	
	
      end

      class 206896 "map_type"
	visibility package stereotype "typedef" explicit_base_type "unistr"
	cpp_decl "${comment}typedef QMap< ${type}, ${type} > ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	mysql_decl ""
	
      end

      class 206768 "entry_type"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl "${comment}${visibility}final class ${name} {
${items}}
"
	python_2_2 python_decl "class ${name}:
${docstring}${members}
"
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 179888 "TEXT"
	  public type class_ref 206768 // entry_type
	  init_value "0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Plain text inserted as-is when instantiated"
	end

	attribute 180016 "REPLACEMENT"
	  public type class_ref 206768 // entry_type
	  init_value "1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "A label to search for in a property dictionary."
	end

	attribute 180400 "PHRASE"
	  public type class_ref 206768 // entry_type
	  init_value "2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Indicate the beginning/end of an optional section. (Any text is used to match the corresponding end.)

A phrase is omitted if none of the replacement texts inside the phrase have a match."
	end
      end

      class 206384 "template_entry"
	visibility protected stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}struct ${name} {
${members}};
"
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 180144 "type_"
	  public type class_ref 206768 // entry_type
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The type of entry"
	end

	attribute 180272 "content_"
	  public explicit_type "unistr"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Any textual/label content"
	end
      end

      class 213424 "const_iterator"
	visibility package stereotype "typedef" base_type class_ref 206384 // template_entry
	cpp_decl "${comment}typedef QVector< ${type} >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	mysql_decl ""
	
      end

      classrelation 194992 // sequence_ (<directional composition>)
	relation 194608 *-->
	  stereotype "qvector"
	  a role_name "sequence_" multiplicity "*" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 194992 // sequence_ (<directional composition>)
	  b parent class_ref 206384 // template_entry
      end

      extra_member 162864 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 293808 "text_template"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: sequence_() {}
"
	
	
	
	
      end

      operation 293936 "~text_template"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end

      operation 294064 "text_template"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 206256 // text_template
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: sequence_(${p0}.sequence_) {}
"
	
	
	
	
      end

      operation 324656 "text_template"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 206256 // text_template
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: sequence_(std::move(${p0}.sequence_)) {}
"
	
	
	
	
      end

      operation 324528 "swap"
	stereotype "copy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 206256 // text_template
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  std::swap(sequence_, ${p0}.sequence_);
}
"
	
	
	
	
      end

      operation 294192 "operator="
	public return_type class_ref 206256 // text_template
	nparams 1
	  param in name "source" type class_ref 206256 // text_template
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(${p0}); return *this; 
}
"
	
	
	
	
      end

      extra_member 162992 "SERIALIZATION"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 287152 "read"
	public explicit_return_type "void"
	nparams 1
	  param inout name "xml" explicit_type "QXmlStreamReader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Deserialize template from XML document."
      end

      extra_member 163120 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 294448 "begin"
	const public return_type class_ref 213424 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return this->sequence_.${name}();
}
"
	
	
	
	
      end

      operation 294832 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return this->sequence_.${name}();
}
"
	
	
	
	
      end

      operation 294576 "end"
	const public return_type class_ref 213424 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return this->sequence_.${name}();
}
"
	
	
	
	
      end

      operation 287280 "instantiate"
	const public explicit_return_type "unistr"
	nparams 1
	  param in name "properties" type class_ref 206896 // map_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Instantiate the template from the data in the given dictionary."
      end

      operation 294704 "size"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return this->sequence_.${name}();
}
"
	
	
	
	
      end

      extra_member 163376 "MODIFY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 296112 "push_back"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" type class_ref 206384 // template_entry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  this->sequence_.${name}(v);
}
"
	
	
	
	
      end
    end

    class 233264 "butter_application"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      extra_member 210352 "DEFAULT STYLE"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 358960 "default_style_value"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} text{ \"make\" };
  return text;
}
"
	
	
	
	
	comment "The name of the default style (make) if not style property found
"
      end

      operation 359472 "default_style_path_value"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} text{ \"style_template.xml\" };
  return text;
}
"
	
	
	
	
	comment "The default location of the XML file containing style definitions"
      end

      extra_member 210480 "TEMPLATES"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 412464 "descendent_link_tmpl"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} text{ \"descendent-link\" };
  return text;
}
"
	
	
	
	
	comment "The default location of the XML file containing style definitions"
      end

      operation 411568 "extern_preamble_tmpl"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} text{ \"extern-preamble\" };
  return text;
}
"
	
	
	
	
	comment "The default location of the XML file containing style definitions"
      end

      operation 411696 "extern_library_tmpl"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} text{ \"extern-library\" };
  return text;
}
"
	
	
	
	
	comment "The default location of the XML file containing style definitions"
      end

      operation 411440 "include_buildfile_tmpl"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} text{ \"include-buildfile\" };
  return text;
}
"
	
	
	
	
	comment "The default location of the XML file containing style definitions"
      end

      operation 411952 "object_tmpl"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} text{ \"object\" };
  return text;
}
"
	
	
	
	
	comment "The default location of the XML file containing style definitions"
      end

      operation 412080 "obect_other_tmpl"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} text{ \"object-other\" };
  return text;
}
"
	
	
	
	
	comment "The default location of the XML file containing style definitions"
      end

      operation 432688 "preamble"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} text{ \"preamble\" };
  return text;
}
"
	
	
	
	
	comment "The default location of the XML file containing style definitions"
      end

      operation 432560 "preamble_root"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} text{ \"preamble-root\" };
  return text;
}
"
	
	
	
	
	comment "The default location of the XML file containing style definitions"
      end

      operation 412208 "target_tmpl"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} text{ \"target\" };
  return text;
}
"
	
	
	
	
	comment "The default location of the XML file containing style definitions"
      end

      operation 411824 "target_start_tmpl"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} text{ \"target-start\" };
  return text;
}
"
	
	
	
	
	comment "The default location of the XML file containing style definitions"
      end

      operation 412336 "target_install_tmpl"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  static ${type} text{ \"target\" };
  return text;
}
"
	
	
	
	
	comment "The default location of the XML file containing style definitions"
      end

      classrelation 241072 // <generalisation>
	relation 240688 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 241072 // <generalisation>
	  b parent class_ref 259376 // QApplication
      end

      attribute 200240 "interaction_"
	private explicit_type "int"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "What to do when user-interaction is needed (eg. when doing test scripting)

0 - (default) ask user
1 - assume always \"yes\"/\"okay\"
2 - assume always \"no\"/\"cancel\""
      end

      attribute 200112 "port_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The communication port to use with bouml"
      end

      attribute 193584 "root_"
	private type class_ref 138416 // location_set
	multiplicity "0..1"
	stereotype "unique_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 200368 "style_"
	private type class_ref 220080 // build_style
	multiplicity "0..1"
	stereotype "unique_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 337968 "parse_project"
	public explicit_return_type "void"
	nparams 2
	  param inout name "a_item" type class_ref 8833 // UmlItem
	  param inout name "log" type class_ref 179120 // base_log
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 344624 "main"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Standard run sequence"
      end

      operation 374960 "butter_application"
	public explicit_return_type ""
	nparams 2
	  param in name "argc" explicit_type "int"
	  param in name "argv" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ** ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ** ${p1}${)}${volatile}${throw}
: QApplication(${p0}, ${p1})
, interaction_(0)
, port_(0)
, root_()
, style_(new build_style{}) {
  ${body}}
"
	
	
	
	
	comment "Parses any command line arguments to set port and interaction"
      end

      operation 375088 "~butter_application"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end

      operation 375216 "butter_application"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 233264 // butter_application
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	
	
      end

      operation 375344 "operator="
	private return_type class_ref 233264 // butter_application
	nparams 1
	  param in name "source" type class_ref 233264 // butter_application
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	
	
      end

      operation 388656 "create_system"
	public explicit_return_type "void"
	nparams 1
	  param inout name "log" type class_ref 179120 // base_log
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Create the build system from the style and location set."
      end

      operation 445744 "generate_target"
	private explicit_return_type "void"
	nparams 4
	  param inout name "target" type class_ref 8193 // UmlArtifact
	  param inout name "build_file" type class_ref 8193 // UmlArtifact
	  param inout name "targetbook" type class_ref 220208 // map_type
	  param inout name "log" type class_ref 179120 // base_log
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 445872 "generate_external_target"
	private explicit_return_type "void"
	nparams 4
	  param in name "target" type class_ref 8193 // UmlArtifact
	  param inout name "build_file" type class_ref 8193 // UmlArtifact
	  param inout name "targetbook" type class_ref 220208 // map_type
	  param inout name "log" type class_ref 179120 // base_log
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end
  end

  deploymentview 128065 "butter"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    deploymentdiagram 128432 "butter"
      deploymentdiagramsettings
       end
      size A4
    end

    artifact 130480 "butter.lib"
      stereotype "executable"
      associated_artifacts
	artifact_ref 128432 // constants
	artifact_ref 128816 // compound_document
	artifact_ref 129456 // location
	artifact_ref 129840 // utility
	artifact_ref 182704 // text_template
	artifact_ref 189488 // build_style
      end
      ncouples 10
      key "genpro pro" value "/tmp/butter2/test/butter.lib.pro"
      key "genpro path" value "/tmp/finnerty/butter2/butter/"
      key "genpro target" value "/tmp/butter2/test/butter.a"
      key "genpro tmplt" value "lib"
      key "genpro config" value "debug warn_on qt staticlib"
      key "genpro defines" value "WITHCPP"
      key "genpro includepath" value ""
      key "genpro dependpath" value ""
      key "genpro objectsdir" value "build"
      key "genpro footer" value "QT += qt3support"
      simplerelation 134576
	-_->
	  on artifact_ref 130096 // config
      end
    end

    artifact 189488 "build_style"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
#include <qmap.h>
${declarations}
class QXmlStreamReader;
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
#include \"config.h\"
#include \"constants.h\"

#include <qdatetime.h>
#include <qdir.h>
#include <qfile.h>
#include <qtextstream.h>
#include <qvector.h>
#include <QXmlStreamReader>

${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 220080 // build_style
      end
    end

    artifact 128816 "compound_document"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
// manual includes
#include \"config.h\"
// end
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 129840 // compound_document
      end
    end

    artifact 130096 "config"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_CONFIG_H
#define @{PROJECT}_CONFIG_H 1
#include <string>
#include <stdexcept>

#ifdef NO_DBC
#define NO_DBC 1
#else
#define NO_DBC 0
#endif

inline void @{PROJECT}_ALWAYS(bool X, std::string Y)
{
   if (! X) throw std::runtime_error(Y);
}

inline void @{PROJECT}_REQUIRE(bool X, std::string Y)
{
   @{PROJECT}_ALWAYS(X,Y);
}

inline void @{PROJECT}_CHECK(bool X, std::string Y)
{
   if (! NO_DBC) @{PROJECT}_ALWAYS(X,Y);
}

inline void @{PROJECT}_ENSURE(bool X, std::string Y)
{
   if (! NO_DBC) @{PROJECT}_ALWAYS(X,Y);
}

#undef NO_DBC

#endif
"
      associated_elems
      end
    end

    artifact 128432 "constants"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
#include <qtextstream.h>
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 129328 // constants
      end
    end

    artifact 129456 "location"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}

// manual includes
#include \"config.h\"
#include <qdir.h>

#ifndef DEBUG
#define DEBUG 0
#endif

${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 128560 // location
	class_ref 138416 // location_set
      end
    end

    artifact 209456 "location_state"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}

#include \"config.h\"

#include \"anItemKind.h\"
#include \"UmlDeploymentView.h\"

${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 172592 // location_state
      end
    end

    artifact 182704 "text_template"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
#include <qmap.h>
${declarations}
class QXmlStreamReader;
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
#include \"config.h\"
#include \"constants.h\"
#include <qvector.h>
#include <qtextstream.h>
#include <QXmlStreamReader>
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 206256 // text_template
      end
    end

    artifact 129840 "utility"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}

#include <config.h>
#include <iostream>

${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 128432 // enumerate_path
      end
    end

    artifact 196144 "README.txt"
      stereotype "document"
      associated_artifacts
      end
      comment "# Butter

A program to go with jam and bouml.  This plug-out 
can create a build system that can build and install
targets defined in UML in bouml.  You can choose from
Makefile, CMake, Boost Jam and plain Jam.


## How it works.

* Check for and add standard build system files
* Search for targets and determine if they are internal or external
* Write external targets to the top-level build file
* Organize internal targets into filesystem folders
* For each target or subdirectory add an entry in its folder's build file

* Build system files and entries are created from text templates.
* Properties to insert into the templates are determined from bouml

## TODO

* Walk UMLPackage tree to build location set
  (see previous version)
* Walk location set from root down, processing targets when found
  (see previous version)
* Define templates for Makefiles
  (see previous version)
* Define templates for CMake
* Define templates for Boost Jam
* Define templates for Jam
"
    end

    artifact 202800 "base_log"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      associated_elems
	class_ref 179120 // base_log
      end
    end

    artifact 209328 "mymain"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

${includes}
#include \"config.h\"
#include \"constants.h\"
#include \"location_state.h\"
#include \"log.h\"
#include \"text_template.h\"
#include \"CppSettings.h\"
#include \"UmlArtifact.h\"
#include \"UmlCom.h\"
#include \"UmlPackage.h\"

#include <qmessagebox.h>
#include <qstack.h>

#include <iostream>
#ifndef DEBUG
#define DEBUG 1
#endif

${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 233264 // butter_application
      end
    end

    artifact 215984 "log"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
class QFile;
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}

#include \"config.h\"
#include \"UmlCom.h\"

#include <qfile.h>

${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 252848 // log
      end
    end
  end

  package_ref 141488 // Build system templates
end
