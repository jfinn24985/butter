format 224
"finnerty" // finnerty
  revision 8
  modified_by 48 "finnerty"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_namespace "butter"
  classview 128048 "finnerty"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 128048 "base_generator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The build generator derived classes are responsible for creating a set of build system artifacts
in a particular style.  These are inserted into the Uml Project where another class is 
responsible for writing them to the file-system.

The main action takes place in the create_system method.  The generator template class contains
a definitive implementation of this method that attempts to uniformly support all features of the
program, while calling derived class methods to implement the features for each style. The
Curiously Recurring Template Idiom is used to avoid virtual methods calls for the style specific 
functions.

Actions
* traverses a location tree examining packages
* creates a build-file artifact for all locations with targets
* links all the build-file artifacts together to form a build-system
"
      class 128176 "install_type"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 128048 "bin"
	  public type class_ref 128176 // install_type
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 128176 "file"
	  public type class_ref 128176 // install_type
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 128304 "lib"
	  public type class_ref 128176 // install_type
	  init_value " 2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 128432 "man"
	  public type class_ref 128176 // install_type
	  init_value " 3//File is a man page

    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 128304 "target_type"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 128560 "executable"
	  public type class_ref 128304 // target_type
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 128688 "static_library"
	  public type class_ref 128304 // target_type
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 128816 "shared_library"
	  public type class_ref 128304 // target_type
	  init_value " 2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 128944 "other"
	  public type class_ref 128304 // target_type
	  init_value " 3//Target is an \"other\" library type.

    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      attribute 129072 "individual_obj_"
	protected explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Extra description for objects individually built from source
"
      end

      attribute 129200 "other_target_type_"
	protected explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An \"other\" target library type name.  This is the name that is used for the
label/converted for the build rule.  See individual styles to see how this
is used and what requirements there are for supporting it in each style.
"
      end

      classrelation 128048 // root_dir_ (<directional composition>)
	relation 128048 *-->
	  stereotype "std::unique_ptr"
	  a role_name "root_dir_" private
	    comment "The root directory of the project.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 128048 // root_dir_ (<directional composition>)
	  b parent class_ref 128432 // enumerate_path
      end

      attribute 129328 "target_NAME_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The version of the current target name to use with variables.
"
      end

      operation 128048 "create_system"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "a_base" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "DRIVER METHOD

Create a series of build-system artifacts based at a_base location. The
artifacts are inserted into a package at each location."
      end

      operation 128176 "find_hdr_link"
	class_operation protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Parse a_artifact's properties and description (iff a_not_doc) looking for 
include directories  and linker options. Append what is found to a_hdr, 
a_link and a_flag."
      end

      attribute 129456 "a_hdr"
	protected explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 128304 "get_artifact"
	class_operation preserve_cpp_body_indent protected explicit_return_type "std::unique_ptr< compound_artifact >"
	nparams 2
	  param inout name "a_loc" type class_ref 128560 // location
	  param in name "a_name" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Find an artifact with a_name in a_loc. If not found then create and
initialise the document.

!!Warning!! returns nul iff a_loc.packages.empty"
      end

      operation 128432 "merge_string_list"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param inout name "a_list" explicit_type "unistr"
	  param in name "a_addition" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "The effect of this method is to convert the contents of a_list and a_addition
into lists of tokens.  These lists are merged, removing duplicate items, and
the new list is assigned back to a_list. Either list may be empty."
      end

      operation 128560 "section"
	class_operation preserve_cpp_body_indent public explicit_return_type "unistr"
	nparams 2
	  param in name "a_section" explicit_type "unistr"
	  param in name "a_desc" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "This method finds the substring in a_desc between \"${\"a_section\"}\"
and the next \"${\".  If no \"${\" is found then nothing is returned. Used
to get style specific data from target artifact description fields."
      end

      operation 128688 "root_dir"
	const constvalue cpp_inline public return_type class_ref 128432 // enumerate_path
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
      return *root_dir_.get ();
    };"
	
	
	
	
	comment "Get the projects root directory (if set)"
      end

      operation 128816 "root_dir"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "a_path" type class_ref 128432 // enumerate_path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Set the project's root directory"
      end

      operation 128944 "target_NAME"
	const constvalue cpp_inline public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
      return target_NAME_;
    };"
	
	
	
	
	comment "Version of target name for variables (generally
all uppercase version of target.)"
      end

      operation 129072 "target_NAME"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "pack" explicit_type "unistr"
	  param in name "target" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${abstract} {
      target_NAME_ = this->build_target_NAME( pack, target );
    };"
	
	
	
	
	comment "Set the version of target name to value created by to_target_NAME"
      end

      operation 129200 "build_target_NAME"
	class_operation preserve_cpp_body_indent public explicit_return_type "unistr"
	nparams 2
	  param in name "package_name" explicit_type "unistr"
	  param in name "target_name" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 129328 "base_generator"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${)}${volatile}${abstract};"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}${)} 
:  individual_obj_()
, other_target_type_()
, root_dir_( new pathcmp() )
, target_NAME_()
{
${body}}
"
	
	
	
	
      end

      operation 129456 "~base_generator"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${abstract};"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
      end

      operation 129584 "quote_string"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 1
	  param in name "phrase" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Add necessary quoting to an input string.

 A user of the system may want to set a preprocessor 
 flag of [-DSOMETEXT=\"Help Text.\"] as a property value
 with the same text. The generators must be able to 
 quote/escape this text so that it is correctly passed
 to the final command."
      end
    end

    class 128688 "basic_style"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "POD type for storing basic information about compound_document elements"
      class 128816 "write_factory_fn_t"
	visibility package stereotype "typedef" base_type class_ref 128048 // base_generator
	cpp_decl "${comment}typedef std::unique_ptr<${type}>(* ${name})();
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 128176 // <dependency>
	  relation 128176 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 128176 // <dependency>
	    b parent class_ref 128048 // base_generator
	end
      end

      attribute 129584 "comment_string_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "beginning of comment string
"
      end

      attribute 129712 "end_comment_string_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "ending of comment string
"
      end

      attribute 129840 "end_phrase_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A string indicating the end of a labelled part.

The actual end-phrase will be
end_phrase_ () end_end_phrase_ or \"end_phrase_ () {label} end_end_phrase_\" where label is
the name of the part. Note the \"{\" \"}\" are part of phrase.
"
      end

      attribute 129968 "end_end_phrase_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A string denoting the end-of-line for  the ending point of a part.
"
      end

      attribute 130096 "start_phrase_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A string denoting the starting point of a part.

The actual start-phrase will be
\"start_phrase_ {label} end_start_phrase_\" where label is the name of the part.
Note the \"{\" \"}\" are part of phrase.
"
      end

      attribute 130224 "end_start_phrase_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A string denoting the end-of-line for  the starting point of a part.
"
      end

      attribute 130352 "name_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The name of the current style.
"
      end

      classrelation 128304 // factory_ (<directional composition>)
	relation 128304 *-->
	  a role_name "factory_" private
	    comment "Method to create base_generator object for this style.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128304 // factory_ (<directional composition>)
	  b parent class_ref 128816 // write_factory_fn_t
      end

      operation 129712 "basic_style"
	cpp_deleted private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${abstract};"
	
	
	
	
      end

      operation 129840 "basic_style"
	cpp_inline public explicit_return_type ""
	nparams 8
	  param in name "a_com_start" explicit_type "unistr"
	  param in name "a_com_end" explicit_type "unistr"
	  param in name "a_end_phr" explicit_type "unistr"
	  param in name "a_end_end" explicit_type "unistr"
	  param in name "a_start_phr" explicit_type "unistr"
	  param in name "a_start_end" explicit_type "unistr"
	  param in name "a_name" explicit_type "unistr"
	  param in name "a_factory" type class_ref 128816 // write_factory_fn_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, const ${t7} & ${p7}${v7}${)}${volatile}${abstract} : comment_string_(a_com_start)
    , end_comment_string_(a_com_end)
    , end_phrase_(a_end_phr)
    , end_end_phrase_(a_end_end)
    , start_phrase_(a_start_phr)
    , end_start_phrase_(a_start_end)
    , name_(a_name)
    , factory_(a_factory)
    {};"
	
	
	
	
      end

      operation 129968 "basic_style"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 128688 // basic_style
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
      end

      operation 130096 "basic_style"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 128688 // basic_style
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
      end

      operation 130224 "~basic_style"
	cpp_virtual cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${abstract};"
	
	
	
	
      end

      operation 130352 "operator ="
	cpp_deleted private return_type class_ref 128688 // basic_style
	nparams 1
	  param in name "source" type class_ref 128688 // basic_style
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	
	
	
	
      end

      operation 130480 "comment_string"
	const constvalue cpp_inline public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
      return this->comment_string_;
    };"
	
	
	
	
      end

      operation 130608 "end_comment_string"
	const constvalue cpp_inline public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
      return this->end_comment_string_;
    };"
	
	
	
	
      end

      operation 130736 "end_phrase"
	const constvalue cpp_inline public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
      return this->end_phrase_;
    };"
	
	
	
	
      end

      operation 130864 "end_end_phrase"
	const constvalue cpp_inline public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
      return this->end_end_phrase_;
    };"
	
	
	
	
      end

      operation 130992 "end_start_phrase"
	const constvalue cpp_inline public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
      return this->end_start_phrase_;
    };"
	
	
	
	
      end

      operation 131120 "name"
	const constvalue cpp_inline public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
      return this->name_;
    };"
	
	
	
	
      end

      operation 131248 "start_phrase"
	const constvalue cpp_inline public explicit_return_type "unistr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
      return this->start_phrase_;
    };"
	
	
	
	
      end

      operation 131376 "comment_text"
	preserve_cpp_body_indent const public explicit_return_type "unistr"
	nparams 1
	  param in name "a_text" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Transcribe the given text into a comment in the current
build system.  In general this prepends comment indicators
to each line of a_text and adds a terminal newline if
a_text does not end in a newline."
      end

      operation 131504 "create_writer"
	preserve_cpp_body_indent const public explicit_return_type "std::unique_ptr< base_generator >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Create a build generator appropriate for the current style."
      end
    end

    class 128944 "bjam_generator"
      visibility package 
      nactuals 1
      actual class class_ref 129072 // generator
        rank 0 value class_ref 128944 // bjam_generator
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Build file generator for boost-jam.

This is the build system of choice for C++-only projects that use
the Boost library."
      classrelation 128432 // <realization>
	relation 128432 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 128432 // <realization>
	  b parent class_ref 129072 // generator
      end

      classrelation 128560 // <dependency>
	relation 128560 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 128560 // <dependency>
	  b parent class_ref 129072 // generator
      end

      classrelation 128688 // style (<directional composition>)
	relation 128688 *-->
	  a role_name "style" init_value "( \"#\", \"\", \"##END:\", \"\", \"##START:\", \"\", \"boost\", &butter::bjam_generator::create )" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128688 // style (<directional composition>)
	  b parent class_ref 128688 // basic_style
      end

      attribute 130480 "build_file_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"Jamfile\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The default leaf filename for the current style
"
      end

      attribute 130608 "build_file_sysname"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"Jamroot\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The default leaf filename for the current style
"
      end

      attribute 130736 "rules_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"local.jam\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The name of the project rules file.
"
      end

      attribute 130864 "default_rules"
	class_attribute const_attribute public explicit_type "sbyte"
	multiplicity "[]"
	init_value " { \"#\\n\"
, \"# local.jam\\n\"
, \"#\\n\"
, \"# Set constants for installation paths\\n\"
, \"import path ;\\n\"
, \"path-constant INSTALL_PREFIX : installdir ;\\n\"
, \"constant BINDIR : bin ; # User programs\\n\"
, \"constant DATADIR : share ; # Private libraries and static data\\n\"
, \"constant DOCDIR : [ path.join share doc ] ;\\n\"
, \"constant HTMLDIR : [ path.join share html ] ;\\n\"
, \"constant INCDIR : include ;\\n\"
, \"constant LIBDIR : lib ; # Shared libraries\\n\"
, \"constant MANDIR  : [ path.join share man1 ] ;\\n\"
, \"\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This is the default contents of a the rules file (local.jam) If a 
document artifact with name 'local.jam' is not present when 
butter is executed with \\@style='boost' then one will be created
using this string.
"
      end

      attribute 130992 "is_other_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Is this an alternate/other library target?
"
      end

      attribute 131120 "project_name_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This name of the project
"
      end

      operation 131632 "bjam_generator"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${abstract} : is_other_ ()
    , project_name_ ()
    {};"
	
	
	
	
      end

      operation 131760 "~bjam_generator"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${abstract} {};"
	
	
	
	
      end

      operation 131888 "bjam_generator"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 128944 // bjam_generator
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
	comment "no copy"
      end

      operation 132016 "bjam_generator"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 128944 // bjam_generator
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
	comment "no copy"
      end

      operation 132144 "operator ="
	private return_type class_ref 128944 // bjam_generator
	nparams 1
	  param in name "" type class_ref 128944 // bjam_generator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	
	
	
	
	comment "no assign"
      end

      operation 132272 "create"
	class_operation preserve_cpp_body_indent public explicit_return_type "std::unique_ptr< base_generator >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Create bjam generator object.s"
      end

      operation 132400 "assoc_library"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "This method scans a_target for its direct sources and
direct and indirect dependencies. "
      end

      attribute 131248 "a_os"
	private explicit_type "QTextOStream"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 132528 "assoc_source"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "This method scans a_target for its direct sources and
direct and indirect dependencies. "
      end

      operation 132656 "descendent_link"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 3
	  param inout name "a_art" type class_ref 129200 // compound_artifact
	  param inout name "a_sys" type class_ref 129200 // compound_artifact
	  param in name "a_loc" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Write the Jamfile descent links for a_location."
      end

      operation 132784 "end_target"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "This method scans a_target for its direct sources and
direct and indirect dependencies. "
      end

      operation 132912 "external_target"
	private explicit_return_type "void"
	nparams 1
	  param in name "a_current" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Write the external a_target at a_location. 

* searches system_artifact_ for an existing target
* new target sections are add to system_artifact_"
      end

      operation 133040 "initialise"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_base" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Write extra details to the top-level build file.
"
      end

      operation 133168 "install_target"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Create an install target."
      end

      operation 133296 "start_target"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "This method scans a_target for its direct sources and
direct and indirect dependencies. "
      end
    end

    class 129072 "generator"
      visibility package 
      nformals 1
      formal name "derived" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " --
Writer class for recursive template idiom.  This contains the implementation for
the create_system () factory_ method. Derived class writers can use this class to handle
the boiler-plate process of traversing the location and artifact sets - they implement
descendent_link, external_target, initialise and local_target."
      classrelation 131248 // <generalisation>
	relation 131248 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 131248 // <generalisation>
	  b parent class_ref 128048 // base_generator
      end

      operation 144176 "create_system"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_base" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "DRIVER METHOD

Create a series of build-system artifacts based at a_base location. The
artifacts are inserted into a package at each location."
      end

      operation 144304 "rules_file"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_base" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Create the initial rules set."
      end
    end

    class 129200 "compound_artifact"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An artifact that is made up of multiple-parts. It exposes an ordered list of 
pair< string, string > that represent the parts of the artifact. These can
be unlabelled or labelled depending on the content of the first entry in the
pair.

* labelled parts are enclosed in \"start_phrase_\"/\"end_phrase_\" markers.
* unlabelled parts are any non-whitespace outside part markers.

Standard build-file form is a compound_artifact with something like
[version] version information
[date] date
[preamble] ...
[target:....] ...
[close] ...

* destructor writes parts to artifact."
      class 129584 "string_pair_t"
	visibility package stereotype "typedef" explicit_base_type "std::pair< unistr, unistr >"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      class 129712 "value_type"
	visibility package stereotype "typedef" base_type class_ref 129584 // string_pair_t
	cpp_decl "${comment}typedef std::pair<unistr,${type}> ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 129328 // <dependency>
	  relation 129328 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 129328 // <dependency>
	    b parent class_ref 129584 // string_pair_t
	end
      end

      classrelation 129456 // doc_ (<directional composition>)
	relation 129456 *-->
	  stereotype "std::unique_ptr"
	  a role_name "doc_" private
	    comment "The representation of the description as a compound document.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 129456 // doc_ (<directional composition>)
	  b parent class_ref 129840 // compound_document
      end

      classrelation 129584 // style_ (<unidirectional association>)
	relation 129584 --->
	  a role_name "style_" const_relation private
	    comment "reference to style object
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 129584 // style_ (<unidirectional association>)
	  b parent class_ref 128688 // basic_style
      end

      operation 135344 "compound_artifact"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
	comment "Construct and initialise object from a_art"
      end

      operation 135472 "compound_artifact"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
	comment "Construct and initialise object from a_art"
      end

      operation 135600 "~compound_artifact"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${abstract};"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
      end

      operation 135728 "compound_artifact"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 129200 // compound_artifact
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
	comment "no copy"
      end

      operation 135856 "compound_artifact"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 129200 // compound_artifact
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
	comment "no copy"
      end

      operation 135984 "operator ="
	cpp_deleted private return_type class_ref 129200 // compound_artifact
	nparams 1
	  param in name "source" type class_ref 129200 // compound_artifact
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	
	
	
	
	comment "no assign"
      end

      operation 136112 "merge"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Merges the content of a_art into this artifact.

Merge process:
* Create temporary compound_artifact from a_art.
* If any labelled sections exist in both artifacts then the content 
from a_art is appended. If an unlabelled section exists before the
labelled section then is is appended to any preceding unlabelled
section or inserted if no existing labelled section exists.
* If any sections remain then they are appended inorder to this 
artifact. "
      end

      operation 136240 "document"
	preserve_cpp_body_indent public return_type class_ref 129840 // compound_document
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Access the artifact's description as a compound document."
      end
    end

    class 129456 "cmake_generator"
      visibility package 
      nactuals 1
      actual class class_ref 129072 // generator
        rank 0 value class_ref 129456 // cmake_generator
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Build file generator for cmake

Assumes external library xxx will set variables:
XXX_INCLUDE_DIRS
XXX_COMPILE_FLAGS
XXX_LINK_LIBRARIES

TODO:
need to root relative files with CMAKE_SOURCE_DIR
need to convert $(..) to ${..}
need to convert $(OUTPUTDIR) to CMAKE_BINARY_DIR

Additionally external library xxx without a local buildfile can be
found using:
find_package(Xxx)

\\cond xdoc
The CMake style does not recognised round brackets, \"(\" and \")\", as
variable delimiters.  The style generator will replace thes with \"{\" and \"}\"
in the generated files.

CMake automatically prepends \"lib\" to library targets on some platforms.
This plugout turns off this automatic behaviour for library targets.
\\endcond xdoc"
      classrelation 128816 // <realization>
	relation 128816 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 128816 // <realization>
	  b parent class_ref 129072 // generator
      end

      classrelation 128944 // <dependency>
	relation 128944 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 128944 // <dependency>
	  b parent class_ref 129072 // generator
      end

      classrelation 129072 // style (<directional composition>)
	relation 129072 *-->
	  a role_name "style" init_value "( \"#\", \"\", \"##END:\", \"\", \"##START:\", \"\", \"cmake\", &butter::cmake_generator::create )" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129072 // style (<directional composition>)
	  b parent class_ref 128688 // basic_style
      end

      attribute 136240 "build_file_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"CMakeLists.txt\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The default leaf filename for the current style
"
      end

      attribute 136368 "build_file_sysname"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(cmake_generator::build_file_name)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The default leaf filename for the current style
"
      end

      attribute 136496 "cmake_minimum_required_"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"cmake_minimum_required(VERSION 2.6)\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identify the minimum cmake version this generator supports.
"
      end

      attribute 136624 "default_rules"
	class_attribute const_attribute public explicit_type "sbyte"
	multiplicity "[]"
	init_value " { \"#\\n\"
, \"# local.cmake\\n\"
, \"#\\n\"
, \"set_directory_properties(PROPERTIES COMPILE_DEFINITIONS_DEBUG DEBUG=1)\\n\"
, \"set_directory_properties(PROPERTIES COMPILE_DEFINITIONS DEBUG=0)\\n\"
, \"#############################\\n\"
, \"##  Default install locations\\n\"
, \"#############################\\n\"
, \"set (CMAKE_INSTALL_PREFIX installdir)\\n\"
, \"set (BINDIR bin)\\n\"
, \"set (DATADIR share)\\n\"
, \"set (DOCDIR share/doc)\\n\"
, \"set (HTMLDIR share/html)\\n\"
, \"set (INCLUDEDIR include)\\n\"
, \"set (LIBDIR lib)\\n\"
, \"set (MANDIR share/man)\\n\"
, \"\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This is the default contents of a the rules file (M_sys.mak) If a 
document artifact with name 'M_sys.mak' is not present when 
butter is executed with \\@style='cmake' then one will be created
using this string.
"
      end

      attribute 136752 "rules_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"local.cmake\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The name of the rules file.
"
      end

      attribute 136880 "lib_set_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set of included libraries
"
      end

      attribute 137008 "project_name_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The top-level package name
"
      end

      attribute 137136 "depend_set_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 137264 "is_static_type_"
	private explicit_type "bool"
	init_value "=  false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "When type is library, is this a static library?
"
      end

      attribute 137392 "language_set_"
	private explicit_type "QStringList"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "List of languages to include (excluding C++)
"
      end

      classrelation 129200 // sys_buildfile_ (<unidirectional association>)
	relation 129200 --->
	  a role_name "sys_buildfile_" init_value "=  NULL" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	    classrelation_ref 129200 // sys_buildfile_ (<unidirectional association>)
	  b parent class_ref 129200 // compound_artifact
      end

      operation 133424 "cmake_generator"
	preserve_cpp_body_indent private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${abstract};"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}${)}
: lib_set_()
, project_name_()
, depend_set_()
, is_static_type_(false)
, language_set_()
, sys_buildfile_()
{
${body}}
"
	
	
	
	
	comment "Create a generator from the top-level a_project

\\pre a_project.parent = nul"
      end

      operation 133552 "cmake_generator"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 129456 // cmake_generator
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
	comment "no copy"
      end

      operation 133680 "cmake_generator"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 129456 // cmake_generator
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
	comment "no copy"
      end

      operation 133808 "operator ="
	cpp_deleted private return_type class_ref 129456 // cmake_generator
	nparams 1
	  param in name "" type class_ref 129456 // cmake_generator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	
	
	
	
	comment "no assign"
      end

      operation 133936 "~cmake_generator"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${abstract} {};"
	
	
	
	
      end

      operation 134064 "create"
	class_operation preserve_cpp_body_indent public explicit_return_type "std::unique_ptr< base_generator >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Create bjam generator object.s"
      end

      operation 134192 "assoc_library"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** This method a library association to the current target entry for a_target.

Responsibilites
- Properties
 - associated includes, ldflags, cflags"
      end

      attribute 137520 "a_os"
	private explicit_type "QTextOStream"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 134320 "assoc_source"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** This method sets up object for creating a new target entry for a_target.

Responsibilites
- Properties
 - doc/source: includes, ldflags, cflags
 - compiler
- Other
 - set compilation for individual "
      end

      operation 134448 "descendent_link"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 3
	  param inout name "a_art" type class_ref 129200 // compound_artifact
	  param inout name "a_sys" type class_ref 129200 // compound_artifact
	  param in name "a_loc" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Write the Jamfile descent links for a_location to a_os"
      end

      operation 134576 "end_target"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** This method finalises the target entry for a_target.

NOTE: \"Other\" target requires WORKING_DIRECTORY to allow 
finding of source files. Alternatively, this could be
avoided by prepending ${CMAKE_CURRENT_SOURCE_DIR} to each 
source file. Currently WORKING_DIRECTORY is chosen as
it was felt that it is more obvious to the user and less
verbose."
      end

      operation 134704 "external_target"
	private explicit_return_type "void"
	nparams 1
	  param in name "a_current" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "In this style external targets are not used, external library 
data is written in local-targets directly where it is 
referenced."
      end

      operation 134832 "initialise"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_base" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Write extra details to the top-level build file. "
      end

      operation 134960 "install_target"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** Create an install target.

Responsibilites
- Properties
 - install (library, executable and document)"
      end

      operation 135088 "mangle"
	preserve_cpp_body_indent public explicit_return_type "unistr"
	nparams 1
	  param in name "input" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Convert input string into CMake allowed string.  This
means converting () to {} and OUTPUTDIR to 
CMAKE_BINARY_DIR"
      end

      operation 135216 "start_target"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** This method sets up object for creating a new target entry for a_target.

Responsibility
- Properties
 - compiler
 - include, ldflags, cflags
 - buildfile
 - type (library)
- Other
 - shared lib
 - static lib
 - executable
 - non-standard target"
      end
    end

    class 130096 "const_token_iterator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provide an iterator over the tokens in a string

This class will break a string into tokens on the given separator
character.  It will ignore separators that are in quotation marks
or escaped.  An error is thrown if the end of the string is reached
and no matching closing quote was found."
      classrelation 130352 // <generalisation>
	relation 130352 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 130352 // <generalisation>
	  b parent class_ref 130224 // typedef1
      end

      class 130352 "char_type"
	visibility package stereotype "typedef" explicit_base_type "char"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      class 130480 "string_type"
	visibility package stereotype "typedef" explicit_base_type "std::string"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      class 130608 "size_type"
	visibility package stereotype "typedef" explicit_base_type "std::string::size_type"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 142000 "const_token_iterator"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${abstract} : orig_()
    , tmp_()
    , s_(0)
    , e_(0)
    , esc_(0)
    , sep_(0)
    {};"
	
	
	
	
      end

      operation 142128 "const_token_iterator"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "orig" explicit_type "unistr"
	  param in name "sep" type class_ref 130352 // char_type
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${abstract} : orig_(orig.latin1())
, tmp_()
, s_(0)
, e_(0)
, esc_('\\\\')
, sep_(sep.latin1())
{ this->increment(); };"
	
	
	
	
      end

      operation 142256 "const_token_iterator"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "orig" type class_ref 130480 // string_type
	  param in name "sep" type class_ref 130352 // char_type
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${abstract} : orig_(orig)
    , tmp_()
    , s_(0)
    , e_(0)
    , esc_('\\\\')
    , sep_(sep)
    { this->increment(); };"
	
	
	
	
      end

      operation 142384 "const_token_iterator"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "orig" type class_ref 130096 // const_token_iterator
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract} : orig_(orig.orig_)
    , tmp_(orig.tmp_)
    , s_(orig.s_)
    , e_(orig.e_)
    , esc_(orig.esc_)
    , sep_(orig.sep_)
    {};"
	
	
	
	
      end

      operation 142512 "const_token_iterator"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "orig" type class_ref 130096 // const_token_iterator
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${abstract} : orig_( std::move( orig.orig_ ) )
    , tmp_( std::move( orig.tmp_ ) )
    , s_( std::move( orig.s_ ) )
    , e_( std::move( orig.e_ ) )
    , esc_( std::move( orig.esc_ ) )
    , sep_( std::move( orig.sep_ ) )
    {};"
	
	
	
	
      end

      operation 142640 "operator ="
	cpp_inline public return_type class_ref 130096 // const_token_iterator
	nparams 1
	  param in name "orig" type class_ref 130096 // const_token_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract} {
      this->swap( orig );
      return *this;
    };"
	
	
	
	
      end

      operation 142768 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "rhs" type class_ref 130096 // const_token_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${abstract} {
      std::swap(const_cast< string_type& >(this->orig_)
         		, const_cast< string_type& >(rhs.orig_));
      std::swap(this->tmp_, rhs.tmp_);
      std::swap(this->s_, rhs.s_);
      std::swap(this->e_, rhs.e_);
      std::swap(const_cast< char_type& >(this->esc_), const_cast< char_type& >(rhs.esc_));
      std::swap(const_cast< char_type& >(this->sep_), const_cast< char_type& >(rhs.sep_));
    };"
	
	
	
	
      end

      operation 142896 "operator ++"
	cpp_inline public return_type class_ref 130096 // const_token_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
      this->increment();
      return *this;
    };"
	
	
	
	
      end

      operation 143024 "operator ++"
	cpp_inline public return_type class_ref 130096 // const_token_iterator
	nparams 1
	  param in name "" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract} {
      const_token_iterator tmp(*this);
      this->increment();
      return tmp;
    };"
	
	
	
	
      end

      operation 143152 "operator =="
	friend cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 130096 // const_token_iterator
	  param in name "rhs" type class_ref 130096 // const_token_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${abstract} {
         return lhs.at_end ()
    		? rhs.at_end ()
    		: rhs.at_end ()
    			? false
    			: (lhs.s_ == rhs.s_) & (lhs.e_ == rhs.e_)
    				? lhs.orig_ == rhs.orig_
    				: false;
    };"
	
	
	
	
      end

      operation 143280 "operator !="
	friend cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 130096 // const_token_iterator
	  param in name "rhs" type class_ref 130096 // const_token_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${abstract} {
      return !(lhs == rhs);
    };"
	
	
	
	
      end

      operation 143408 "operator ->"
	const constvalue cpp_inline public return_type class_ref 130480 // string_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} * const ${name}${(}${)}${const}${volatile}${abstract} {
      return &(this->operator*());
    };"
	
	
	
	
      end

      operation 143536 "operator *"
	const constvalue cpp_inline public return_type class_ref 130480 // string_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract} {
      if (this->tmp_.empty ())
      {
        if (this->s_ != this->e_)
        {
          this->tmp_ = this->orig_.substr(this->s_, this->e_ - this->s_);
        }
      }
      return this->tmp_;
    };"
	
	
	
	
      end

      operation 143664 "at_end"
	const cpp_inline private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract} {
          return this->orig_.empty ()
                ? true
                : this->s_ >= this->orig_.size (); 
    };"
	
	
	
	
      end

      operation 143792 "increment"
	preserve_cpp_body_indent cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 143920 "is_quote"
	class_operation cpp_inline private explicit_return_type "bool"
	nparams 1
	  param in name "c" type class_ref 130352 // char_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${abstract} {
      return (c == '\\'') | (c == '\"') | (c == '`');
    };"
	
	
	
	
      end

      operation 144048 "reset"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract} {
      this->s_ = 0; this->e_ = 0;
    };"
	
	
	
	
	comment "Reset iterator to the beginning of the contained string"
      end

      classrelation 130480 // orig_ (<directional composition>)
	relation 130480 *-->
	  a role_name "orig_" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130480 // orig_ (<directional composition>)
	  b parent class_ref 130480 // string_type
      end

      classrelation 130608 // tmp_ (<directional composition>)
	relation 130608 *-->
	  a role_name "tmp_" private
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130608 // tmp_ (<directional composition>)
	  b parent class_ref 130480 // string_type
      end

      classrelation 130736 // s_ (<directional composition>)
	relation 130736 *-->
	  a role_name "s_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130736 // s_ (<directional composition>)
	  b parent class_ref 130608 // size_type
      end

      classrelation 130864 // e_ (<directional composition>)
	relation 130864 *-->
	  a role_name "e_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130864 // e_ (<directional composition>)
	  b parent class_ref 130608 // size_type
      end

      classrelation 130992 // esc_ (<directional composition>)
	relation 130992 *-->
	  a role_name "esc_" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130992 // esc_ (<directional composition>)
	  b parent class_ref 130352 // char_type
      end

      classrelation 131120 // sep_ (<directional composition>)
	relation 131120 *-->
	  a role_name "sep_" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 131120 // sep_ (<directional composition>)
	  b parent class_ref 130352 // char_type
      end
    end

    class 130224 "typedef1"
      visibility package stereotype "typedef" explicit_base_type "std::iterator< std::forward_iterator_tag, std::string >"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 130736 "gmake_generator"
      visibility package 
      nactuals 1
      actual class class_ref 129072 // generator
        rank 0 value class_ref 130736 // gmake_generator
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Build file generator for gnu make

Requires GNU make compatible make, for generic make use the CMake %style
\\ref cmake_generator .

\\cond xdoc
<xdoc:section part-of=\"limitation/make\" ><p>The <code>make</code> program
can not create target dependency graph between directories.  As all the other
styles do create such a graph, this plugout does not. This can require calling
make several times to get all targets to link correctly.</p>
<xdoc:subsection name=\"workaround\" ><p>The initially generated makefile will include targets and
subdirectories in the order they appear in the project.  Once created, the
order of target sections in the generated artifact is maintained so manually
reordering the target sections within a single artifact will change their compilation
order.</p></xdoc:subsection>
<xdoc:title>Limitations of the Make style build system</xdoc:title></xdoc:section>
<xdoc:section part-of=\"extension/build-environ/make\" >
<xdoc:title>Extending Make style to new compilers and operating
environments</xdoc:title>
<p>New compiler and operating systems can be added by creating system makefiles
like M_gcc.mak and M_unix.mak.  See <xdoc:xref to=\"customisation/build-environ\" >
customisation section</xdoc:xref> for how to include new system files.
To be portable you should only specify tools
that would be available with the standard installations of the new compiler suite or
operating system. Listed below are the minimal
set of variables directly used by this style and so must be defined.</p>
<p>The build system uses the following variables to control the build
process. The first two select the makefiles with the compiler and operating
system specific data.  Note the operating system file is always included first,
so it can not rely on variables that will be set in the compiler file. Alternatively
the compiler file can <em>override</em> definitions if required. The
last variable selects the optimisation level
to use.  These variables must be set on the command line or as environment
variables or at the top of the first makefile.</p>
<dl><dt>CC</dt><dd>C compiler</dd>
<dt>OS</dt><dd>The operating system type, eg unix</dd>
<dt>VARIANT</dt><dd>The build system expects optimisation flags
to be added according to the value of this variable. A value of
<code>RELEASE</code> should add standard optimisation flags to the relevant
preprocessor and language flags.  A value of <code>DEBUG</code> or undefined or
an unrecognised value should add debugging flags. Other actions are
allowed, such as using a dummy install location when set to DEBUG.</dd></dl>
<p>The build system requires the following variables to be set for
each compiler suite.  You may also need to set other variables
that GNU make uses, such as <code>AR</code>, <code>RM</code> and <code>LINK</code>, for the new
build environment.</p>
<dl><dt>CCC</dt><dd>C++ compiler</dd>
<dt>CPPFLAGS</dt><dd>Preprocessor flags</dd>
<dt>CCFLAGS</dt><dd>C language flags</dd>
<dt>CCCFLAGS</dt><dd>C++ language flags</dd>
<dt>LDFLAGS</dt><dd>Linker flags</dd></dl>
Commonly defined optional variables are.
<dl><dt>FORTRAN</dt><dd>Fortran compiler </dd>
<dt>FORTRANFLAGS</dt><dd>Fortran language flags</dd>
<dt>OPENMP</dt><dd>OpenMP compiler switch</dd></dl>
<p>The following macros and definitions must be defined
in either the operating system or compiler definition makefiles.  For how
to define a makefile macro refer to the GNU make documentation.</p>
<dl><dt>do_link_exe</dt><dd>Creates an executable. Takes two
arguments: the program name and a list of objects.</dd>
<dt>do_link_shr</dt><dd>Creates a shared library. Takes three
arguments: the library name, a list of objects and an optional
version number. The prefix <code>lib</code>, used on many unices,
must <em>not</em> be automatically added.</dd>
<dt>do_archive</dt><dd>Creates a static library. Takes two
arguments: the library name and a list of objects. The
prefix <code>lib</code>, used on many unices,
must <em>not</em> be automatically added.</dd>
<dt>do_install</dt><dd>Installs a target.  Takes three arguments: the target
name, the destination <em>identifier</em> and permission <em>identifier</em>.
These identifiers are prepended to <code>DIR</code> to form the variable name
containing the destination directory and to <code>IFLAGS</code> for permissions.
The third argument is optional if it would be the same as the second. For
example a the identifier <code>BIN</code> would select the
<code>$(BINDIR)</code> directory variable or the the <code>$(BINIFLAGS)</code>
permission variable. The minimum set of directory and permission flags required
by the make style are:<br />
<dl><dt>BINDIR, BINIFLAGS</dt><dd>For executable targets</dd>
<dt>LIBDIR, LIBIFLAGS</dt><dd>For shared library targets</dd>
<dt>DOCDIR</dt><dd>For documentation targets</dd>
<dt>MANDIR, MANIFLAGS</dt><dd>For man-page or help targets</dd>
<dt>FILEIFLAGS</dt><dd>For general file targets</dd>
</dl></dd>
<dt>doit</dt><dd>Macro to recursively descend source tree.
Takes two arguments, the current make target (eg \"clean\")
and a list of directories. It should call <code>$(MAKE) -C [subdir] [target]</code>
for each directory in the list.</dd>
<dt>%$(sufdep): %.[???]</dt><dd>A set of implicit rules for
creating a dependency file for each source file extension. This
can be a dummy operation that creates an empty file if the
dependency information is not required.</dd></dl>
<p>The following variables for operating system settings
are expected.</p>
<dl><dt>sufobj</dt><dd>File suffix of object files</dd>
<dt>sufexe</dt><dd>File suffix of program</dd>
<dt>suflib</dt><dd>File suffix of static libraries</dd>
<dt>sufshr</dt><dd>File suffix of shared librraries</dd>
<dt>sufdep</dt><dd>File suffix of generated dependency files</dd>
<dt>SLASH</dt><dd>File path separator</dd></dl>
</xdoc:section >
\\endcond xdoc"
      classrelation 131376 // <realization>
	relation 131376 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 131376 // <realization>
	  b parent class_ref 129072 // generator
      end

      classrelation 131504 // <dependency>
	relation 131504 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 131504 // <dependency>
	  b parent class_ref 129072 // generator
      end

      classrelation 131632 // style (<directional composition>)
	relation 131632 *-->
	  a role_name "style" init_value "( \"#\", \"\", \"##END:\", \"\", \"##START:\", \"\", \"make\", &butter::gmake_generator::create )" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 131632 // style (<directional composition>)
	  b parent class_ref 128688 // basic_style
      end

      attribute 138160 "build_file_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"makefile\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The default leaf filename for the current style
"
      end

      attribute 138288 "build_file_sysname"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"makefile\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The default leaf filename for the current style
"
      end

      attribute 138416 "default_rules_sys"
	class_attribute const_attribute private explicit_type "sbyte"
	multiplicity "[]"
	init_value " { \"#\\n\"
, \"# M_sys.mk\\n\"
, \"#\\n\"
, \"##################################\\n\"
, \"# Settings for current environment\\n\"
, \"##################################\\n\"
, \"\\n\"
, \"OS ?= unix\\n\"
, \"ifeq ($(origin CC),default)\\n\"
, \"CC = gcc\\n\"
, \"endif\\n\"
, \"VARIANT ?= DEBUG\\n\"
, \"\\n\"
, \"# Preprocessor flags (defines and include directories)\\n\"
, \"#  CPPFLAGS\\n\"
, \"# C language flags\\n\"
, \"#  CCFLAGS\\n\"
, \"# C++ language flags\\n\"
, \"#  CCCFLAGS\\n\"
, \"# Fortran language flags\\n\"
, \"#  FORTRANFLAGS\\n\"
, \"# Linker flags\\n\"
, \"#  LDFLAGS\\n\"
, \"\\n\"
, \"# Optimisation/debugging flags\\n\"
, \"# are added depending on VARIANT\\n\"
, \"\\n\"
, \"##########################\\n\"
, \"## Include compiler and OS\\n\"
, \"##########################\\n\"
, \"include $(ROOTDIR)$(or $(SLASH),/)M_$(OS).mk\\n\"
, \"include $(ROOTDIR)$(or $(SLASH),/)M_$(CC).mk\\n\"
, \"\\n\"
, \"##############\\n\"
, \"## Unify Vars\\n\"
, \"##############\\n\"
, \"CFLAGS = $(CCFLAGS)\\n\"
, \"CXXFLAGS = $(CCCFLAGS)\\n\"
, \"FFLAGS = $(FORTRANFLAGS)\\n\"
, \"FC = $(FORTRAN)\\n\"
, \"\\n\"
, \"#############################################\\n\"
, \"##  Define standard directory descent targets\\n\"
, \"#############################################\\n\"
, \"export\\n\"
, \"unexport dirs\\n\"
, \"\\n\"
, \"all:: ; $(call doit,all,$(dirs))\\n\"
, \"\\n\"
, \"install:: ; $(call doit,install,$(dirs))\\n\"
, \"\\n\"
, \"distclean: doclean\\n\"
, \"\\t$(call doit,distclean,$(dirs))\\n\"
, \"\\t$(RM) core core.* $(TARGETS) *~ $(if $(sufdep),*$(sufdep))\\n\"
, \"\\n\"
, \"clean: doclean\\n\"
, \"\\t$(call doit,clean,$(dirs))\\n\"
, \"\\n\"
, \"doclean: \\n\"
, \"\\t$(if $(USEROBJ),$(RM) $(USEROBJ))\\n\"
, \"\\n\"
, \"################################################\\n\"
, \"##  Example link library setup with alternatives\\n\"
, \"################################################\\n\"
, \"##  \\n\"
, \"##  # Make this a one time only definition\\n\"
, \"##  \\n\"
, \"##  ifndef USE_XML_MK\\n\"
, \"##  USE_XML_MAK:=1\\n\"
, \"##  \\n\"
, \"##  ifdef ($(XMLLIB))\\n\"
, \"##  ifeq ($(XMLLIB),EXPAT)\\n\"
, \"##  CPPFLAGS+=-DEXPAT\\n\"
, \"##  LDFLAGS+=-lexpat\\n\"
, \"##  endif\\n\"
, \"##  \\n\"
, \"##  ifeq ($(XMLLIB),XML2)\\n\"
, \"##  CPPFLAGS+=-DXML2 `xml2-config --cflags`\\n\"
, \"##  LDFLAGS+=`xml2-config --libs`\\n\"
, \"##  endif\\n\"
, \"##  \\n\"
, \"##  endif # XMLLIB\\n\"
, \"##  \\n\"
, \"##  endif # USE_XML_MK\\n\"
, \"\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This is the default contents of a the rules file (M_sys.mk).
If a document artifact with name 'M_sys.mak' is not present when 
%butter is executed with \\@style='standard' then one will be created
using this string.
"
      end

      attribute 138544 "default_rules_cl"
	class_attribute const_attribute private explicit_type "sbyte"
	multiplicity "[]"
	init_value " { \"##########################################\\n\"
, \"##  Definitions for Microsoft VC compiler\\n\"
, \"#########################################\\n\"
, \"ifndef M_CL_MK\\n\"
, \"M_CL_MAK:=1\\n\"
, \"\\n\"
, \"CCC:=cl\\n\"
, \"CXX:=cl\\n\"
, \"AR:=link\\n\"
, \"ARFLAGS:= /LIB\\n\"
, \"FORTRAN:=fc\\n\"
, \"CPPFLAGS?=\\n\"
, \"CCFLAGS+=/Za /nologo /errorReport:none\\n\"
, \"CCCFLAGS+=/GR /Gm- /EHsc /Za /Zc:forScope /nologo /errorReport:none\\n\"
, \"\\n\"
, \"ifeq ($(VARIANT),DEBUG)\\n\"
, \"OPTFLAGS+=/Od /Zi\\n\"
, \"LDFLAGS+=/MTd\\n\"
, \"else\\n\"
, \"OPTFLAGS+=/O2\\n\"
, \"LDFLAGS+=/MT\\n\"
, \"endif\\n\"
, \"\\n\"
, \"CCFLAGS+=$(OPTFLAGS)\\n\"
, \"CCCFLAGS+=$(OPTFLAGS)\\n\"
, \"FORTRANFLAGS?=\\n\"
, \"LDFLAGS+=$(OPTFLAGS)\\n\"
, \"\\n\"
, \"FORTRANLIBS:=\\n\"
, \"OPENMP:=/openmp\\n\"
, \"\\n\"
, \"endif # end of once-only\\n\"
, \"\\n\"
, \"#  commands to execute (built-in):\\n\"
, \"COMPILE.c = $(CC) $(subst -,/,$(subst -L,/LIBPATH ,$(patsubst -l%,%.lib,$(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH)))) /c /Fo\\n\"
, \"COMPILE.cc = $(CXX) $(subst -,/,$(subst -L,/LIBPATH ,$(patsubst -l%,%.lib,$(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH)))) /c /Fo\\n\"
, \"define _makeobj_\\n\"
, \"%$$(sufobj): %$(1) ; $$(COMPILE$(1))$$@ $$<\\n\"
, \"endef\\n\"
, \"\\n\"
, \"$(foreach suff,.c .cc .cpp .cxx,$(eval $(call _makeobj_,$(suff))))\\n\"
, \"\\n\"
, \"# Commands to create dummy make dependency files.\\n\"
, \"# (Or use depend generator such as X11 makedepend\\n\"
, \"# or Digital Mars makedep or makedep.py)\\n\"
, \"# %$(sufdep): %$(1)\\n\"
, \"# \\tstart makedep.py $$@ $$< $(CC) /showInclude /Zs /nologo $(CPPFLAGS) $(CXXFLAGS)\\n\"
, \"define _makedep_\\n\"
, \"%$(sufdep): %$(1) ; @echo # Dummy file  $$@\\n\"
, \"endef\\n\"
, \"\\n\"
, \"$(foreach suff,.c .C .cc .cpp .cxx,$(eval $(call _makedep_,$(suff))))\\n\"
, \"\\n\"
, \"_makeobj_:=\\n\"
, \"_makedep_:=\\n\"
, \"\\n\"
, \"define do_link_exe\\n\"
, \"$(1) : $(2); $$(LINK.cpp) $$(OUTPUT_OPTIONS) /Fe$(1) $(2)\\n\"
, \"endef\\n\\n\"
, \"define do_link_shr\\n\"
, \"$(1) : CCFLAGS+=$(SHRFLAGS)\\n\"
, \"$(1) : CCCFLAGS+=$(SHRFLAGS)\\n\"
, \"$(1) : $(2); $$(LINK.cpp) $$(OUTPUT_OPTIONS) /dll /Fe$(1) $(2)\\n\"
, \"endef\\n\\n\"
, \"define do_archive\\n\"
, \"$(1): $(2) ; $$(AR) $$(ARFLAGS) /OUT:$(1) $(2)\\n\"
, \"endef\\n\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This is the default contents of the rules file (M_cl.mak) for
the microsoft compiler. If a 
document artifact with name 'M_cl.mk' is not present when 
%butter is executed with \\@style='standard' then one will be created
using this string.

"
      end

      attribute 138672 "default_rules_gcc"
	class_attribute const_attribute private explicit_type "sbyte"
	multiplicity "[]"
	init_value " { \"####################################\\n\"
, \"##  Definitions for GNU g++ compiler\\n\"
, \"####################################\\n\"
, \"ifndef M_GCC_MK\\n\"
, \"M_GCC_MK:=1\\n\"
, \"##\\n\"
, \"## Define compiler variables once only.\\n\"
, \"## \\n\"
, \"CCC?=g++\\n\"
, \"FORTRAN?=gfortran\\n\"
, \"CPPFLAGS?=\\n\"
, \"CCFLAGS+=-Wall -std=c99\\n\"
, \"CCCFLAGS+=-Wall -std=c++98\\n\"
, \"\\n\"
, \"ifeq ($(VARIANT),DEBUG)\\n\"
, \"OPTFLAGS+=-O0 -DDEBUG=1\\n\"
, \"CCFLAGS+=-pedantic\\n\"
, \"CCCFLAGS+=-Weffc++\\n\"
, \"else\\n\"
, \"OPTFLAGS+=-O2 -march=native -DDEBUG=0\\n\"
, \"endif\\n\"
, \"\\n\"
, \"CCFLAGS+=$(OPTFLAGS)\\n\"
, \"CCCFLAGS+=$(OPTFLAGS)\\n\"
, \"FORTRANFLAGS+=$(OPTFLAGS)\\n\"
, \"LDFLAGS?=\\n\"
, \"SHRFLAGS?=-fpic\\n\"
, \"\\n\"
, \"FORTRANLIBS:=-lgfortran\\n\"
, \"OPENMP:=-fopenmp\\n\"
, \"\\n\"
, \"endif\\n\"
, \"# END ONCE-ONLY\\n\"
, \"\\n\"
, \"define _makedep_\\n\"
, \"%$(sufdep): %$(1)\\n\"
, \"\\tset -e; $$(CCC) -MM $$(CPPFLAGS) $$< \\\\\\n\"
, \"\\t| sed 's/\\\\($$*\\\\)$$(sufobj)[ :]*/\\\\1$$(sufobj) $$@ : /g' > $$@;\\\\\\n\"
, \"\\t[ -s $$@ ] || rm -f $$@\\n\"
, \"endef\\n\"
, \"\\n\"
, \"$(foreach suff,.c .C .cc .cpp .cxx,$(eval $(call _makedep_,$(suff))))\\n\"
, \"_makedep_:=\\n\"
, \"\\n\"
, \"define do_link_exe\\n\"
, \"$(1) : $(2); $$(LINK.cpp) $$(OUTPUT_OPTIONS) -o $(1) -Wl,--start-group $(2) -Wl,--end-group\\n\"
, \"endef\\n\"
, \"define do_link_shr\\n\"
, \"$(1) : CCFLAGS+=$(SHRFLAGS)\\n\"
, \"$(1) : CCCFLAGS+=$(SHRFLAGS)\\n\"
, \"$(1) : $(2); $$(LINK.cpp) $$(OUTPUT_OPTIONS) -shared -Wl,-soname,$(1) -o $(1) -Wl,--start-group $(2) -Wl,--end-group\\n\"
, \"endef\\n\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This is the default contents of the rules file (M_gcc.mk) for
the GNU compiler collection. If a 
document artifact with name 'M_gcc.mk' is not present when 
%butter is executed with \\@style='standard' then one will be created
using this string.
"
      end

      attribute 138800 "default_rules_unix"
	class_attribute const_attribute private explicit_type "sbyte"
	multiplicity "[]"
	init_value " { \" # Definition of for loop in local shell.\\n\"
, \"define doit\\n\"
, \"$(if $(2),STATUS=0 ; for subdir in $(2); do $(MAKE) -C $${subdir}  $(1) || STATUS=$$? ; done ; exit $${STATUS})\\n\"
, \"endef\\n\"
, \"\\n\"
, \"# MAKE MOST VARIABLES ONCE-ONLY\\n\"
, \"ifndef M_UNIX_MK\\n\"
, \"M_UNIX_MK:=1\\n\"
, \"#############################\\n\"
, \"##  Default install locations\\n\"
, \"#############################\\n\"
, \"PREFIX=$(ROOTDIR)/installdir\\n\"
, \"BINDIR?=$(PREFIX)/bin\\n\"
, \"LIBDIR?=$(PREFIX)/lib\\n\"
, \"INCLUDEDIR?=$(PREFIX)/include\\n\"
, \"DATADIR?=$(PREFIX)/share\\n\"
, \"DOCDIR?=$(DATADIR)/doc\\n\"
, \"MANDIR?=$(DATADIR)/man1\\n\"
, \"HTMLDIR?=$(DATADIR)/html\\n\"
, \"\\n# Flags for the install targets.\\n\"
, \"BINIFLAGS?=-m 755\\n\"
, \"FILEIFLAGS?=-m 644\\n\"
, \"LIBIFLAGS?=-m 644 \\n\"
, \"MANIFLAGS?=-m 644\\n\"
, \"INSTALL?=install\\n\"
, \"\\n# Standard suffixes\\n\"
, \"sufobj:=.o\\n\"
, \"sufexe:=\\n\"
, \"suflib:=.a\\n\"
, \"sufshr:=.so\\n\"
, \"sufdep:=.d\\n\"
, \"\\n# Path separator\\n\"
, \"SLASH?=/\\n\"
, \"\\n# END OF ONCE-ONLY.\\n\"
, \"endif\\n\\n\"
, \"define do_install\\n\"
, \"install:: $(1) ; $$(INSTALL) -d $$($(2)DIR) ; $$(INSTALL) $$($(or $(3),$(2))IFLAGS) $(1) $$($(2)DIR)/$(1)\\n\"
, \"endef\\n\\n\"
, \"define do_archive\\n\"
, \"$(1): $(2) ; $$(AR) $$(ARFLAGS) $(1) $(2)\\n\"
, \"endef\\n\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This is the default contents of the rules file (M_unix.mak) for
a UNiX/POSIX like operating system. If a 
document artifact with name 'M_unix.mak' is not present when 
%butter is executed with \\@style='standard' then one will be created
using this string.

"
      end

      attribute 138928 "default_rules_winnt"
	class_attribute const_attribute private explicit_type "sbyte"
	multiplicity "[]"
	init_value " { \"# Definition of for loop in local shell.\\n\\n\"
, \"define doit\\n\"
, \"IF \\\"$(2)\\\" NEQ \\\"\\\" FOR %%W IN ( $(2) ) DO \\\"$(subst /,\\\\,$(MAKE))\\\" -C %%W $(1)\\n\"
, \"endef\\n\"
, \"\\n\"
, \"ifndef M_WINNT_MK\\n\"
, \"M_WINNT_MK:=1\\n\"
, \"#############################\\n\"
, \"##  Default install locations\\n\"
, \"#############################\\n\"
, \"PREFIX?=$(ROOTDIR)\\\\installdir\\n\"
, \"BINDIR?=$(PREFIX)\\\\bin\\n\"
, \"DATADIR?=$(PREFIX)\\\\share\\n\"
, \"DOCDIR?=$(DATADIR)\\\\doc\\n\"
, \"HTMLDIR?=$(DATADIR)\\\\html\\n\"
, \"INCLUDEDIR?=$(PREFIX)\\\\include\\n\"
, \"LIBDIR?=$(PREFIX)\\\\lib\\n\"
, \"MANDIR?=$(DATADIR)\\\\man1\\n\"
, \"\\n# Standard Suffixes\\n\"
, \"sufobj:=.obj\\n\"
, \"sufexe:=.exe\\n\"
, \"sufdep:=.dep\\n\"
, \"suflib:=.lib\\n\"
, \"sufshr:=.dll\\n\"
, \"# Programs\\n\"
, \"MKDIR?=MD\\n\"
, \"COPY?=COPY /Y /B /V\\n\"
, \"RM:=-DEL /F\\n\"
, \"\\n# Path separator\\n\"
, \"SLASH?=\\\\\\n\"
, \"\\n# END OF ONCE-ONLY.\\n\"
, \"endif\\n\\n\"
, \"define do_install\\n\"
, \"install:: $(1) ; IF NOT EXIST $$($(2)DIR) ( $$(MKDIR) $$($(2)DIR) )\\n\\t$$(COPY) $(1) $$($(2)DIR)\\\\$(1)\\n\"
, \"endef\\n\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This is the default contents of the rules file (M_Windows_NT.mk) for
a (post NT) Micrsoft Windows like operating system. If a 
document artifact with name 'M_Windows_NT.mk' is not present when 
%butter is executed with \\@style='standard' then one will be created
using this string.
"
      end

      attribute 139056 "default_rules_list"
	class_attribute const_attribute private explicit_type "sbyte"
	multiplicity "[]"
	init_value " { default_rules_sys, default_rules_cl, default_rules_gcc, default_rules_unix, default_rules_winnt, 0 }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * * ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Null terminated list of the default_rules_[] attributes.
This is a simple list of the default_rules_[...] attributes, listed
in the same order as the rules_name attribute. It is only
used to initialise the default_rules attribute. 
"
      end

      attribute 139184 "default_rules"
	class_attribute const_attribute private explicit_type "sbyte"
	init_value "= combine(gmake_generator::default_rules_list)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A list containing _all_ the default rules.
This is assigned all the default rules concatenated together. The
rules appear in the order specified by rules_name.
\\sa default_rules_list
"
      end

      attribute 139312 "rules_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"M_sys.mk M_cl.mk M_gcc.mk M_unix.mk M_Windows_NT.mk\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A space separated list of rule names.
This style has multiple system buildfiles. This variable contains a space
separated list of the names of these files.
"
      end

      attribute 139440 "lib_set_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set of included libraries
"
      end

      attribute 139568 "qualified_target_name_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The target name as used by make
"
      end

      operation 144432 "gmake_generator"
	preserve_cpp_body_indent private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${abstract};"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}${)}
: lib_set_ ()
, qualified_target_name_ ()
{
${body}}
"
	
	
	
	
	comment "Create a generator from the top-level a_project

\\pre a_project.parent = nul"
      end

      operation 144560 "gmake_generator"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 130736 // gmake_generator
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
	comment "no copy"
      end

      operation 144688 "gmake_generator"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 130736 // gmake_generator
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
	comment "no copy"
      end

      operation 144816 "operator ="
	cpp_deleted private return_type class_ref 130736 // gmake_generator
	nparams 1
	  param in name "" type class_ref 130736 // gmake_generator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	
	
	
	
	comment "no assign"
      end

      operation 144944 "~gmake_generator"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${abstract} {};"
	
	
	
	
      end

      operation 145072 "create"
	class_operation preserve_cpp_body_indent public explicit_return_type "std::unique_ptr< base_generator >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Create bjam generator object.s"
      end

      operation 145200 "assoc_library"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** This method a library association to the current target entry for a_target.

Responsibilites
- Properties
 - associated includes, ldflags, cflags"
      end

      attribute 139696 "a_os"
	private explicit_type "QTextOStream"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 145328 "assoc_source"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " This method sets up object for creating a new target entry for a_target.

Responsibilites
- Properties
 - doc/source: includes, ldflags, cflags
 - compiler
- Other
 - set compilation for individual 

\\cond XDOC
<property style=\"standard\" name=\"include\" on=\"artifact\" subtype=\"stereotype=source\"> Add
include directories to compilation of this source only.  Any include directories
needed to compile dependents of this source should be set in this property on
the target artifact that is associated to the source.</property>
\\endcond XDOC"
      end

      operation 145456 "descendent_link"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 3
	  param inout name "a_art" type class_ref 129200 // compound_artifact
	  param inout name "a_sys" type class_ref 129200 // compound_artifact
	  param in name "a_loc" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Write the Jamfile descent links for a_location to a_os"
      end

      operation 145584 "end_target"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** This method finalises the target entry for a_target."
      end

      operation 145712 "external_target"
	private explicit_return_type "void"
	nparams 1
	  param in name "a_current" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "In this style external targets are not used, external library 
data is written in local-targets directly where it is 
referenced."
      end

      operation 145840 "initialise"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_base" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Write extra details to the top-level build file. "
      end

      operation 145968 "install_target"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** Create an install target.

Responsibilites
- Properties
 - install (library, executable and document)"
      end

      operation 146096 "process_flags"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 4
	  param in name "a_inc_list" explicit_type "unistr"
	  param in name "a_flag_list" explicit_type "unistr"
	  param inout name "a_cppflags" explicit_type "unistr"
	  param inout name "a_cflags" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Process a_inc_list and a_flag_list into preprocessor
and compiler flag sets."
      end

      operation 146224 "process_hdrs"
	class_operation preserve_cpp_body_indent private explicit_return_type "unistr"
	nparams 1
	  param in name "a_inc_list" explicit_type "unistr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Transform a space separated list of include dirs into a
list with -I..."
      end

      operation 146352 "requirements"
	class_operation private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Scan a_item for any requirements, add these to a_req and
return true if found."
      end

      operation 146480 "start_target"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** This method sets up object for creating a new target entry for a_target.

Responsibility
- Properties
 - compiler
 - include, ldflags, cflags
 - buildfile
 - type (library)
- Other
 - shared lib
 - static lib
 - executable
 - non-standard target"
      end
    end

    class 130864 "jam_generator"
      visibility package 
      nactuals 1
      actual class class_ref 129072 // generator
        rank 0 value class_ref 130864 // jam_generator
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Build file generator for standard jam.

This is the build system generator of choice as is supports the widest range of
build options.

\\cond XDOC
<style style=\"make\">
<limitation>The <code>standard</code> jam tool does not provide
a shared library target. Providing a shared library for this style is on 
the <link target=\"todo\">TODO list</link>.</limitation>
\\endcond XDOC"
      classrelation 131760 // <realization>
	relation 131760 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 131760 // <realization>
	  b parent class_ref 129072 // generator
      end

      classrelation 131888 // <dependency>
	relation 131888 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 131888 // <dependency>
	  b parent class_ref 129072 // generator
      end

      classrelation 132016 // style (<directional composition>)
	relation 132016 *-->
	  a role_name "style" init_value "( \"#\", \"\", \"##END:\", \"\", \"##START:\", \"\", \"standard\", &butter::jam_generator::create )" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 132016 // style (<directional composition>)
	  b parent class_ref 128688 // basic_style
      end

      attribute 139824 "build_file_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"Jamfile\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 139952 "build_file_sysname"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"Jamfile\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 140080 "default_rules"
	class_attribute const_attribute private explicit_type "sbyte"
	multiplicity "[]"
	init_value " { \"#\\n\"
, \"# Default Jamrules\\n\"
, \"#\\n\"
, \"\\nif $(UNIX)  { SUFSHR ?= .so ; }\\n\"
, \"else if $(NT) { SUFSHR ?= .dll ; }\\n\"
, \"\\n\"
, \"if $(JAM_TOOLSET) { TOOLSET ?= $(JAM_TOOLSET) ; }\\n\"
, \"TOOLSET ?= GNU ;\\n\"
, \"VARIANT ?= DEBUG ;\\n\"
, \"\\n\"
, \"#############################\\n\"
, \"##\\n\"
, \"##  Default install locations\\n\"
, \"##\\n\"
, \"#############################\\n\"
, \"PREFIX = installdir ;\\n\"
, \"BINDIR = $(PREFIX)/bin ;\\n\"
, \"DATADIR = $(PREFIX)/share ;\\n\"
, \"DOCDIR = $(DATADIR)/doc ;\\n\"
, \"HTMLDIR = $(DATADIR)/html ;\\n\"
, \"INCDIR = $(PREFIX)/include ;\\n\"
, \"LIBDIR = $(PREFIX)/lib ;\\n\"
, \"MANDIR = $(DATADIR)/man1 ;\\n\"
, \"\\n\"
, \"######################################################\\n\"
, \"##\\n\"
, \"##  Example definitions for compiler suite (TOOLSETS)\\n\"
, \"##  It is possible to add definitions here or in a\\n\"
, \"##  separate file \\\"$(TOOLSET).jam\\\", the NOCARE rule\\n\"
, \"##  tells jam not to worry if file does not exist.\\n\"
, \"## \\n\"
, \"######################################################\\n\"
, \"NOCARE $(TOOLSET).jam ;\\n\"
, \"include $(TOOLSET).jam ;\\n\"
, \"switch $(TOOLSET)\\n\"
, \"{\\n\"
, \"case GNU :\\n\"
, \"CC = gcc ;\\n\"
, \"C++ = g++ ;\\n\"
, \"FORTRAN = gfortran ;\\n\"
, \"LINK = $(C++) ;\\n\"
, \"CCFLAGS += -Wall -std=c99 ;\\n\"
, \"C++FLAGS += -Wall -std=c++98 ;\\n\"
, \"SHRFLAGS = -fpic ;\\n\"
, \"switch $(VARIANT)\\n\"
, \"{\\n\"
, \"case RELEASE :\\n\"
, \"  OPTIM += -O2 -march=native -DDEBUG=0 ;\\n\"
, \"case * :\\n\"
, \"  OPTIM = -O0 -ggdb -DDEBUG=1 ;\\n\"
, \"  CCFLAGS += -pedantic ;\\n\"
, \"  C++FLAGS += ; # -Weffc++ ;\\n\"
, \"}\\n\"
, \"FORTRANFLAGS += -Wall -c ;\\n\"
, \"LINKFLAGS += $(OPTIM) ;\\n\"
, \"OPENMP = -fopenmp ;\\n\"
, \"FORTRANLIBS += -lgfortran ;\\n\"
, \"}\\n\"
, \"\\n\"
, \"##################################################\\n\"
, \"##\\n\"
, \"##  Example of how you might define a set of\\n\"
, \"##  \\\"standard\\\" flags for libraries you use often.\\n\"
, \"##\\n\"
, \"##################################################\\n\"
, \"##\\n\"
, \"##switch $(GUILIB)\\n\"
, \"##{\\n\"
, \"##case GTKMM :\\n\"
, \"##  CCFLAGS += `pkg-config gtkmm-2.4 --cflags` ;\\n\"
, \"##  C++FLAGS += `pkg-config gtkmm-2.4 --cflags` ;\\n\"
, \"##  LINKFLAGS += `pkg-config gtkmm-2.4 --libs` ;\\n\"
, \"##\\n\"
, \"##case MOTIF :\\n\"
, \"##  CCFLAGS += -I/usr/include ;\\n\"
, \"##  C++FLAGS += -I/usr/include ;\\n\"
, \"##  LINKFLAGS += -L/usr/lib -lXm -lXp -lXpm -lXmu -lXt -lXext -lX11 ;\\n\"
, \"##\\n\"
, \"##case QT3 :\\n\"
, \"##  CCFLAGS += -I$(QTDIR)/include ;\\n\"
, \"##  C++FLAGS += -I$(QTDIR)/include ;\\n\"
, \"##  LINKFLAGS += -L$(QTDIR)/lib -lqt-mt -lXext -lX11 -lm ;\\n\"
, \"##\\n\"
, \"##case * :\\n\"
, \"##}\\n\"
, \"##\\n\"
, \"\\n\"
, \"# Set variable for variant-specific build-dir handling\\n\"
, \"BASE_LOCATE_TARGET = $(BUILDDIR)$(SLASH)$(VARIANT) ;\\n\"
, \"ALL_LOCATE_TARGET = $(BASE_LOCATE_TARGET) ;\\n\"
, 0 }
"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A template Jamrules.
"
      end

      attribute 140208 "rules_name"
	class_attribute const_attribute public explicit_type "unistr"
	init_value "(\"Jamrules\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The name of the jam rules document.
"
      end

      attribute 140336 "lib_defn_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Text for the a main targets associated sub-targets
"
      end

      attribute 140464 "grist_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Jam \"Grist\" of the current target location. Set in initialisation.
"
      end

      attribute 140592 "qualified_target_name_"
	private explicit_type "unistr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The full target name for the currently processing target (defined in start_target)
"
      end

      operation 146608 "jam_generator"
	preserve_cpp_body_indent private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${abstract};"
	cpp_def "${comment}${inline}${typeprefix}${class}::${name}${(}${)}
: lib_defn_ ()
, grist_ ()
, qualified_target_name_ ()
{
${body}}
"
	
	
	
	
	comment "Main ctor, takes top-level a_project.

\\pre a_project.parent = nul"
      end

      operation 146736 "jam_generator"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 130864 // jam_generator
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
	comment "no copy"
      end

      operation 146864 "jam_generator"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 130864 // jam_generator
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
	comment "no copy"
      end

      operation 146992 "operator ="
	cpp_deleted private return_type class_ref 130864 // jam_generator
	nparams 1
	  param in name "" type class_ref 130864 // jam_generator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	
	
	
	
	comment "no assign"
      end

      operation 147120 "~jam_generator"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${abstract} {};"
	
	
	
	
      end

      operation 147248 "create"
	class_operation preserve_cpp_body_indent public explicit_return_type "std::unique_ptr< base_generator >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Create bjam generator object.s"
      end

      operation 147376 "assoc_library"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** This method a library association to the current target entry for a_target.

Responsibilites
- Properties
 - associated includes, ldflags, cflags"
      end

      attribute 140720 "a_os"
	private explicit_type "QTextOStream"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 147504 "assoc_source"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** This method sets up object for creating a new target entry for a_target.

Responsibilites
- Properties
 - doc/source: includes, ldflags, cflags
 - compiler
- Other
 - set compilation for individual "
      end

      operation 147632 "check_properties"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_is_source" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Check a_source for butter properties and add information to a_os.
a_is_source is true of a_source stereotype is \"source\" and false
if stereotype is \"document\"."
      end

      operation 147760 "descendent_link"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 3
	  param inout name "a_art" type class_ref 129200 // compound_artifact
	  param inout name "a_sys" type class_ref 129200 // compound_artifact
	  param in name "a_loc" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Build the inter-buildfile link from this artifact/location to its parent and 
vice-versa. This is called just before the artifact is closed so has access 
to the (almost) complete content."
      end

      operation 147888 "end_target"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** This method finalises the target entry for a_target."
      end

      operation 148016 "external_target"
	private explicit_return_type "void"
	nparams 1
	  param in name "a_current" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "In this style external targets are not used, external library 
data is written in local-targets directly where it is 
referenced.

Responsibility
- Properties
 - project (defines external)
 - buildfile
- Other
 - external target"
      end

      operation 148144 "initialise"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_base" type class_ref 128560 // location
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Write extra details to the top-level build file.

Responsibilities:
- Property handling
 - build-dir
 - project: flags, include, ldflags, (library) type
 - style
 - version"
      end

      operation 148272 "install_target"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** Create an install target.

Responsibilites
- Properties
 - install (library, executable and document)"
      end

      operation 148400 "start_target"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "** This method sets up object for creating a new target entry for a_target.

Responsibility
- Properties
 - compiler
 - include, ldflags, cflags
 - buildfile
 - type (library)
- Other
 - shared lib
 - static lib
 - executable
 - non-standard target"
      end
    end

    class 130992 "style"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A Singleton container object for meta-style related information. This includes a 
factory method for creating style specific base_generators.

People implementing new build-system styles need to edit set_style 
to add a basic_style object for the new derived base_generator."
      classrelation 132528 // style_ (<unidirectional association>)
	relation 132528 --->
	  a role_name "style_" class_relation const_relation private
	    comment "Singleton object.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 132528 // style_ (<unidirectional association>)
	  b parent class_ref 128688 // basic_style
      end

      operation 150320 "get_style"
	class_operation preserve_cpp_body_indent constvalue public return_type class_ref 128688 // basic_style
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Get the Singleton Style object. set_style must have been called
prior to calling this method."
      end

      operation 150448 "set_style"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "a_style" explicit_type "unistr"
	    defaultvalue "QString()"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Set the style parameters."
      end

      operation 150576 "style"
	cpp_deleted private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${abstract};"
	
	
	
	
      end

      operation 150704 "~style"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${abstract} {};"
	
	
	
	
      end

      operation 150832 "style"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 130992 // style
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
	comment "no copy"
      end

      operation 150960 "operator ="
	cpp_deleted private return_type class_ref 130992 // style
	nparams 1
	  param in name "source" type class_ref 130992 // style
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${abstract};"
	
	
	
	
	comment "no assign"
      end

      operation 151088 "style"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 128688 // basic_style
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
	comment "create from parent class"
      end
    end

    class 131120 "UmlView"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 132656 // <generalisation>
	relation 132656 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 132656 // <generalisation>
	  b parent class_ref 131248 // typedef2
      end

      operation 151216 "UmlView"
	cpp_inline protected explicit_return_type ""
	nparams 2
	  param inout name "id" explicit_type "void"
	  param in name "s" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${abstract} : UmlBaseView(id, s) {
    };"
	
	
	
	
	comment "  the constructor, do not call it yourself !!!!!!!!!!"
      end
    end

    class 131248 "typedef2"
      visibility package stereotype "typedef" explicit_base_type "UmlBaseView"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 131504 "log"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Central point for handling logging and debugging messages."
      classrelation 132912 // com (<directional composition>)
	relation 132912 *-->
	  a role_name "com" class_relation public
	    comment "Exemplar
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 132912 // com (<directional composition>)
	  b parent class_ref 131504 // log
      end

      attribute 141488 "debug_file_"
	private explicit_type " QFile "
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "File for debugging information. 
"
      end

      attribute 141616 "debug_os_"
	private explicit_type " QTextOStream "
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Output stream for debug builds. 
"
      end

      classrelation 133040 // level_ (<directional composition>)
	relation 133040 *-->
	  a role_name "level_" private
	    comment "The current logging level. (default is 'warn')
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 133040 // level_ (<directional composition>)
	  b parent class_ref 131632 // log_levels
      end

      operation 154032 "log"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${abstract} : debug_file_ ()
    , debug_os_ ()
    , level_(warn)
    {};"
	
	
	
	
      end

      operation 154160 "log"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 131504 // log
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
      end

      operation 154288 "log"
	cpp_deleted private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 131504 // log
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${abstract};"
	
	
	
	
      end

      operation 154416 "operator ="
	cpp_deleted private return_type class_ref 131504 // log
	nparams 1
	  param in name "source" type class_ref 131504 // log
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract};"
	
	
	
	
      end

      operation 154544 "~log"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${abstract};"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
	comment "Dtor to ensure correct order of deconstructing stream and file"
      end

      operation 154672 "debug_log"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "a_fname" explicit_type "sbyte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Open a_fname file for debug messages. (Only present with debug builds.)"
      end

      operation 154800 "is_debug"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract} {
      return DEBUG && NULL != debug_os_.get ();
    };"
	
	
	
	
	comment "Is it possible to write debug messages."
      end

      operation 154928 "level"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${abstract} {
      return level_;
    };"
	
	
	
	
	comment "Get the logging level"
      end

      operation 155056 "level"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "a_val" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${abstract} {
      level_ = (0 >= a_val ? warn : (2 <= a_val ? debug : info ));
    };"
	
	
	
	
	comment "Set the logging level"
      end

      operation 155184 "stream"
	preserve_cpp_body_indent const public explicit_return_type "QTextOStream"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Get reference to debug stream. (Only present with debug builds.)

Calling this method before debug_log(filename) is undefined. This can
be tested with is_debug
\\pre is_debug"
      end

      operation 155312 "trace"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "a_lvl" type class_ref 131632 // log_levels
	  param in name "a_msg" explicit_type "sbyte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Write a message to the trace window"
      end
    end
  end

  deploymentview 128048 "finnerty"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 128048 "base_generator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 128048 // base_generator
      end
    end

    artifact 128176 "basic_style"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 128688 // basic_style
      end
    end

    artifact 128304 "bjam_generator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 128944 // bjam_generator
      end
    end

    artifact 128560 "cmake_generator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 129456 // cmake_generator
      end
    end

    artifact 128688 "compound_artifact"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 129200 // compound_artifact
      end
    end

    artifact 130096 "config"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}_CONFIG_H
#define @{PROJECT}_CONFIG_H 1
#include <string>
#include <stdexcept>

#ifdef NO_DBC
#define NO_DBC 1
#else
#define NO_DBC 0
#endif

inline void @{PROJECT}_ALWAYS(bool X, std::string Y)
{
   if (! X) throw std::runtime_error(Y);
}

inline void @{PROJECT}_REQUIRE(bool X, std::string Y)
{
   @{PROJECT}_ALWAYS(X,Y);
}

inline void @{PROJECT}_CHECK(bool X, std::string Y)
{
   if (! NO_DBC) @{PROJECT}_ALWAYS(X,Y);
}

inline void @{PROJECT}_ENSURE(bool X, std::string Y)
{
   if (! NO_DBC) @{PROJECT}_ALWAYS(X,Y);
}

#undef NO_DBC

#endif
"
      associated_elems
      end
    end

    artifact 128944 "const_token_iterator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 130224 // typedef1
	class_ref 130096 // const_token_iterator
      end
    end

    artifact 129072 "generator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 129072 // generator
      end
    end

    artifact 129200 "gmake_generator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 130736 // gmake_generator
      end
    end

    artifact 129328 "jam_generator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 130864 // jam_generator
      end
    end

    artifact 129584 "style"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 130992 // style
      end
    end

    artifact 129968 "main"
      stereotype "source"
      cpp_src "// the program is called with the socket port number in argument

int main( int argc, char ** argv )
{
  unsigned int port = 0; // Port for connection to bouml.
  // User-interaction variable
  //    0 = ask user
  //    1 = assume all answers are \"Ok\"
  //    2 = assume all answers are \"Abort/Cancel\"
  unsigned int interaction = 0;
  QApplication a( argc, argv );
  if ( argc < 2 )
  {
    return -1;
  }

  if( argc == 2 )
  {
    port = QString( argv[1] ).toUInt();
  }
  else
  {
    for( int c_ = 1; c_ != argc; ++c_ )
    {
      if( QString( argv[c_] ) == \"-test:ok\" )
      {
        interaction = 1;
      }
      else if ( QString( argv[c_] ) == \"-test:cancel\" )
      {
         interaction = 2;
      }
      else
      {
        port = QString( argv[c_] ).toUInt();
      }
    }
  }

  if ( UmlCom::connect( port ) )
  {
    try
    {
      UmlCom::trace( \"<b><i>jamfile/makefile</i> generator</b> \" + butter::butter_constants::BUTTER_VERSION + \"<br>\" );
      if ( DEBUG and 0 == interaction )
      {
        QString msg_;
        QTextOStream mos_( &msg_ );
#ifdef __unix__
        mos_ << \"Hit Ok to continue. If you want to debug this application attach to process [pid=\"
          << getpid() << \"] before continuing.\";
#else
#ifdef _WIN32
        mos_ << \"Hit Ok to continue. If you want to debug this application attach to process [Id=\"
          << GetCurrentProcessId() << \"] before continuing.\";
#else
        mos_ << \"Hit Ok to continue. If you want to debug this application attach to butter process now.\";
#endif
#endif
        QMessageBox msg_box_( butter::butter_constants::BUTTER_VERSION, msg_, QMessageBox::Warning, QMessageBox::Ok | QMessageBox::Default, QMessageBox::NoButton, QMessageBox::NoButton );
        msg_box_.exec();
      }
      BUTTER_CHECK( NULL != UmlPackage::getProject (), \"Error: no project defined!<br>\" );
      // Parse the project into a location tree
      std::unique_ptr< butter::location > base_( butter::location::parse_project( *UmlPackage::getProject(), interaction ) );
      // Generate the build-system files.
      std::unique_ptr< butter::base_generator > writer_( butter::style::get_style().create_writer() );
      writer_->create_system( *base_.get(), *UmlPackage::getProject() );
      // Write the build-system files.
      butter::location::write_documents( *base_.get() );
    }
    catch ( const std::exception & a_err )
    {
      UmlCom::trace( a_err.what () );
    }
    catch ( const char * a_what )
    {
      UmlCom::trace( a_what );
    }
    catch ( ... )
    {
      UmlCom::trace( \"Caught unknown exception.\" );
    }

    UmlCom::trace( \"<b><i>jamfile/makefile</i> generator</b> complete<br>\" );
    // must be called to cleanly inform that all is done
    UmlCom::bye();
  }

  UmlCom::close();
  return 0;
}
"
      associated_elems
      end
    end
  end
end
